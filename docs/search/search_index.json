{
    "docs": [
        {
            "location": "/", 
            "text": "Home\n\n\nPegasus is an experimental emulator frontend, focusing on customizability, cross platform support (including embedded) and high performance. Here you can find the related documentation, development notes and guides.\n\n\nUser guide\n\n\n\n\nInstallation and setup\n\n\nGame collections and metadata files\n\n\nDefault controls\n\n\nScripting\n\n\n\n\nCore development\n\n\n\n\nInstalling Qt on desktop\n\n\nCross compiling Qt for embedded\n\n\nBuilding Pegasus\n\n\nDeployment\n\n\nTranslations\n\n\n\n\nTheme development\n\n\n\n\nOverview\n\n\nQML tutorials\n\n\nStep-by-step: Simple theme\n\n\nStep-by-step: Flixnet theme\n\n\nAPI reference", 
            "title": "Home"
        }, 
        {
            "location": "/#home", 
            "text": "Pegasus is an experimental emulator frontend, focusing on customizability, cross platform support (including embedded) and high performance. Here you can find the related documentation, development notes and guides.", 
            "title": "Home"
        }, 
        {
            "location": "/#user-guide", 
            "text": "Installation and setup  Game collections and metadata files  Default controls  Scripting", 
            "title": "User guide"
        }, 
        {
            "location": "/#core-development", 
            "text": "Installing Qt on desktop  Cross compiling Qt for embedded  Building Pegasus  Deployment  Translations", 
            "title": "Core development"
        }, 
        {
            "location": "/#theme-development", 
            "text": "Overview  QML tutorials  Step-by-step: Simple theme  Step-by-step: Flixnet theme  API reference", 
            "title": "Theme development"
        }, 
        {
            "location": "/user-guide/controls/", 
            "text": "Controls\n\n\nThe default controls are:\n\n\n\n\n\n\n\n\nKeyboard\n\n\nGamepad\n\n\nEffect\n\n\n\n\n\n\n\n\n\n\nArrows\n\n\n or \n\n\nnavigation\n\n\n\n\n\n\n\n\n / \n\n\nselect/ok\n\n\n\n\n\n\n\n\n / \n\n\ncancel/back\n\n\n\n\n\n\n\n\n / \n\n\nfilter menu*\n\n\n\n\n\n\n or \n\n\n L1/LB or\n L2/LT\n\n\nprevious platform*\n\n\n\n\n\n\n or \n\n\n R1/RB or\n R2/RT\n\n\nnext platform*\n\n\n\n\n\n\n\n\n\n\nAlpha warning\n\n\nKeys marked with \n*\n are what currently used in the the main theme, however they might change in one of the next releases until the Beta.", 
            "title": "Controls"
        }, 
        {
            "location": "/user-guide/controls/#controls", 
            "text": "The default controls are:     Keyboard  Gamepad  Effect      Arrows   or   navigation      /   select/ok      /   cancel/back      /   filter menu*     or    L1/LB or  L2/LT  previous platform*     or    R1/RB or  R2/RT  next platform*      Alpha warning  Keys marked with  *  are what currently used in the the main theme, however they might change in one of the next releases until the Beta.", 
            "title": "Controls"
        }, 
        {
            "location": "/user-guide/scripting/", 
            "text": "Scripting\n\n\nPegasus supports calling external scripts and executables on certain program events.\n\n\n1. The scripts directory\n\n\nFirst, create a new directory called \nscripts\n inside the config directory:\n\n\n\n\nLinux: \n~/.config/pegasus-frontend\n or \n/etc/xdg/pegasus-frontend\n\n\nWindows: \nC:\\Users\\\nUser Name\n\\AppData\\Roaming\\pegasus-frontend\n\n\n\n\n2. Event directories\n\n\nInside the \nscripts\n folder, create a new directory for the kind of event you want to script:\n\n\n\n\n\n\n\n\nName\n\n\nWhen\n\n\n\n\n\n\n\n\n\n\nquit\n\n\non program quit\n\n\n\n\n\n\nreboot\n\n\non system reboot (also calls \nquit\n first)\n\n\n\n\n\n\nshutdown\n\n\non system shutdown (also calls \nquit\n first)\n\n\n\n\n\n\nconfig-changed\n\n\non the change of any configuration option\n\n\n\n\n\n\ncontrols-changed\n\n\non change of the control settings (also calls \nconfig\n first)\n\n\n\n\n\n\nsettings-changed\n\n\non change of the regular (non-control) settings (also calls \nconfig\n first)\n\n\n\n\n\n\ngame-start\n\n\nbefore starting a game\n\n\n\n\n\n\ngame-end\n\n\nafter finishing a game\n\n\n\n\n\n\n\n\n3. Script calling\n\n\nPut your executable scripts or binaries into these new directories. They will be called in \nalphabetic order\n when the event happens.", 
            "title": "Scripting"
        }, 
        {
            "location": "/user-guide/scripting/#scripting", 
            "text": "Pegasus supports calling external scripts and executables on certain program events.", 
            "title": "Scripting"
        }, 
        {
            "location": "/user-guide/scripting/#1-the-scripts-directory", 
            "text": "First, create a new directory called  scripts  inside the config directory:   Linux:  ~/.config/pegasus-frontend  or  /etc/xdg/pegasus-frontend  Windows:  C:\\Users\\ User Name \\AppData\\Roaming\\pegasus-frontend", 
            "title": "1. The scripts directory"
        }, 
        {
            "location": "/user-guide/scripting/#2-event-directories", 
            "text": "Inside the  scripts  folder, create a new directory for the kind of event you want to script:     Name  When      quit  on program quit    reboot  on system reboot (also calls  quit  first)    shutdown  on system shutdown (also calls  quit  first)    config-changed  on the change of any configuration option    controls-changed  on change of the control settings (also calls  config  first)    settings-changed  on change of the regular (non-control) settings (also calls  config  first)    game-start  before starting a game    game-end  after finishing a game", 
            "title": "2. Event directories"
        }, 
        {
            "location": "/user-guide/scripting/#3-script-calling", 
            "text": "Put your executable scripts or binaries into these new directories. They will be called in  alphabetic order  when the event happens.", 
            "title": "3. Script calling"
        }, 
        {
            "location": "/dev/install-qt/", 
            "text": "Installing Qt for desktop\n\n\nQt is a cross-platform application framework used by Pegasus. At least Qt 5.7 is requred, with 5.9 or later recommended for better performance on embedded platforms. For desktop platforms you can get the Qt tools using their installer:\n\n\n \n Download the Qt installer\n\n\nThen walk through the installation, and select the component \"Desktop gcc\" (Linux), \"MinGW\" (Windows) or \"macOS\" for macOS:\n\n\n\n    \n\n    \n\n\n\n\n\nNow you have the Qt libraries and the Qt Creator IDE installed.\n\n\n\n\nComponents on Windows\n\n\nOn \nWindows\n you can choose between MinGW and MSVC compiler packages. If you're planning to edit the source code and you want to use Visual Studio, you can select the matching MSVC component instead of MinGW.\n\n\n\n\n\n\nEmbedded\n\n\nThese instructions are for \ndesktop\n platforms. For embedded devices, you have to compile Qt manually, or use the prebuilt libraries available on Pegasus' GitHub page. See \nCross compile Qt\n.\n\n\n\n\nAlternative installations\n\n\nLinux\n\n\nOn many Linux distros, such as Debian (Ubuntu, Mint, ...) the Qt libraries available in the official repositories are often several years old (as a trade-off between stability and access to the latest software).\n\n\nUbuntu\n\n\nOn \nUbuntu\n, you can use the following PPAs to get the latest Qt releases:\n\n\n# for 14.04, use this:\n\nsudo add-apt-repository ppa:beineri/opt-qt593-trusty\n\n# for 16.04, use this:\n\nsudo add-apt-repository ppa:beineri/opt-qt593-xenial\n\nsudo apt-get update\nsudo apt-get install  \n\\\n\n    qt59declarative  \n\\\n\n    qt59graphicaleffects  \n\\\n\n    qt59gamepad  \n\\\n\n    qt59imageformats  \n\\\n\n    qt59multimedia  \n\\\n\n    qt59svg  \n\\\n\n    qt59tools\n\n\nsource\n /opt/qt59/bin/qt59-env.sh\n\n\n\n\n\nTo use this installation, you will need to call \n/opt/qt59/bin/qt59-env.sh\n every time you open a new terminal. You can do this by adding the \nsource ...\n line above to your \n~/.bashrc\n file (or whatever shell you use).\n\n\nArch\n\n\nIf you're using \nArch\n, you can get Qt from AUR; here's the relevant \nwiki page\n.\n\n\nWindows/MSYS2\n\n\nQt is availale in the MSYS2 repos. See \nhttps://wiki.qt.io/MSYS2\n.\n\n\nWindows/vcpkg\n\n\nAt the time of writing, Qt 5.8 is available in vcpkg as a port.\n\n\nmacOS/Homebrew\n\n\nQt is availale in the Homebrew repos, but may not be up to date. See \nhttp://brewformulas.org/qt5\n.", 
            "title": "Installing Qt"
        }, 
        {
            "location": "/dev/install-qt/#installing-qt-for-desktop", 
            "text": "Qt is a cross-platform application framework used by Pegasus. At least Qt 5.7 is requred, with 5.9 or later recommended for better performance on embedded platforms. For desktop platforms you can get the Qt tools using their installer:     Download the Qt installer  Then walk through the installation, and select the component \"Desktop gcc\" (Linux), \"MinGW\" (Windows) or \"macOS\" for macOS:  \n     \n       Now you have the Qt libraries and the Qt Creator IDE installed.   Components on Windows  On  Windows  you can choose between MinGW and MSVC compiler packages. If you're planning to edit the source code and you want to use Visual Studio, you can select the matching MSVC component instead of MinGW.    Embedded  These instructions are for  desktop  platforms. For embedded devices, you have to compile Qt manually, or use the prebuilt libraries available on Pegasus' GitHub page. See  Cross compile Qt .", 
            "title": "Installing Qt for desktop"
        }, 
        {
            "location": "/dev/install-qt/#alternative-installations", 
            "text": "", 
            "title": "Alternative installations"
        }, 
        {
            "location": "/dev/install-qt/#linux", 
            "text": "On many Linux distros, such as Debian (Ubuntu, Mint, ...) the Qt libraries available in the official repositories are often several years old (as a trade-off between stability and access to the latest software).", 
            "title": "Linux"
        }, 
        {
            "location": "/dev/install-qt/#ubuntu", 
            "text": "On  Ubuntu , you can use the following PPAs to get the latest Qt releases:  # for 14.04, use this: \nsudo add-apt-repository ppa:beineri/opt-qt593-trusty # for 16.04, use this: \nsudo add-apt-repository ppa:beineri/opt-qt593-xenial\n\nsudo apt-get update\nsudo apt-get install   \\ \n    qt59declarative   \\ \n    qt59graphicaleffects   \\ \n    qt59gamepad   \\ \n    qt59imageformats   \\ \n    qt59multimedia   \\ \n    qt59svg   \\ \n    qt59tools source  /opt/qt59/bin/qt59-env.sh  To use this installation, you will need to call  /opt/qt59/bin/qt59-env.sh  every time you open a new terminal. You can do this by adding the  source ...  line above to your  ~/.bashrc  file (or whatever shell you use).", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/dev/install-qt/#arch", 
            "text": "If you're using  Arch , you can get Qt from AUR; here's the relevant  wiki page .", 
            "title": "Arch"
        }, 
        {
            "location": "/dev/install-qt/#windowsmsys2", 
            "text": "Qt is availale in the MSYS2 repos. See  https://wiki.qt.io/MSYS2 .", 
            "title": "Windows/MSYS2"
        }, 
        {
            "location": "/dev/install-qt/#windowsvcpkg", 
            "text": "At the time of writing, Qt 5.8 is available in vcpkg as a port.", 
            "title": "Windows/vcpkg"
        }, 
        {
            "location": "/dev/install-qt/#macoshomebrew", 
            "text": "Qt is availale in the Homebrew repos, but may not be up to date. See  http://brewformulas.org/qt5 .", 
            "title": "macOS/Homebrew"
        }, 
        {
            "location": "/dev/cross-compile-qt/", 
            "text": "Cross compiling Qt for embedded platforms\n\n\n\n\nDanger\n\n\nCross compiling Qt is not trivial, you'll need some experience setting it all up. If you'd just like to make Pegasus run on a new device, consider opening a \nnew issue\n!\n\n\n\n\nThis documentation lists the configurations I personally use when building Qt.\n\n\nIf the latest Qt is not available for your platform, or you're not pleased with it (eg. hardware acceleration is disabled), you'll need to build it manually. You can get the latest officially released source code from the Qt website, from \nhere\n (select open source, click 'All downloads' on the bottom, then search for 'Source packages'). The general steps and requirements are described in the \nQt documentation\n.\n\n\nBuilding Qt takes significant time, about 30-60 minutes on a good desktop PC, depending on the selected components. It requires at least 2 GB of RAM and 6.5 GB free space. \nDo not\n try to build it on your $5 board computer.\n\n\nInstead, you can \ncross compile\n Qt. Cross compilation means the program or library you build will run on a different architecture or platform than your own PC. For example, if you're on Linux, you can build programs that will run on Windows, or on a phone or embedded device. For this, you'll need a \ntoolchain\n, a compiler that generates code for a certain platform, and a \nsysroot\n, a collection of libraries from the target device. Getting a toolchain and sysroot is different for every platform; you can find cross compilers for the popular targets, eg. ARMv7-Linux, while for others you might need to build a whole custom GCC. You'll have look around for them for your platform. For the Raspberry Pi cross compilation, this guide was very helpful: \nhttps://wiki.qt.io/RaspberryPi2EGLFS\n. This also shows how you can set up Qt Creator for testing and such.\n\n\nThe configurations below are mainly based on the Debian automatic builds, and the guide mentioned above. If you haven't read the \nofficial Qt docs\n yet, do it now. The \nconfigure\n step produces a detailed status report; make sure everything looks correct. You'll need everything under QML and Qt Quick (except maybe DirectX 12), and depending on your platform, 'EGLFS' under 'QPA backends' and at least one of the 'EGLFS details', that matches your device (eg. EGLFS Rasberry Pi). You might also want the X11 options off, if you won't use it. See \nconfigure --help\n or the documentation for the available options.\n\n\nRaspbian sysroot\n\n\nThe sysroot used for compilation is based on Raspbian, with the following additional packages installed:\n\n\napt-get build-dep -y qt4-x11 libqt5gui5\napt-get install -y libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0\napt-get install -y libopenal-dev libsqlite3-dev libfontconfig-dev\napt-get install -y libglib2.0-dev gstreamer1.0-omx libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev\napt-get install -y libsmbclient-dev libssh-dev libsdl2-dev\n\n\n\n\n\nRaspberry Pi 1 / Zero (ARMv6)\n\n\ntoolchain: \nhttps://github.com/raspberrypi/tools\n, cloned to \n/opt/raspberrypi-tools\n\nsysroot: see \nRaspbian sysroot\n\n\n../configure \\\n    -opensource \\\n    -confirm-license \\\n    -release \\\n    -strip \\\n    -no-rpath \\\n    -make libs \\\n    -skip qtwebengine \\\n    -skip wayland \\\n    -device linux-rasp-pi-g++ \\\n    -opengl es2 \\\n    -device-option CROSS_COMPILE=/opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\\n    -sysroot /opt/rpi-sysroot \\\n    -prefix /opt/qt58-rpi1 \\\n    -extprefix /opt/qt58-rpi1 \\\n    -hostprefix /opt/qt58-rpi1_hosttools \\\n    -no-use-gold-linker \\\n    -openssl \\\n    -fontconfig \\\n    -gstreamer 1.0 \\\n    -no-xcb \\\n    -no-dbus \\\n    -no-glib \\\n    -no-icu \\\n    -system-zlib \\\n    -system-libpng \\\n    -system-libjpeg \\\n    -system-sqlite \\\n    -verbose\n\n\n\n\n\nRaspberry Pi 2 (ARMv7) / 3 (ARMv8, but v7 compatible)\n\n\nNOTE: The difference is the \n-device\n parameter and the output paths.\n\n\ntoolchain: \nhttps://github.com/raspberrypi/tools\n, cloned to \n/opt/raspberrypi-tools\n\nsysroot: see \nRaspbian sysroot\n\n\n../configure \n\\\n\n    -opensource \n\\\n\n    -confirm-license \n\\\n\n    -release \n\\\n\n    -strip \n\\\n\n    -no-rpath \n\\\n\n    -make libs \n\\\n\n    -skip qtwebengine \n\\\n\n    -skip wayland \n\\\n\n    -device linux-rasp-pi2-g++ \n\\\n\n    -opengl es2 \n\\\n\n    -device-option \nCROSS_COMPILE\n=\n/opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \n\\\n\n    -sysroot /opt/rpi-sysroot \n\\\n\n    -prefix /opt/qt58-rpi2 \n\\\n\n    -extprefix /opt/qt58-rpi2 \n\\\n\n    -hostprefix /opt/qt58-rpi2_hosttools \n\\\n\n    -no-use-gold-linker \n\\\n\n    -openssl \n\\\n\n    -fontconfig \n\\\n\n    -gstreamer \n1\n.0 \n\\\n\n    -no-xcb \n\\\n\n    -no-dbus \n\\\n\n    -no-glib \n\\\n\n    -no-icu \n\\\n\n    -system-zlib \n\\\n\n    -system-libpng \n\\\n\n    -system-libjpeg \n\\\n\n    -system-sqlite \n\\\n\n    -verbose\n\n\n\n\n\nX11 static build\n\n\nThis was actually a native build, so the cross compilation options aren't needed.\n\n\n../configure\n    -opensource\n    -confirm-license\n    -release\n    -strip\n    -no-rpath\n    -static\n    -c++std c++11\n    -make libs\n    -skip qtwebengine\n    -skip wayland\n    -prefix /opt/qt58-x11-static\n    -openssl\n    -gstreamer 1.0\n    -fontconfig\n    -no-dbus\n    -verbose\n    -no-glib\n    -qt-zlib\n    -platform linux-g++\n    -no-icu\n    -qpa xcb\n    -xcb", 
            "title": "Cross compile Qt"
        }, 
        {
            "location": "/dev/cross-compile-qt/#cross-compiling-qt-for-embedded-platforms", 
            "text": "Danger  Cross compiling Qt is not trivial, you'll need some experience setting it all up. If you'd just like to make Pegasus run on a new device, consider opening a  new issue !   This documentation lists the configurations I personally use when building Qt.  If the latest Qt is not available for your platform, or you're not pleased with it (eg. hardware acceleration is disabled), you'll need to build it manually. You can get the latest officially released source code from the Qt website, from  here  (select open source, click 'All downloads' on the bottom, then search for 'Source packages'). The general steps and requirements are described in the  Qt documentation .  Building Qt takes significant time, about 30-60 minutes on a good desktop PC, depending on the selected components. It requires at least 2 GB of RAM and 6.5 GB free space.  Do not  try to build it on your $5 board computer.  Instead, you can  cross compile  Qt. Cross compilation means the program or library you build will run on a different architecture or platform than your own PC. For example, if you're on Linux, you can build programs that will run on Windows, or on a phone or embedded device. For this, you'll need a  toolchain , a compiler that generates code for a certain platform, and a  sysroot , a collection of libraries from the target device. Getting a toolchain and sysroot is different for every platform; you can find cross compilers for the popular targets, eg. ARMv7-Linux, while for others you might need to build a whole custom GCC. You'll have look around for them for your platform. For the Raspberry Pi cross compilation, this guide was very helpful:  https://wiki.qt.io/RaspberryPi2EGLFS . This also shows how you can set up Qt Creator for testing and such.  The configurations below are mainly based on the Debian automatic builds, and the guide mentioned above. If you haven't read the  official Qt docs  yet, do it now. The  configure  step produces a detailed status report; make sure everything looks correct. You'll need everything under QML and Qt Quick (except maybe DirectX 12), and depending on your platform, 'EGLFS' under 'QPA backends' and at least one of the 'EGLFS details', that matches your device (eg. EGLFS Rasberry Pi). You might also want the X11 options off, if you won't use it. See  configure --help  or the documentation for the available options.", 
            "title": "Cross compiling Qt for embedded platforms"
        }, 
        {
            "location": "/dev/cross-compile-qt/#raspbian-sysroot", 
            "text": "The sysroot used for compilation is based on Raspbian, with the following additional packages installed:  apt-get build-dep -y qt4-x11 libqt5gui5\napt-get install -y libudev-dev libinput-dev libts-dev libxcb-xinerama0-dev libxcb-xinerama0\napt-get install -y libopenal-dev libsqlite3-dev libfontconfig-dev\napt-get install -y libglib2.0-dev gstreamer1.0-omx libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev\napt-get install -y libsmbclient-dev libssh-dev libsdl2-dev", 
            "title": "Raspbian sysroot"
        }, 
        {
            "location": "/dev/cross-compile-qt/#raspberry-pi-1-zero-armv6", 
            "text": "toolchain:  https://github.com/raspberrypi/tools , cloned to  /opt/raspberrypi-tools \nsysroot: see  Raspbian sysroot  ../configure \\\n    -opensource \\\n    -confirm-license \\\n    -release \\\n    -strip \\\n    -no-rpath \\\n    -make libs \\\n    -skip qtwebengine \\\n    -skip wayland \\\n    -device linux-rasp-pi-g++ \\\n    -opengl es2 \\\n    -device-option CROSS_COMPILE=/opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf- \\\n    -sysroot /opt/rpi-sysroot \\\n    -prefix /opt/qt58-rpi1 \\\n    -extprefix /opt/qt58-rpi1 \\\n    -hostprefix /opt/qt58-rpi1_hosttools \\\n    -no-use-gold-linker \\\n    -openssl \\\n    -fontconfig \\\n    -gstreamer 1.0 \\\n    -no-xcb \\\n    -no-dbus \\\n    -no-glib \\\n    -no-icu \\\n    -system-zlib \\\n    -system-libpng \\\n    -system-libjpeg \\\n    -system-sqlite \\\n    -verbose", 
            "title": "Raspberry Pi 1 / Zero (ARMv6)"
        }, 
        {
            "location": "/dev/cross-compile-qt/#raspberry-pi-2-armv7-3-armv8-but-v7-compatible", 
            "text": "NOTE: The difference is the  -device  parameter and the output paths.  toolchain:  https://github.com/raspberrypi/tools , cloned to  /opt/raspberrypi-tools \nsysroot: see  Raspbian sysroot  ../configure  \\ \n    -opensource  \\ \n    -confirm-license  \\ \n    -release  \\ \n    -strip  \\ \n    -no-rpath  \\ \n    -make libs  \\ \n    -skip qtwebengine  \\ \n    -skip wayland  \\ \n    -device linux-rasp-pi2-g++  \\ \n    -opengl es2  \\ \n    -device-option  CROSS_COMPILE = /opt/raspberrypi-tools/arm-bcm2708/gcc-linaro-arm-linux-gnueabihf-raspbian-x64/bin/arm-linux-gnueabihf-  \\ \n    -sysroot /opt/rpi-sysroot  \\ \n    -prefix /opt/qt58-rpi2  \\ \n    -extprefix /opt/qt58-rpi2  \\ \n    -hostprefix /opt/qt58-rpi2_hosttools  \\ \n    -no-use-gold-linker  \\ \n    -openssl  \\ \n    -fontconfig  \\ \n    -gstreamer  1 .0  \\ \n    -no-xcb  \\ \n    -no-dbus  \\ \n    -no-glib  \\ \n    -no-icu  \\ \n    -system-zlib  \\ \n    -system-libpng  \\ \n    -system-libjpeg  \\ \n    -system-sqlite  \\ \n    -verbose", 
            "title": "Raspberry Pi 2 (ARMv7) / 3 (ARMv8, but v7 compatible)"
        }, 
        {
            "location": "/dev/cross-compile-qt/#x11-static-build", 
            "text": "This was actually a native build, so the cross compilation options aren't needed.  ../configure\n    -opensource\n    -confirm-license\n    -release\n    -strip\n    -no-rpath\n    -static\n    -c++std c++11\n    -make libs\n    -skip qtwebengine\n    -skip wayland\n    -prefix /opt/qt58-x11-static\n    -openssl\n    -gstreamer 1.0\n    -fontconfig\n    -no-dbus\n    -verbose\n    -no-glib\n    -qt-zlib\n    -platform linux-g++\n    -no-icu\n    -qpa xcb\n    -xcb", 
            "title": "X11 static build"
        }, 
        {
            "location": "/dev/build/", 
            "text": "Building Pegasus\n\n\nPegasus is a C++ program that uses the Qt framework. To build it run on your OS or device, you'll need a C++11 supporting compiler (g++ 4.6 or better), Qt 5.7 or later (version is important!) for your platform, and at least the following additional Qt components:\n\n\n\n\nQML module\n\n\nQt Quick 2 module\n\n\nMultimedia module (might be called as MultimediaQuick)\n\n\nSvg module\n\n\nGamepad module\n\n\n\n\nQt also provides a graphical IDE called Qt Creator, which you can use if you wish, but it's not a requirement. For installing Qt, see \nthis page\n.\n\n\nUsing Qt Creator\n\n\n\n\nOpen Qt Creator and open the project file (\npegasus.pro\n)\n\n\nQt Creator will ask you which Qt setup (\"kit\") you want to use (in case you've installed multiple versions), and where you want to place the generated files (see Details). If everything's OK, click Configure Project.\n\n\n(optional) Change the configuration (see \nhere\n)\n\n\n\n\nIn the bottom left corner, on the sidebar of Qt Creator, you can find 4 buttons:\n\n\n\n\nwith the button that looks like a desktop monitor, you can change the build type (optimized Release build or development-friendly but slower Debug build)\n\n\nthe green arrow will build and run the program\n\n\nthe green arrow with a bug will also open several debug toolbars\n\n\nthe hammer will build the project but won't start the application\n\n\n\n\n\n\n\n\nChange the build type to Release, and press the green arrow to build and run the project.\n\n\n\n\n\n\nUsing the command line\n\n\n\n\nCreate a build directory somewhere, and \ncd\n into it\n\n\nCall \nqmake\n, the configuration tool of Qt: \n/path/to/qmake  path/to/project  [options]\n.\n\n\nIf you have multiple Qt versions installed, make sure you call the right \nqmake\n. If you've installed using the official release from the Qt site, you can find it in \n[qt-installdir]/Qt5/[version]/gcc_64/bin\n (you can add it to your \n$PATH\n if you want, but it's not necessary).\n\n\nYou can also change some configuration options, which you can find \nhere\n.\n\n\n\n\n\n\nCall \nmake\n\n\n(optional) Call \nmake install\n\n\n\n\nConfiguration options\n\n\nYou can change build parameters to \nqmake\n (the Qt configuration tool) by appending \nKEY=VALUE\n pairs to its command line call. If you're using Qt Creator, you can find these settings on the Projects -\n Build settings tab, where you can modify the Additional arguments option (see \nhere\n).\n\n\n\n\n\n\nYou can use the following parameters:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nINSTALLDIR\n\n\nThe general installation directory used by \nmake install\n. Defaults to \n/opt/pegasus-frontend\n on Linux and \nC:\\pegasus-frontend\n on Windows. You can fine tune the installation directory of some components by other options.\n\n\n\n\n\n\nINSTALL_BINDIR\n\n\nThe installation directory of the runtime binary (\"exe\"). Defaults to \nINSTALLDIR\n.\n\n\n\n\n\n\nINSTALL_DATADIR\n\n\nThe installation directory of the data files, eg. default themes. Defaults to \nINSTALLDIR\n.\n\n\n\n\n\n\nINSTALL_ICONDIR\n\n\n[Linux only] The installation directory of the icon file. Defaults to \nINSTALLDIR\n (to make it portable), \n/usr/share/pixmaps\n is recommended if you want to install Pegasus system-wide.\n\n\n\n\n\n\nINSTALL_DESKTOPDIR\n\n\n[Linux only] The installation directory of the desktop entry. Defaults to \nINSTALLDIR\n (to make it portable), \n/usr/share/applications\n is recommended if you want to install Pegasus system-wide.", 
            "title": "Building"
        }, 
        {
            "location": "/dev/build/#building-pegasus", 
            "text": "Pegasus is a C++ program that uses the Qt framework. To build it run on your OS or device, you'll need a C++11 supporting compiler (g++ 4.6 or better), Qt 5.7 or later (version is important!) for your platform, and at least the following additional Qt components:   QML module  Qt Quick 2 module  Multimedia module (might be called as MultimediaQuick)  Svg module  Gamepad module   Qt also provides a graphical IDE called Qt Creator, which you can use if you wish, but it's not a requirement. For installing Qt, see  this page .", 
            "title": "Building Pegasus"
        }, 
        {
            "location": "/dev/build/#using-qt-creator", 
            "text": "Open Qt Creator and open the project file ( pegasus.pro )  Qt Creator will ask you which Qt setup (\"kit\") you want to use (in case you've installed multiple versions), and where you want to place the generated files (see Details). If everything's OK, click Configure Project.  (optional) Change the configuration (see  here )   In the bottom left corner, on the sidebar of Qt Creator, you can find 4 buttons:   with the button that looks like a desktop monitor, you can change the build type (optimized Release build or development-friendly but slower Debug build)  the green arrow will build and run the program  the green arrow with a bug will also open several debug toolbars  the hammer will build the project but won't start the application     Change the build type to Release, and press the green arrow to build and run the project.", 
            "title": "Using Qt Creator"
        }, 
        {
            "location": "/dev/build/#using-the-command-line", 
            "text": "Create a build directory somewhere, and  cd  into it  Call  qmake , the configuration tool of Qt:  /path/to/qmake  path/to/project  [options] .  If you have multiple Qt versions installed, make sure you call the right  qmake . If you've installed using the official release from the Qt site, you can find it in  [qt-installdir]/Qt5/[version]/gcc_64/bin  (you can add it to your  $PATH  if you want, but it's not necessary).  You can also change some configuration options, which you can find  here .    Call  make  (optional) Call  make install", 
            "title": "Using the command line"
        }, 
        {
            "location": "/dev/build/#configuration-options", 
            "text": "You can change build parameters to  qmake  (the Qt configuration tool) by appending  KEY=VALUE  pairs to its command line call. If you're using Qt Creator, you can find these settings on the Projects -  Build settings tab, where you can modify the Additional arguments option (see  here ).    You can use the following parameters:     Option  Description      INSTALLDIR  The general installation directory used by  make install . Defaults to  /opt/pegasus-frontend  on Linux and  C:\\pegasus-frontend  on Windows. You can fine tune the installation directory of some components by other options.    INSTALL_BINDIR  The installation directory of the runtime binary (\"exe\"). Defaults to  INSTALLDIR .    INSTALL_DATADIR  The installation directory of the data files, eg. default themes. Defaults to  INSTALLDIR .    INSTALL_ICONDIR  [Linux only] The installation directory of the icon file. Defaults to  INSTALLDIR  (to make it portable),  /usr/share/pixmaps  is recommended if you want to install Pegasus system-wide.    INSTALL_DESKTOPDIR  [Linux only] The installation directory of the desktop entry. Defaults to  INSTALLDIR  (to make it portable),  /usr/share/applications  is recommended if you want to install Pegasus system-wide.", 
            "title": "Configuration options"
        }, 
        {
            "location": "/dev/deploy/", 
            "text": "Deployment\n\n\nQt uses lots of modules, plugins and QML files, which makes it somewhat hard to create deployable packages manually. Fortunately, there are tools that can collect the necessary files for you.\n\n\nSee the general Qt documentation \nhere\n, especially the platform-specific notes. Since most of the details are described there, I'll just list the commands I usually use.\n\n\nLinux\n\n\n\n\nStatic builds\n\n\nIf you've manually built Qt as a static library, a simple \nmake install\n will likely be enough.\n\n\n\n\nYou can use \nlinuxdeployqt\n to create AppImages:\n\n\n./linuxdeployqt-continuous-x86_64.AppImage \n\\\n\n    -qmldir \nbuild dir\n \n\\\n\n    -bundle-non-qt-libs \n\\\n\n    \ninstall dir\n\n\ncp /path/to/libQt5Svg.so.5 ./lib/\n\n./linuxdeployqt-continuous-x86_64.AppImage \n\\\n\n    -appimage \n\\\n\n    \ninstall dir\n\n\n\n\n\n\nWindows\n\n\n windeployqt\n      --release\n      --qmldir \nbuild dir\n\n      --no-translations\n      --no-opengl-sw\n      \ninstallation dir\n\n\n\n\n\n\nmacOS\n\n\nHaven't tried yet. \nmacdeployqt\n should work in theory.", 
            "title": "Deployment"
        }, 
        {
            "location": "/dev/deploy/#deployment", 
            "text": "Qt uses lots of modules, plugins and QML files, which makes it somewhat hard to create deployable packages manually. Fortunately, there are tools that can collect the necessary files for you.  See the general Qt documentation  here , especially the platform-specific notes. Since most of the details are described there, I'll just list the commands I usually use.", 
            "title": "Deployment"
        }, 
        {
            "location": "/dev/deploy/#linux", 
            "text": "Static builds  If you've manually built Qt as a static library, a simple  make install  will likely be enough.   You can use  linuxdeployqt  to create AppImages:  ./linuxdeployqt-continuous-x86_64.AppImage  \\ \n    -qmldir  build dir   \\ \n    -bundle-non-qt-libs  \\ \n     install dir \n\ncp /path/to/libQt5Svg.so.5 ./lib/\n\n./linuxdeployqt-continuous-x86_64.AppImage  \\ \n    -appimage  \\ \n     install dir", 
            "title": "Linux"
        }, 
        {
            "location": "/dev/deploy/#windows", 
            "text": "windeployqt\n      --release\n      --qmldir  build dir \n      --no-translations\n      --no-opengl-sw\n       installation dir", 
            "title": "Windows"
        }, 
        {
            "location": "/dev/deploy/#macos", 
            "text": "Haven't tried yet.  macdeployqt  should work in theory.", 
            "title": "macOS"
        }, 
        {
            "location": "/dev/translate/", 
            "text": "Translations\n\n\nPegasus supports most languages in use today, and you can easily add new translations for any locale. The translations are stored in simple text files in XML format, so the only thing you need is a text editor. There's also a graphical tool to make things easier (see below). The translations themselves are collected in a separate repository \nhere\n, which is also included as a Git submodule in the main Pegasus repo.\n\n\n\n\nIn short\n\n\n\n\ndownload the \nQt tools\n\n\ndownload the \ntranslation repo\n\n\ncreate a copy of \npegasus_en.ts\n for your language\n\n\nopen the new file in \nQt Linguist\n and translate the UI strings\n\n\nopen a new issue in the \ntranslation repo\n and attach your TS file\n\n\n\n\n\n\n\n\nTodo\n\n\nIn the future, there'll be likely some kind of online site for managing translations.\n\n\n\n\nFile format and name\n\n\nThe translation files are text files in XML format, encoded in UTF-8. Their file name includes the \nBCP47 language tag\n of the locale the they're made for. Usually this means the following structure:\n\n\npegasus_[language][-script][-country].ts\n\n\n\n\n\nwhere\n\n\n\n\nlanguage\n is the language code (two letters, lowercase)\n\n\noptionally,\nscript\n defines the writing system (eg. simplified/traditional chinese) (four letters, title case)\n\n\noptionally, \ncountry\n defines a country-specific variant (two letters, uppercase)\n\n\n\n\nfor example, \nhi-Deva-IN\n means Hindi language, Devanagari script, and used in India.\n\n\n1. Preparing the tools\n\n\nYou can use any decent text editor, or you can also use \nQt Linguist\n, a graphical translation tool:\n\n\n\n\nQt Linguist is included with Qt, see \nhere\n. After installation, search for \nlinguist\n in the installation directory of Qt (Linux) or the Start menu (Windows).\n\n\n2. Prepare the translation files\n\n\nYou can find the translation files in \nthis repository\n. If you have no experience with Git, just click on the green \nClone or download\n button, then \nDownload ZIP\n.\n\n\nThen, create a copy of \npegasus_en.ts\n, and change \nen\n to your locale's code (see above).\n\n\n\n\nDeveloper note\n\n\nYou can create this file with \nlupdate ../src -ts pegasus_en.ts\n.\n\n\n\n\n3. Translate the file\n\n\nOpen your new file in a text editor or in Qt Linguist.\n\n\nIf you're using a \ntext editor\n, the translateable strings are inside \nmessage\n tags: you can see the original text in the \nsource\n tag, and you can provide your translation in \ntranslation\n. Also change the language tag on the top of the file (\nTS ...\n).\n\n\nIf you're using \nQt Linguist\n, first set your language in \nEdit -\n Translation file settings\n. After that, you can select a \"module\" on the left, then see the relevant strings in the upper-middle panel. You can add the translation in the center panel (marked with \"1\" on the picture above). A detailed guide for Qt Linguist can be found \nhere\n.\n\n\n\n\nHelp\n\n\n\n\n%1\n, \n%2\n, ... in the text is a placeholder for additional values, such as numbers, file names, etc.\n\n\nYou don't have to translate \nevery\n string; most of them won't be visible for the users, and will only be used in debug log files. It's enough to translate only the QML files (hover over the source code panel or check the \nlocation\n tag for the file name).\n\n\n\n\n\n\n\n\nTodo\n\n\nIn the future, UI and log messages will likely be separated to make translation easier.\n\n\n\n\n4. (dev) Add your translation to the QRC file\n\n\nThere's a file called \ntranslations.qrc.in\n in the translations repository. It's another XML file that you can open in a text editor, and collects all the translation files. Simply add a new \nfile\npegasus_LOCALECODE.qm\n/file\n entry.\n\n\n5. (dev) Rebuild Pegasus\n\n\nAt the moment, all translation files must be built into Pegasus. See the \nbuild documentation\n about how to rebuild the program.\n\n\n\n\nNote\n\n\nThis step is only required for trying out the translation in-app. You can safely skip it if you don't want to deal with building Pegasus.\n\n\n\n\n6. Open a pull request\n\n\nIf you know Git, open a pull request in the \ntranslations repository\n. Alternatively, open a new issue and attach your translation (TS) file.", 
            "title": "Translations"
        }, 
        {
            "location": "/dev/translate/#translations", 
            "text": "Pegasus supports most languages in use today, and you can easily add new translations for any locale. The translations are stored in simple text files in XML format, so the only thing you need is a text editor. There's also a graphical tool to make things easier (see below). The translations themselves are collected in a separate repository  here , which is also included as a Git submodule in the main Pegasus repo.   In short   download the  Qt tools  download the  translation repo  create a copy of  pegasus_en.ts  for your language  open the new file in  Qt Linguist  and translate the UI strings  open a new issue in the  translation repo  and attach your TS file     Todo  In the future, there'll be likely some kind of online site for managing translations.", 
            "title": "Translations"
        }, 
        {
            "location": "/dev/translate/#file-format-and-name", 
            "text": "The translation files are text files in XML format, encoded in UTF-8. Their file name includes the  BCP47 language tag  of the locale the they're made for. Usually this means the following structure:  pegasus_[language][-script][-country].ts  where   language  is the language code (two letters, lowercase)  optionally, script  defines the writing system (eg. simplified/traditional chinese) (four letters, title case)  optionally,  country  defines a country-specific variant (two letters, uppercase)   for example,  hi-Deva-IN  means Hindi language, Devanagari script, and used in India.", 
            "title": "File format and name"
        }, 
        {
            "location": "/dev/translate/#1-preparing-the-tools", 
            "text": "You can use any decent text editor, or you can also use  Qt Linguist , a graphical translation tool:   Qt Linguist is included with Qt, see  here . After installation, search for  linguist  in the installation directory of Qt (Linux) or the Start menu (Windows).", 
            "title": "1. Preparing the tools"
        }, 
        {
            "location": "/dev/translate/#2-prepare-the-translation-files", 
            "text": "You can find the translation files in  this repository . If you have no experience with Git, just click on the green  Clone or download  button, then  Download ZIP .  Then, create a copy of  pegasus_en.ts , and change  en  to your locale's code (see above).   Developer note  You can create this file with  lupdate ../src -ts pegasus_en.ts .", 
            "title": "2. Prepare the translation files"
        }, 
        {
            "location": "/dev/translate/#3-translate-the-file", 
            "text": "Open your new file in a text editor or in Qt Linguist.  If you're using a  text editor , the translateable strings are inside  message  tags: you can see the original text in the  source  tag, and you can provide your translation in  translation . Also change the language tag on the top of the file ( TS ... ).  If you're using  Qt Linguist , first set your language in  Edit -  Translation file settings . After that, you can select a \"module\" on the left, then see the relevant strings in the upper-middle panel. You can add the translation in the center panel (marked with \"1\" on the picture above). A detailed guide for Qt Linguist can be found  here .   Help   %1 ,  %2 , ... in the text is a placeholder for additional values, such as numbers, file names, etc.  You don't have to translate  every  string; most of them won't be visible for the users, and will only be used in debug log files. It's enough to translate only the QML files (hover over the source code panel or check the  location  tag for the file name).     Todo  In the future, UI and log messages will likely be separated to make translation easier.", 
            "title": "3. Translate the file"
        }, 
        {
            "location": "/dev/translate/#4-dev-add-your-translation-to-the-qrc-file", 
            "text": "There's a file called  translations.qrc.in  in the translations repository. It's another XML file that you can open in a text editor, and collects all the translation files. Simply add a new  file pegasus_LOCALECODE.qm /file  entry.", 
            "title": "4. (dev) Add your translation to the QRC file"
        }, 
        {
            "location": "/dev/translate/#5-dev-rebuild-pegasus", 
            "text": "At the moment, all translation files must be built into Pegasus. See the  build documentation  about how to rebuild the program.   Note  This step is only required for trying out the translation in-app. You can safely skip it if you don't want to deal with building Pegasus.", 
            "title": "5. (dev) Rebuild Pegasus"
        }, 
        {
            "location": "/dev/translate/#6-open-a-pull-request", 
            "text": "If you know Git, open a pull request in the  translations repository . Alternatively, open a new issue and attach your translation (TS) file.", 
            "title": "6. Open a pull request"
        }, 
        {
            "location": "/themes/overview/", 
            "text": "Theme guide\n\n\nOverview\n\n\nPegasus consists of two layers: the \ncore\n which looks for your games and metadata, and the \nuser interface\n (UI), where the data provided by the core can be presented in some form. The two layers are completely separated, which means you have full control about what you put on the screen, where you place assets or text and what kind of animations or effects you use on them.\n\n\n\n\nThemes in Pegasus define the look and feel of the whole \"content area\". Themes don't have predefined \"screens\" or fixed layouts, though you can implement them if you want. The goal is to give theme makers all the available tools and components and allow them creating interfaces without further restrictions.\n\n\nQML\n\n\nThemes are written in the \nQML\n language. QML (Qt Modeling Language) is a user interface specification language: it describes the components of the theme, their properties, and the hierarchy and relations between them. Technically it's similar to XML, HTML/CSS and the JSON languages.\n\n\n// An example QML document\n\n\n// *QML documents describe an object tree of elements*\n\n\n// Source: https://en.wikipedia.org/wiki/QML\n\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nRectangle\n \n{\n\n    \nid: canvas\n\n    \nwidth:\n \n250\n\n    \nheight:\n \n200\n\n    \ncolor:\n \nblue\n\n\n    \nImage\n \n{\n\n        \nid: logo\n\n        \nsource:\n \npics/logo.png\n\n        \nanchors.centerIn:\n \nparent\n\n        \nx:\n \ncanvas\n.\nheight\n \n/\n \n5\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThere are numerous built-in components you can use in a theme: simple types (texts, rectangles, images, ...), components that define layouts of other items (rows, grids, custom paths) and special elements (animations, particle effects, timers). These are contained in so called \nmodules\n, with most of them are in the one called \nQt Quick\n.\n\n\nFor learning QML, you can find resources on the \nQML tutorials page\n.\n\n\nExtending with JavaScript\n\n\nQML generally describes \nwhat\n is on the screen and how they \nlook\n like -- to tell what a component should \ndo\n, you can extend QML with \nJavaScript\n code. Don't worry if you aren't familiar with it; QML works quite well on its own, usually you only need to code if you want to implement some special behaviour for the elements.\n\n\n\n\nWarning\n\n\nWhile JavaScript is usually associated with websites, Pegasus is \nNOT\n a web browser or an HTML5 app. Only the JavaScript engine is used, not a whole browser. In addition, your code is compiled and cached automatically for better performance.\n\n\n\n\n\n\nFurther reading\n\n\n\n\nhttps://en.wikipedia.org/wiki/QML\n\n\nhttps://doc.qt.io/qt-5/qtquick-index.html\n\n\nhttps://doc.qt.io/qt-5/qmlapplications.html\n\n\n\n\n\n\nTheme directories\n\n\nPegasus is looking for themes in the following directories:\n\n\nAll platforms:\n\n\n\n\n[directory of the program]/themes\n\n\n[INSTALL_DATADIR]/themes\n (only if defined during a \nmanual build\n)\n\n\n\n\nLinux:\n\n\n\n\n~/.config/pegasus-frontend/themes\n\n\n~/.local/share/pegasus-frontend/themes\n\n\n/etc/xdg/pegasus-frontend/themes\n\n\n/usr/local/share/pegasus-frontend/themes\n\n\n/usr/share/pegasus-frontend/themes\n\n\n\n\nWindows:\n\n\n\n\nC:/Users/[user name]/AppData/Local/pegasus-frontend/themes\n\n\nC:/ProgramData/pegasus-frontend/themes\n\n\n\n\nmacOS:\n\n\n\n\n~/Library/Preferences/pegasus-frontend/themes\n\n\n~/Library/Application Support/pegasus-frontend/themes\n\n\n/Library/Application Support/pegasus-frontend/themes\n\n\n\n\nTheme structure\n\n\nInside these directories, every individual theme is contained in its own directory. The name of this directory doesn't matter, as long as it's unique.\n\n\nTwo files are required for every theme: a \ntheme.cfg\n file that contains information about your theme, like name or description, and a \ntheme.qml\n which will be the entry point to your QML code (ie. this will be loaded first by Pegasus).\n\n\ntheme.cfg\n\n\nThe \ntheme.cfg\n file is used to describe your theme. It's a simple configuration file, in the same format as Pegasus' game metadata files (\ntodo\n). In short:\n\n\n\n\noption name: option value\n defines options\n\n\n[words between brackets]\n defines groups of options\n\n\nempty lines and lines starting with \n#\n (comments) are skipped\n\n\nlines starting with space will be appended to the previous option's value (which you can use for eg. descriptions spanning multiple lines)\n\n\n\n\nHere is an example:\n\n\nname\n: \nPegasus Grid\n\n\nauthor\n: \nM\u00e1ty\u00e1s Mustoha\n\n\nversion\n: \nalpha\n\n\nsummary\n: \nThe default grid theme of Pegasus\n\n\n\n\n\n\nCurrently the following options are recognized:\n\n\n\n\nname\n: the name of your theme (required). Should be short and unique.\n\n\nversion\n: a version identifier; can be a number, text, whatever you like as long as it's unique.\n\n\nauthor\n: the author of the theme; either simply a name or in \"name \nemail\n\" format.\n\n\nsummary\n: a short (max. 80-100 characters) summary.\n\n\ndescription\n: a longer description.\n\n\nkeywords\n: keywords used for searching. Separate them with '\n,\n'.\n\n\nhomepage\n: a link to you project's site.\n\n\n\n\nEvery theme is required to have a \ntheme.cfg\n file, with at least the \nname\n defined.\n\n\ntheme.qml\n\n\nThe \ntheme.qml\n file is the entry point of your theme. You should start with the following minimal code:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \n// your code here\n\n\n\n}\n\n\n\n\n\n\nFocusScope\n is a special container component in QML which is used for separating keyboard/gamepad input from the other parts of the UI (eg. main menu). \nFocusScope\n, as well as the other components and modules will be introduced in the more in-depth \nQML tutorials\n.\n\n\nHello World!\nHere's a simple \"Hello World\" test theme:\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nText\n \n{\n\n        \ntext:\n \nHello World!\n\n        \ncolor:\n \nwhite\n\n        \nanchors.centerIn:\n \nparent\n\n    \n}\n\n\n\n}\n\n\n\n\n\nUsage\n\n\nIf you've created the \ntheme.cfg\n and \ntheme.qml\n files as described above, you should now see your entry in the list of available themes in Pegasus' settings menu.\n\n\nAfter the theme is loaded, pressing the \nF5\n key will make Pegasus reload its files, making it easier to try out changes.\n\n\nSpecial QML properties\n\n\nPegasus' themes are standard QML files, and you can use any QML tutorial (collection \nhere\n) to learn it. Pegasus itself provides the following additions:\n\n\n\n\na virtual coordinate system to make multiple aspect ratio support easier\n\n\nthe actual collection- and platform data, and the way to select and launch a game\n\n\n\n\nVirtual screen coordinates\n\n\nWhen you load a theme, its main component (the \nFocusScope\n above) will be set to fill the whole screen. The top left corner of the screen is (0,0), with the X axis growing right and the Y axis growing downwards.\n\n\nWhile positioning elements on the screen, you should make sure that your theme works well with multiple aspect ratios and screen resolutions. Generally in QML this isn't hard because you can tell the position and size of elements compared to others using \nanchors\n (eg. align an element right above or below to another -- see the \nQML tutorials\n).\n\n\nWhen you \ndo\n have to position or size things manually, it is common to use percentages or create different themes for different aspect ratios. For better support of different screen sizes, Pegasus also provides an optional \nvirtual coordinate system\n. You can treat the screen as one with the resolution of \nat least\n \n1280x720\n virtual pixels (16:9 aspect ratio), and use integer pixel values, which will then scale to the correct physical value according to the screen's real resolution.\n\n\n\n\nIf the screen's aspect ratio is smaller than 16:9 (eg. 4:3 or 5:4), then the \nvirtual\n screen will be taller than 720 virtual pixels, but still have 1280 as a fixed width. If the aspect ratio is wider (eg. 21:9), then the virtual height will remain to be 720, but the width will be bigger.\n\n\nThis system can be useful when you want to express precise details as integer values, like spacing, text sizes, width/height, etc. To use virtual pixel values, simply put your number inside a function called \nvpx\n. For example, instead of\n\n\nwidth:\n \n50\n\n\n\n\n\n\nyou would use\n\n\nwidth:\n \nvpx\n(\n50\n)\n\n\n\n\n\n\nwhich will turn into 50 real pixels on a 720p screen, scale up to 150px on a 4K TV, and scale down to 25px on a smaller 360p device.\n\n\nUsing virtual pixel values is optional, but often more intuitive than percentages with several digits of precision. Depending on your situations, you might prefer one over the other, or use both of them. Feel free to experiment!\n\n\n\n\nTip\n\n\nUsing the virtual coordinate system does \nnot\n decrease image quality.\n\n\n\n\nGame data\n\n\nThe actual data set provided by the Core is available in the global object \napi\n. Its items are detailed on the \nAPI reference page\n.\n\n\nNext steps\n\n\n\n\nQML tutorial collection\n\n\nStep-by-step example: Simple theme\n\n\nStep-by-step example: Flixnet theme", 
            "title": "Overview"
        }, 
        {
            "location": "/themes/overview/#theme-guide", 
            "text": "", 
            "title": "Theme guide"
        }, 
        {
            "location": "/themes/overview/#overview", 
            "text": "Pegasus consists of two layers: the  core  which looks for your games and metadata, and the  user interface  (UI), where the data provided by the core can be presented in some form. The two layers are completely separated, which means you have full control about what you put on the screen, where you place assets or text and what kind of animations or effects you use on them.   Themes in Pegasus define the look and feel of the whole \"content area\". Themes don't have predefined \"screens\" or fixed layouts, though you can implement them if you want. The goal is to give theme makers all the available tools and components and allow them creating interfaces without further restrictions.", 
            "title": "Overview"
        }, 
        {
            "location": "/themes/overview/#qml", 
            "text": "Themes are written in the  QML  language. QML (Qt Modeling Language) is a user interface specification language: it describes the components of the theme, their properties, and the hierarchy and relations between them. Technically it's similar to XML, HTML/CSS and the JSON languages.  // An example QML document  // *QML documents describe an object tree of elements*  // Source: https://en.wikipedia.org/wiki/QML  import   QtQuick   2.0  Rectangle   { \n     id: canvas \n     width:   250 \n     height:   200 \n     color:   blue \n\n     Image   { \n         id: logo \n         source:   pics/logo.png \n         anchors.centerIn:   parent \n         x:   canvas . height   /   5 \n     }  }   There are numerous built-in components you can use in a theme: simple types (texts, rectangles, images, ...), components that define layouts of other items (rows, grids, custom paths) and special elements (animations, particle effects, timers). These are contained in so called  modules , with most of them are in the one called  Qt Quick .  For learning QML, you can find resources on the  QML tutorials page .", 
            "title": "QML"
        }, 
        {
            "location": "/themes/overview/#extending-with-javascript", 
            "text": "QML generally describes  what  is on the screen and how they  look  like -- to tell what a component should  do , you can extend QML with  JavaScript  code. Don't worry if you aren't familiar with it; QML works quite well on its own, usually you only need to code if you want to implement some special behaviour for the elements.   Warning  While JavaScript is usually associated with websites, Pegasus is  NOT  a web browser or an HTML5 app. Only the JavaScript engine is used, not a whole browser. In addition, your code is compiled and cached automatically for better performance.    Further reading   https://en.wikipedia.org/wiki/QML  https://doc.qt.io/qt-5/qtquick-index.html  https://doc.qt.io/qt-5/qmlapplications.html", 
            "title": "Extending with JavaScript"
        }, 
        {
            "location": "/themes/overview/#theme-directories", 
            "text": "Pegasus is looking for themes in the following directories:  All platforms:   [directory of the program]/themes  [INSTALL_DATADIR]/themes  (only if defined during a  manual build )   Linux:   ~/.config/pegasus-frontend/themes  ~/.local/share/pegasus-frontend/themes  /etc/xdg/pegasus-frontend/themes  /usr/local/share/pegasus-frontend/themes  /usr/share/pegasus-frontend/themes   Windows:   C:/Users/[user name]/AppData/Local/pegasus-frontend/themes  C:/ProgramData/pegasus-frontend/themes   macOS:   ~/Library/Preferences/pegasus-frontend/themes  ~/Library/Application Support/pegasus-frontend/themes  /Library/Application Support/pegasus-frontend/themes", 
            "title": "Theme directories"
        }, 
        {
            "location": "/themes/overview/#theme-structure", 
            "text": "Inside these directories, every individual theme is contained in its own directory. The name of this directory doesn't matter, as long as it's unique.  Two files are required for every theme: a  theme.cfg  file that contains information about your theme, like name or description, and a  theme.qml  which will be the entry point to your QML code (ie. this will be loaded first by Pegasus).", 
            "title": "Theme structure"
        }, 
        {
            "location": "/themes/overview/#themecfg", 
            "text": "The  theme.cfg  file is used to describe your theme. It's a simple configuration file, in the same format as Pegasus' game metadata files ( todo ). In short:   option name: option value  defines options  [words between brackets]  defines groups of options  empty lines and lines starting with  #  (comments) are skipped  lines starting with space will be appended to the previous option's value (which you can use for eg. descriptions spanning multiple lines)   Here is an example:  name :  Pegasus Grid  author :  M\u00e1ty\u00e1s Mustoha  version :  alpha  summary :  The default grid theme of Pegasus   Currently the following options are recognized:   name : the name of your theme (required). Should be short and unique.  version : a version identifier; can be a number, text, whatever you like as long as it's unique.  author : the author of the theme; either simply a name or in \"name  email \" format.  summary : a short (max. 80-100 characters) summary.  description : a longer description.  keywords : keywords used for searching. Separate them with ' , '.  homepage : a link to you project's site.   Every theme is required to have a  theme.cfg  file, with at least the  name  defined.", 
            "title": "theme.cfg"
        }, 
        {
            "location": "/themes/overview/#themeqml", 
            "text": "The  theme.qml  file is the entry point of your theme. You should start with the following minimal code:  import   QtQuick   2.0  FocusScope   { \n\n     // your code here  }   FocusScope  is a special container component in QML which is used for separating keyboard/gamepad input from the other parts of the UI (eg. main menu).  FocusScope , as well as the other components and modules will be introduced in the more in-depth  QML tutorials .  Hello World! Here's a simple \"Hello World\" test theme: import   QtQuick   2.0  FocusScope   { \n\n     Text   { \n         text:   Hello World! \n         color:   white \n         anchors.centerIn:   parent \n     }  }", 
            "title": "theme.qml"
        }, 
        {
            "location": "/themes/overview/#usage", 
            "text": "If you've created the  theme.cfg  and  theme.qml  files as described above, you should now see your entry in the list of available themes in Pegasus' settings menu.  After the theme is loaded, pressing the  F5  key will make Pegasus reload its files, making it easier to try out changes.", 
            "title": "Usage"
        }, 
        {
            "location": "/themes/overview/#special-qml-properties", 
            "text": "Pegasus' themes are standard QML files, and you can use any QML tutorial (collection  here ) to learn it. Pegasus itself provides the following additions:   a virtual coordinate system to make multiple aspect ratio support easier  the actual collection- and platform data, and the way to select and launch a game", 
            "title": "Special QML properties"
        }, 
        {
            "location": "/themes/overview/#virtual-screen-coordinates", 
            "text": "When you load a theme, its main component (the  FocusScope  above) will be set to fill the whole screen. The top left corner of the screen is (0,0), with the X axis growing right and the Y axis growing downwards.  While positioning elements on the screen, you should make sure that your theme works well with multiple aspect ratios and screen resolutions. Generally in QML this isn't hard because you can tell the position and size of elements compared to others using  anchors  (eg. align an element right above or below to another -- see the  QML tutorials ).  When you  do  have to position or size things manually, it is common to use percentages or create different themes for different aspect ratios. For better support of different screen sizes, Pegasus also provides an optional  virtual coordinate system . You can treat the screen as one with the resolution of  at least   1280x720  virtual pixels (16:9 aspect ratio), and use integer pixel values, which will then scale to the correct physical value according to the screen's real resolution.   If the screen's aspect ratio is smaller than 16:9 (eg. 4:3 or 5:4), then the  virtual  screen will be taller than 720 virtual pixels, but still have 1280 as a fixed width. If the aspect ratio is wider (eg. 21:9), then the virtual height will remain to be 720, but the width will be bigger.  This system can be useful when you want to express precise details as integer values, like spacing, text sizes, width/height, etc. To use virtual pixel values, simply put your number inside a function called  vpx . For example, instead of  width:   50   you would use  width:   vpx ( 50 )   which will turn into 50 real pixels on a 720p screen, scale up to 150px on a 4K TV, and scale down to 25px on a smaller 360p device.  Using virtual pixel values is optional, but often more intuitive than percentages with several digits of precision. Depending on your situations, you might prefer one over the other, or use both of them. Feel free to experiment!   Tip  Using the virtual coordinate system does  not  decrease image quality.", 
            "title": "Virtual screen coordinates"
        }, 
        {
            "location": "/themes/overview/#game-data", 
            "text": "The actual data set provided by the Core is available in the global object  api . Its items are detailed on the  API reference page .", 
            "title": "Game data"
        }, 
        {
            "location": "/themes/overview/#next-steps", 
            "text": "QML tutorial collection  Step-by-step example: Simple theme  Step-by-step example: Flixnet theme", 
            "title": "Next steps"
        }, 
        {
            "location": "/themes/qml-tutorials/", 
            "text": "QML tutorial collection\n\n\nThis page collects tutorials and guides for learning QML. While the example theme guides are intended to be beginner friendly, I'd recommend reading at least the basics and the dynamic layout topics, which you'll most likely use in a theme. After that, just pick whatever you're interested in and/or look up things in the official documentation.\n\n\nBasics\n\n\nThese provide an introduction to the language. After reading them, you should be familiar with:\n\n\n\n\nthe basic syntax\n\n\nsimple elements: Rectangle, Image, Text and Item\n\n\npositioners: Column, Row, Grid, Flow\n\n\nsimple transformations: rotate, scale\n\n\nanchoring\n\n\nfocus\n\n\nhandling key presses with the Keys element\n\n\n\n\nResources:\n\n\n\n\nQML ebook chapter 4\n\n\nWikipedia\n\n\nQML official tutorial\n\n\nbasic types\n\n\n\n\nDynamic layout\n\n\nA theme should be able to show the list of games and collections. An array of data objects is what QML calls \"Model\". You can fully customize how one item should look like on the screen (the \"Delegate\"), and how all these items should be aligned/layed out (the \"View\").\n\n\nThe standard layouts are:\n\n\n\n\nListView\n: aligns the items on a horizontal or vertical path\n\n\nGridView\n: fills a grid with the items (either the number rows or the number of colums should be specified)\n\n\nPathView\n: aligns the items along an arbitrary path\n\n\nRepeater\n: simply creates the items but doesn't do any further alignment\n\n\n\n\nResources:\n\n\n\n\nQML ebook chapter 6\n\n\n\n\nStates, transitions, animations\n\n\nYou might want to create a theme that consists of multiple states, eg. a platform select screen and an actual game list. Or perhaps you want to simply move an object around in multiple steps or toggle some effects. A State object can be used to set properties of one or more objects at once. The transition between two states can be animated. Animations can also be created for individual properties, or played stand-alone.\n\n\nResources:\n\n\n\n\nQML ebook chapter 5\n\n\n\n\nMedia playback\n\n\nYou can write a complete media player in QML. The third-party documentation is a bit outdated, so you might want to check the official references too. The most common components are Video, Audio and Playlist.\n\n\nResources:\n\n\n\n\nMultimedia module\n\n\nQML ebook chapter 10\n\n\n\n\nFurther resources\n\n\nThe elements so far are what you'd commonly use in a theme, however there are still lots of features not covered here, including:\n\n\n\n\ntouch control and sensors (eg. gyroscope)\n\n\nmanual 2D drawing canvas\n\n\nparticles and graphical effects (shadow, gradient, blur, ...)\n\n\n3D scenes\n\n\ncustom shader code\n\n\n\n\nFor further learning, the unofficial QML book might come handy: \nhttps://qmlbook.github.io/index.html\n\n\nYou can also find a bunch of official documentations here:\n\n\n\n\nhttps://doc.qt.io/qt-5/qmlapplications.html\n\n\nhttps://doc.qt.io/qt-5/qtquick-index.html\n\n\nhttps://doc.qt.io/qt-5/qtqml-index.html\n\n\nhttps://doc.qt.io/qt-5/qml-tutorial.html\n\n\nhttps://doc.qt.io/qt-5/qtquick-qmlmodule.html\n\n\n\n\nThis one is a bit old, but might be good for learning the concepts: \nhttps://doc.qt.io/archives/qt-4.8/qtquick.html\n.\n\n\nVisual editor\n\n\nQt Creator has a drag-and-drop QML editor (the Design tab). Unfortunately I couldn't use it because of crashes, but you might have better luck with it.", 
            "title": "QML tutorials"
        }, 
        {
            "location": "/themes/qml-tutorials/#qml-tutorial-collection", 
            "text": "This page collects tutorials and guides for learning QML. While the example theme guides are intended to be beginner friendly, I'd recommend reading at least the basics and the dynamic layout topics, which you'll most likely use in a theme. After that, just pick whatever you're interested in and/or look up things in the official documentation.", 
            "title": "QML tutorial collection"
        }, 
        {
            "location": "/themes/qml-tutorials/#basics", 
            "text": "These provide an introduction to the language. After reading them, you should be familiar with:   the basic syntax  simple elements: Rectangle, Image, Text and Item  positioners: Column, Row, Grid, Flow  simple transformations: rotate, scale  anchoring  focus  handling key presses with the Keys element   Resources:   QML ebook chapter 4  Wikipedia  QML official tutorial  basic types", 
            "title": "Basics"
        }, 
        {
            "location": "/themes/qml-tutorials/#dynamic-layout", 
            "text": "A theme should be able to show the list of games and collections. An array of data objects is what QML calls \"Model\". You can fully customize how one item should look like on the screen (the \"Delegate\"), and how all these items should be aligned/layed out (the \"View\").  The standard layouts are:   ListView : aligns the items on a horizontal or vertical path  GridView : fills a grid with the items (either the number rows or the number of colums should be specified)  PathView : aligns the items along an arbitrary path  Repeater : simply creates the items but doesn't do any further alignment   Resources:   QML ebook chapter 6", 
            "title": "Dynamic layout"
        }, 
        {
            "location": "/themes/qml-tutorials/#states-transitions-animations", 
            "text": "You might want to create a theme that consists of multiple states, eg. a platform select screen and an actual game list. Or perhaps you want to simply move an object around in multiple steps or toggle some effects. A State object can be used to set properties of one or more objects at once. The transition between two states can be animated. Animations can also be created for individual properties, or played stand-alone.  Resources:   QML ebook chapter 5", 
            "title": "States, transitions, animations"
        }, 
        {
            "location": "/themes/qml-tutorials/#media-playback", 
            "text": "You can write a complete media player in QML. The third-party documentation is a bit outdated, so you might want to check the official references too. The most common components are Video, Audio and Playlist.  Resources:   Multimedia module  QML ebook chapter 10", 
            "title": "Media playback"
        }, 
        {
            "location": "/themes/qml-tutorials/#further-resources", 
            "text": "The elements so far are what you'd commonly use in a theme, however there are still lots of features not covered here, including:   touch control and sensors (eg. gyroscope)  manual 2D drawing canvas  particles and graphical effects (shadow, gradient, blur, ...)  3D scenes  custom shader code   For further learning, the unofficial QML book might come handy:  https://qmlbook.github.io/index.html  You can also find a bunch of official documentations here:   https://doc.qt.io/qt-5/qmlapplications.html  https://doc.qt.io/qt-5/qtquick-index.html  https://doc.qt.io/qt-5/qtqml-index.html  https://doc.qt.io/qt-5/qml-tutorial.html  https://doc.qt.io/qt-5/qtquick-qmlmodule.html   This one is a bit old, but might be good for learning the concepts:  https://doc.qt.io/archives/qt-4.8/qtquick.html .", 
            "title": "Further resources"
        }, 
        {
            "location": "/themes/qml-tutorials/#visual-editor", 
            "text": "Qt Creator has a drag-and-drop QML editor (the Design tab). Unfortunately I couldn't use it because of crashes, but you might have better luck with it.", 
            "title": "Visual editor"
        }, 
        {
            "location": "/themes/example-simple/", 
            "text": "Step by step: Simple theme\n\n\nIn this tutorial, I'll show the theme creation in practice by implementing the theme above from scratch. Before we start, you might want to be familiar with the QML basics and dynamic layout elements (see the \nQML tutorials\n).\n\n\nThe theme has the list of games on the left, in a scrollable menu, with the collection's logo above it. Then some basic information is shown on the right, like title, developer, release year, description, and also a box art.\n\n\nLet's get started!\n\n\nInitial files\n\n\nI'm on Linux, so my \ntheme directory\n is at \n~/.config/pegasus-frontend/themes\n. I'm creating a new directory called \ntutorial-simple\n, and in it my \ntheme.cfg\n, like this:\n\n\nname\n: \nSimple theme\n\n\nauthor\n: \nM\u00e1ty\u00e1s Mustoha\n\n\n\n\n\n\nand the basic \ntheme.qml\n:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n\n}\n\n\n\n\n\n\nNow I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the \nF5\n key after changes. I also open the main log file \n~/.config/pegasus-frontend/lastrun.log\n which will tell me if I've made any errors in the QML file.\n\n\n\n\nTip\n\n\nYou can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others.\n\n\n\n\n\n\nNote\n\n\nYou might see \n.qmlc\n files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.\n\n\n\n\nBase layout\n\n\nThe theme consists of a left and right main panel, so I'll start by adding them first. The left menu panel will take 1/3 of the whole screen, and have a lighter gray color. The right panel will be darker and take the rest of the screen.\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nRectangle\n \n{\n\n        \nid: menu\n\n\n        \ncolor:\n \n#555\n\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.3\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \nid: content\n\n\n        \ncolor:\n \n#222\n\n\n        \nanchors.left:\n \nmenu\n.\nright\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\nUsing anchors you can define the position and size of elements relative to each other; see \nanchoring\n.\n\n\n\n\nIf you now refresh Pegasus, you'll now see that the screen has been divided between the two shades of gray. You can also see the width of the left panel changing automatically when you resize the application's window.\n\n\nLeft panel\n\n\nLt's continue with the menu panel, as this will be the more complex part of the theme.\n\n\nI'd like to add a 50px padding around the contents of the left panel. But the players have all kinds of screens and devices, with larger or smaller resolutions -- how can I define it in a resolution-independent way?\n\n\nYou can define values using percentages, like we did with the width earlier, but for cases where more precision is desired, the \nvpx\n function might be of use. These virtual pixel values will automatically scale up or down depending on the screen resolution: a \nvpx(60)\n value will turn into 60px on a 720p screen, 90 real pixels on 1080p and 40 on 480p, while keeping the aspect ratio. Combining them with anchors and regular percentages, you can define and position elements in a quite detailed way.\n\n\nSo, I want to add a 50px padding for the items -- and by this, I mean a padding that will be 50px on a screen with 1280x720 resolution, and scale up or down for other sizes. For later use, I'll store the amount of the remaining \"content width\" in a property:\n\n\nRectangle\n \n{\n\n    \nid: menu\n\n\n\n    \nproperty\n \nreal\n \ncontentWidth:\n \nwidth\n \n-\n \nvpx\n(\n100\n)\n\n\n\n    \ncolor:\n \n#555\n\n\n    \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.3\n\n    \nanchors.top:\n \nparent\n.\ntop\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n}\n\n\n\n\n\n\nCollection logo\n\n\nLets's add the collection's logo to the panel. First of all you'll need a bunch of game system logo images. I've borrowed them from EmulationStation (original: Nils Bonenberger, CC-BY-NC-SA), except the RetroPie logo (original: Florian M\u00fcller, CC-BY-NC-SA). You can get them \nhere\n. The file names match the system names from EmulationStation. Simply create a new directory inside your theme's folder, eg. \nassets\n, and extract them there.\n\n\nAfter that, I add an Image element inside the \nmenu\n Rectangle:\n\n\nRectangle\n \n{\n\n    \nid: menu\n\n\n    \nproperty\n \nreal\n \ncontentWidth:\n \nwidth\n \n-\n \nvpx\n(\n100\n)\n\n\n    \ncolor:\n \n#555\n\n\n    \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.3\n\n    \nanchors.top:\n \nparent\n.\ntop\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \nImage\n \n{\n\n        \nid: collectionLogo\n\n\n        \nwidth:\n \nparent\n.\ncontentWidth\n\n        \nheight:\n \nvpx\n(\n60\n)\n\n\n        \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n        \nsource:\n \nassets/\n \n+\n \napi\n.\ncurrentCollection\n.\ntag\n \n+\n \n.svg\n\n        \nasynchronous:\n \ntrue\n\n\n        \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.topMargin:\n \nvpx\n(\n50\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSome interesting things here:\n\n\n\n\napi\n is a globally accessible object through which you can access every game and collection data. Its contents are described on the \nAPI reference\n page.\n\n\nsource\n is the concatenation of three strings, \ntag\n being the unique identifier for a collection (eg. \nnes\n, \ngba\n, ...).\n\n\nasynchronous\n will load the image in the background. By default (\nfalse\n), the program will wait until the Image is fully loaded, but during this time it cannot respond to user input. Since images may take a long time to load depending on the device, asynchronous loading is preferred in most cases.\n\n\n\n\nChanging collections\n\n\nPressing left or right feels kind of natural to use for selecting the next/previous collection. The CollectionList item of the API provides the functions called \nincrementIndex()\n and \ndecrementIndex()\n, which we call for this.\n\n\nI'll handle of the \nLeft\n and \nRight\n keys the top of the whole FocusScope, and simply call these two functions:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n\n    \nKeys.onLeftPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n\n    \nKeys.onRightPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAfter a refresh, pressing \nLeft\n and \nRight\n should now change the logo on the screen. Yay!\n\n\n\n\nNote\n\n\nAssuming you have more than one collection, of course.\n\n\n\n\n\n\nTip\n\n\nHandling keyboard keys also enables gamepad navigation. See the \ncontrols\n page about how keys and buttons are related.\n\n\n\n\nGame list\n\n\nThis is going to be actually the most complex piece of the theme. The games for the currently selected collection can be accessed via \napi.currentCollection.gameList\n, with \ngameList.model\n being the list of games, \ngameList.current\n the currently selected game (also available as \napi.currentGame\n) and \ngameList.index\n the index of the selected element. The index can be set manually to a number, or changed by the increment/decrement functions, similarly to the collections.\n\n\nReturning to the \nmenu\n Rectangle, I add a ListView after the logo, first setting just the dimensions:\n\n\nRectangle\n \n{\n\n    \nid: menu\n\n\n    \n// ...\n\n\n    \nImage\n \n{\n \n/* ... */\n \n}\n\n\n\n    \nListView\n \n{\n\n        \nid: gameView\n\n\n        \nwidth:\n \nparent\n.\ncontentWidth\n\n        \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n        \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n        \nanchors.margins:\n \nvpx\n(\n50\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nNow to actually see something, ListView needs a Model: a list of items, and a Delegate: the definition of how one item should look like on the screen.\n\n\nOur model will be the games of the currently selected collection, and for every game, the visual representation will be a text item:\n\n\nListView\n \n{\n\n    \nid: gameView\n\n\n    \nmodel:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\nmodel\n\n    \ndelegate:\n \nText\n \n{\n\n        \ntext:\n \nmodelData\n.\ntitle\n\n    \n}\n\n\n    \n// anchors, etc.\n\n\n}\n\n\n\n\n\n\nYou should now see the list of games, changing with the selected collection on pressing \nLeft\n/\nRight\n.\n\n\n\n\nNote\n\n\ngameList.model\n is a list of Game objects. \nmodelData\n in the delegate will be one Game object of the Model.\n\n\n\n\nI'll do two quick reorganization in the code:\n\n\n\n\ntyping \napi.currentCollection.gameList.\nsomething\n every time is a bit long, so I create a property as a shortcut\n\n\nI move the Delegate definition to a separate object to make the code cleaner\n\n\n\n\nRectangle\n \n{\n\n    \nid: menu\n\n\n    \n// ...\n\n\n    \nImage\n \n{\n \n/* ... */\n \n}\n\n\n\n    \nListView\n \n{\n\n        \nid: gameView\n\n\n\n        \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n\n        \nmodel:\n \ngameList\n.\nmodel\n\n\n        \ndelegate:\n \ngameViewDelegate\n\n\n\n        \nwidth:\n \nparent\n.\ncontentWidth\n\n        \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n        \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n        \nanchors.margins:\n \nvpx\n(\n50\n)\n\n    \n}\n\n\n    \nComponent\n \n{\n\n\n        \nid: gameViewDelegate\n\n\n\n        \nText\n \n{\n\n            \ntext:\n \nmodelData\n.\ntitle\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nTip\n\n\nComponent is a special element that defines a QML document. Just as QML files can have only one root element, Components can have only one child. You could actually move the \nText\n to a separate file (eg. \nGameListItem.qml\n) and use the file's name to set the delegate (eg. \ndelegate: GameListItem { }\n).\n\n\n\n\nLet's continue with tweaking the menu items:\n\n\nComponent\n \n{\n\n    \nid: gameViewDelegate\n\n\n    \nText\n \n{\n\n        \ntext:\n \nmodelData\n.\ntitle\n\n\n        \n// white, 20px, condensed font\n\n        \ncolor:\n \nwhite\n\n        \nfont.family:\n \nglobalFonts\n.\ncondensed\n\n        \nfont.pixelSize:\n \nvpx\n(\n20\n)\n\n\n        \n// the size of the whole text box,\n\n        \n// a bit taller than the text size for a nice padding\n\n        \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n36\n)\n\n        \n// align the text vertically in the middle of the text area\n\n        \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n        \n// if the text is too long, end it with ellipsis (three dots)\n\n        \nelide:\n \nText\n.\nElideRight\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThis is how it should look like:\n\n\n\n\nTo see which one of the menu items is the selected one, I'll change its color and make it bigger and bold:\n\n\nComponent\n \n{\n\n    \nid: gameViewDelegate\n\n\n    \nText\n \n{\n\n        \ntext:\n \nmodelData\n.\ntitle\n\n\n        \n// orange if this item is the currently selected one, white otherwise\n\n\n        \ncolor:\n \nListView\n.\nisCurrentItem\n \n?\n \norange\n \n:\n \nwhite\n\n\n        \nfont.family:\n \nglobalFonts\n.\ncondensed\n\n        \n// bigger if selected\n\n\n        \nfont.pixelSize:\n \nListView\n.\nisCurrentItem\n \n?\n \nvpx\n(\n24\n)\n \n:\n \nvpx\n(\n20\n)\n\n\n        \n// bold if selected (hint: isCurrentItem is already a true/false value)\n\n\n        \nfont.bold:\n \nListView\n.\nisCurrentItem\n\n\n\n        \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n36\n)\n\n        \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n        \nelide:\n \nText\n.\nElideRight\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\nWhen setting values, the \nX ? A : B\n form is called \"inline-if\": if the condition \nX\n is true, \nA\n will be used, otherwise \nB\n. In our case, it would equal to the following JavaScript code:\n\n\nif\n \n(\nListView\n.\nisCurrentItem\n)\n\n    \nreturn\n \norange\n\n\nelse\n\n    \nreturn\n \nwhite\n\n\n\n\n\n\n(which you can also use, if you wish).\n\n\n\n\nGame selection\n\n\nYou should now see one item being highlighted on the list. Now, to make the game selection work, we have to do two thing:\n\n\n\n\nmake the ListView's index track the current game list's index\n\n\nchange the game list index on pressing \nUp\n or \nDown\n\n\n\n\nTo update the list when the index in the API changes, bind \ngameList.index\n to the ListView's \ncurrentIndex\n:\n\n\nListView\n \n{\n\n    \nid: gameView\n\n\n    \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n    \nmodel:\n \ngameList\n.\nmodel\n\n    \ndelegate:\n \ngameViewDelegate\n\n\n    \ncurrentItem:\n \ngameList\n.\nindex\n\n\n\n    \nwidth:\n \nparent\n.\ncontentWidth\n\n    \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n    \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \nanchors.margins:\n \nvpx\n(\n50\n)\n\n\n}\n\n\n\n\n\n\nWhile for the user input, call the index increment/decrement function of the current game list, like we did with the collection changing. At the top of our file:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nKeys.onLeftPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onRightPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n\n    \nKeys.onUpPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\ndecrementIndexNoWrap\n()\n\n\n    \nKeys.onDownPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\nincrementIndexNoWrap\n()\n\n\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nTip\n\n\nThere's a wrapping and a non-wrapping variant of the index changing functions. Use whichever is maching for your themes.\n\n\n\n\n\n\nNote\n\n\nOf course, you can put the key handling somewhere else, I've merely found it convenient there. Just make sure the item in which you put it has the active focus (eg. has \nfocus: true\n).\n\n\n\n\nThe list should now scroll around with a visible highlight for the current selection.\n\n\nLaunching games\n\n\nThe last feature required to make our theme functional is launching games. Game objects from the API have a \nlaunch()\n command you can call -- in the most common case, all you need to do is calling \napi.currentGame.launch()\n.\n\n\nSimply call it on \nEnter\n:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nKeys.onLeftPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onRightPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onUpPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\ndecrementIndexNoWrap\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\nincrementIndexNoWrap\n()\n\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\nTechnically the \nEnter\n next to the letter keys is called \"Return\", and the one on the numeric pad is \"Enter\". Careful not to mix them up.\n\n\n\n\nAnd with this, we have a functional theme!\n\n\nTweaks\n\n\nSome additional (and optional) graphical tweaks to try out for extra fancyness.\n\n\nClipping\n\n\nWhile scrolling, you might have noticed that items at the top and the bottom of the list seem to go out of the bounds of the ListView's area. Delegates are fully drawn on the screen if they are at least partially visible; to make sure nothing shows up outside the ListView's area, you can use the \nclip\n property:\n\n\nListView\n \n{\n\n    \nid: gameView\n\n\n    \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n    \nmodel:\n \ngameList\n.\nmodel\n\n    \ndelegate:\n \ngameViewDelegate\n\n    \ncurrentItem:\n \ngameList\n.\nindex\n\n\n    \nwidth:\n \nparent\n.\ncontentWidth\n\n    \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n    \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \nanchors.margins:\n \nvpx\n(\n50\n)\n\n\n\n    \nclip:\n \ntrue\n\n\n}\n\n\n\n\n\n\nNow the ListView will cut the drawing at its borders.\n\n\nCentering the current item\n\n\nIt'd be nice if the currently selected item would try to stay in the middle of the list:\n\n\n\n\n\nWe can set this by defining the \"highlight range\"; the ListView will then try to scroll the list so the currently selected item falls into this range.\n\n\nThe highlight range is defined by the start and end position. For our vertical ListView, these are the distances from the top edge of the item, in pixels. We can get the vertical center of the ListView simply as \nheight / 2\n, and the height of one Text item was set to 36px previously. To position it exactly in the middle, I'll set the start of the range 18px above the center, and end it 18px below.\n\n\nListView\n \n{\n\n    \nid: gameView\n\n\n    \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n    \nmodel:\n \ngameList\n.\nmodel\n\n    \ndelegate:\n \ngameViewDelegate\n\n    \ncurrentItem:\n \ngameList\n.\nindex\n\n\n\n    \nhighlightRangeMode:\n \nListView\n.\nApplyRange\n\n\n    \npreferredHighlightBegin:\n \nheight\n \n*\n \n0.5\n \n-\n \nvpx\n(\n18\n)\n\n\n    \npreferredHighlightEnd:\n \nheight\n \n*\n \n0.5\n \n+\n \nvpx\n(\n18\n)\n\n\n\n    \nwidth:\n \nparent\n.\ncontentWidth\n\n    \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n    \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \nanchors.margins:\n \nvpx\n(\n50\n)\n\n\n    \nclip:\n \ntrue\n\n\n}\n\n\n\n\n\n\nwhich should give the desired result.\n\n\nHowever, when you change the collection, there is a few seconds of scrolling to the index of the newly selected game list. To disable this, and jump to the selected item instantly, set animation duration to zero:\n\n\nListView\n \n{\n\n    \nid: gameView\n\n\n    \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n    \nmodel:\n \ngameList\n.\nmodel\n\n    \ndelegate:\n \ngameViewDelegate\n\n    \ncurrentItem:\n \ngameList\n.\nindex\n\n\n    \nhighlightRangeMode:\n \nListView\n.\nApplyRange\n\n\n    \nhighlightMoveDuration:\n \n0\n\n\n    \npreferredHighlightBegin:\n \nheight\n \n*\n \n0.5\n \n-\n \nvpx\n(\n18\n)\n\n    \npreferredHighlightEnd:\n \nheight\n \n*\n \n0.5\n \n+\n \nvpx\n(\n18\n)\n\n\n    \nwidth:\n \nparent\n.\ncontentWidth\n\n    \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n    \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \nanchors.margins:\n \nvpx\n(\n50\n)\n\n\n    \nclip:\n \ntrue\n\n\n}\n\n\n\n\n\n\nGame information\n\n\nWith the game selection menu done, let's continue with the right side of the theme, the game informations. Metadata and assets of the currently selected game will be shown here; unlike the dynamic menu, these will be simple Text and Image objects, with their content coming from the API. We'll show the following information, in order:\n\n\n\n\nbox art\n\n\ngame title\n\n\ndeveloper and release year (in one row)\n\n\ngame description\n\n\n\n\n\n\nBox art\n\n\nAdd an Image object to the right side panel, with its source set to the current game's box art asset. The image will take the upper half of the screen, with a 50px padding around. As the box arts of different games may have different shapes (portrait, landscape, extra wide, etc.), it might be useful to define the maximum area an image may take up, and fit them in this area.\n\n\nRectangle\n \n{\n\n    \nid: content\n\n\n    \ncolor:\n \n#222\n\n\n    \nanchors.left:\n \nmenu\n.\nright\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nparent\n.\ntop\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n\n    \nImage\n \n{\n\n        \nid: cover\n\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.margins:\n \nvpx\n(\n50\n)\n\n        \nanchors.bottom:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottomMargin:\n \n0\n\n\n        \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignRight\n\n\n        \nsource:\n \napi\n.\ncurrentGame\n.\nassets\n.\nboxFront\n\n        \nsourceSize\n \n{\n \nwidth:\n \n1024\n;\n \nheight:\n \n1024\n \n}\n\n        \nasynchronous:\n \ntrue\n\n    \n}\n\n\n}\n\n\n\n\n\n\nBox art images might be quite big in resolution, so this time I've also set \nsourceSize\n: it limits the maximum amount of memory the image will take up. If the image is largen than this, it will be scaled down, keeping the aspect ratio. In this particular case, I've set it to scale down to 1024 \n 1024 pixels (taking up about/at most 1024 \n 1024 \n 3 bytes = 3 MiB space in the memory).\n\n\n\n\nColumn and Row\n\n\nThe QML Column and Row object are great tools for aligning a fixed number of elements. In this case, the box art and the further Text items could be put into a Column that would \nanchors.fill\n its parent with a 50px \nanchors.margin\n, so I wouldn't have to define it for the Image itself and the other Texts.\n\n\nSo why I didn't use it? Column and Row works the best when the spacing between the elements is the same, but in this theme, I'd like to set some custom spacing between the elements later.\n\n\nAn alternative would be to put the elements into an Item. Perhaps you might want to try it as a practice?\n\n\n\n\nTitle\n\n\nThe rest of the game informations will be simple Text objects. The only thing that needs more attention is that the texts may be too long to fit on the screen, so we'll define a text area (similarly to the box art), and hide what doesn't fit into them.\n\n\nSo, for the title:\n\n\nRectangle\n \n{\n\n    \nid: content\n\n\n    \n// ...\n\n\n    \nImage\n \n{\n \n/* ... */\n \n}\n\n\n\n    \nText\n \n{\n\n        \nid: title\n\n\n        \ntext:\n \napi\n.\ncurrentGame\n.\ntitle\n\n        \n// white, big bold sans-serif font\n\n        \ncolor:\n \nwhite\n\n        \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \nfont.pixelSize:\n \nvpx\n(\n42\n)\n\n        \nfont.bold:\n \ntrue\n\n\n        \nhorizontalAlignment:\n \nText\n.\nAlignRight\n\n        \n// if it\ns too long, end it with an ellipsis\n\n        \nelide:\n \nText\n.\nElideRight\n\n\n        \n// 40px below the box art\n\n        \nanchors.top:\n \ncover\n.\nbottom\n\n        \nanchors.topMargin:\n \nvpx\n(\n40\n)\n\n        \n// left and right edges same as the image\n\n        \nanchors.left:\n \ncover\n.\nleft\n\n        \nanchors.right:\n \ncover\n.\nright\n\n    \n}\n\n\n}\n\n\n\n\n\n\nDeveloper and release\n\n\nI'll put two Text items in a Row, and move the Row under the title. I didn't bother wth a maximum text width here, as company names tend to be not too long, while the release year should be just four numbers.\n\n\nThe code:\n\n\nRectangle\n \n{\n\n    \nid: content\n\n\n    \n// ...\n\n\n    \nRow\n \n{\n\n        \nid: shortInfo\n\n\n        \nanchors.top:\n \ntitle\n.\nbottom\n\n        \nanchors.right:\n \ntitle\n.\nright\n\n\n        \nspacing:\n \nvpx\n(\n10\n)\n\n\n\n        \nText\n \n{\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\ndeveloper\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \n}\n\n\n        \nText\n \n{\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\nyear\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n            \nvisible:\n \napi\n.\ncurrentGame\n.\nyear\n \n \n0\n \n// !!\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nNote that I only show the year when it's greater than 0. If we have no information about when the game was released, \nGame\n.year\n will be 0, which looks silly on the screen.\n\n\nDescription\n\n\nA multiline text area. If the game has a short summar, it'll show that, otherwise the detailed description (or stay empty if none is available).\n\n\nRectangle\n \n{\n\n    \nid: content\n\n\n    \n// ...\n\n\n    \nText\n \n{\n\n        \nid: description\n\n\n        \ntext:\n \napi\n.\ncurrentGame\n.\nsummary\n \n||\n \napi\n.\ncurrentGame\n.\ndescription\n\n        \ncolor:\n \nwhite\n\n        \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n        \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n        \nwrapMode:\n \nText\n.\nWordWrap\n\n        \nhorizontalAlignment:\n \nText\n.\nAlignRight\n\n        \nelide:\n \nText\n.\nElideRight\n\n\n        \nanchors.top:\n \nshortInfo\n.\nbottom\n\n        \nanchors.topMargin:\n \nvpx\n(\n40\n)\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n        \nanchors.bottomMargin:\n \nvpx\n(\n50\n)\n\n        \nanchors.left:\n \ncover\n.\nleft\n\n        \nanchors.right:\n \ncover\n.\nright\n\n    \n}\n\n\n}\n\n\n\n\n\n\nConclusion\n\n\nWith all these changes, our theme is now complete and should look like this:\n\n\n\n\nSure, perhaps not the most attractive yet, but I hope it helped learning theme creation. Feel free to tweak it to you liking, or make a new one based on it. Have fun!\n\n\nFull code\nHere is the full code, as one file. In real projects though, you might prefer to split your theme into multiple files.\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nKeys.onLeftPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onRightPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onUpPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\ndecrementIndexNoWrap\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncurrentCollection\n.\ngameList\n.\nincrementIndexNoWrap\n()\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n    \nRectangle\n \n{\n\n        \nid: menu\n\n\n        \nproperty\n \nreal\n \ncontentWidth:\n \nwidth\n \n-\n \nvpx\n(\n100\n)\n\n\n        \ncolor:\n \n#555\n\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.3\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nImage\n \n{\n\n            \nid: collectionLogo\n\n\n            \nwidth:\n \nparent\n.\ncontentWidth\n\n            \nheight:\n \nvpx\n(\n60\n)\n\n\n            \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n            \nsource:\n \nassets/\n \n+\n \napi\n.\ncurrentCollection\n.\ntag\n \n+\n \n.svg\n\n            \nasynchronous:\n \ntrue\n\n\n            \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n            \nanchors.top:\n \nparent\n.\ntop\n\n            \nanchors.topMargin:\n \nvpx\n(\n50\n)\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameView\n\n\n            \nproperty\n \nvar\n \ngameList:\n \napi\n.\ncurrentCollection\n.\ngameList\n\n\n            \nmodel:\n \ngameList\n.\nmodel\n\n            \ndelegate:\n \ngameViewDelegate\n\n            \ncurrentIndex:\n \ngameList\n.\nindex\n\n\n            \nhighlightRangeMode:\n \nListView\n.\nApplyRange\n\n            \nhighlightMoveDuration:\n \n0\n\n            \npreferredHighlightBegin:\n \nheight\n \n*\n \n0.5\n \n-\n \nvpx\n(\n18\n)\n\n            \npreferredHighlightEnd:\n \nheight\n \n*\n \n0.5\n \n+\n \nvpx\n(\n18\n)\n\n\n            \nwidth:\n \nparent\n.\ncontentWidth\n\n            \nanchors.horizontalCenter:\n \nparent\n.\nhorizontalCenter\n\n            \nanchors.top:\n \ncollectionLogo\n.\nbottom\n\n            \nanchors.bottom:\n \nparent\n.\nbottom\n\n            \nanchors.margins:\n \nvpx\n(\n50\n)\n\n\n            \nclip:\n \ntrue\n\n        \n}\n\n\n        \nComponent\n \n{\n\n            \nid: gameViewDelegate\n\n\n            \nText\n \n{\n\n                \ntext:\n \nmodelData\n.\ntitle\n\n\n                \ncolor:\n \nListView\n.\nisCurrentItem\n \n?\n \norange\n \n:\n \nwhite\n\n                \nfont.family:\n \nglobalFonts\n.\ncondensed\n\n                \nfont.pixelSize:\n \nListView\n.\nisCurrentItem\n \n?\n \nvpx\n(\n24\n)\n \n:\n \nvpx\n(\n20\n)\n\n                \nfont.bold:\n \nListView\n.\nisCurrentItem\n\n\n                \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n                \nheight:\n \nvpx\n(\n36\n)\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n                \nelide:\n \nText\n.\nElideRight\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \nid: content\n\n\n        \ncolor:\n \n#222\n\n\n        \nanchors.left:\n \nmenu\n.\nright\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nImage\n \n{\n\n            \nid: cover\n\n\n            \nanchors.top:\n \nparent\n.\ntop\n\n            \nanchors.right:\n \nparent\n.\nright\n\n            \nanchors.left:\n \nparent\n.\nleft\n\n            \nanchors.margins:\n \nvpx\n(\n50\n)\n\n            \nanchors.bottom:\n \nparent\n.\nverticalCenter\n\n            \nanchors.bottomMargin:\n \n0\n\n\n            \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n            \nhorizontalAlignment:\n \nImage\n.\nAlignRight\n\n\n            \nsource:\n \napi\n.\ncurrentGame\n.\nassets\n.\nboxFront\n\n            \nsourceSize\n \n{\n \nwidth:\n \n1024\n;\n \nheight:\n \n1024\n \n}\n\n            \nasynchronous:\n \ntrue\n\n        \n}\n\n\n        \nText\n \n{\n\n            \nid: title\n\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\ntitle\n\n            \ncolor:\n \nwhite\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n            \nfont.pixelSize:\n \nvpx\n(\n42\n)\n\n            \nfont.bold:\n \ntrue\n\n\n            \nhorizontalAlignment:\n \nText\n.\nAlignRight\n\n            \nelide:\n \nText\n.\nElideRight\n\n\n            \nanchors.top:\n \ncover\n.\nbottom\n\n            \nanchors.topMargin:\n \nvpx\n(\n40\n)\n\n            \nanchors.left:\n \ncover\n.\nleft\n\n            \nanchors.right:\n \ncover\n.\nright\n\n        \n}\n\n\n        \nRow\n \n{\n\n            \nid: shortInfo\n\n\n            \nanchors.top:\n \ntitle\n.\nbottom\n\n            \nanchors.right:\n \ntitle\n.\nright\n\n\n            \nspacing:\n \nvpx\n(\n10\n)\n\n\n            \nText\n \n{\n\n                \ntext:\n \napi\n.\ncurrentGame\n.\ndeveloper\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n            \n}\n\n\n            \nText\n \n{\n\n                \ntext:\n \napi\n.\ncurrentGame\n.\nyear\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n                \nvisible:\n \napi\n.\ncurrentGame\n.\nyear\n \n \n0\n\n            \n}\n\n        \n}\n\n\n        \nText\n \n{\n\n            \nid: description\n\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\nsummary\n \n||\n \napi\n.\ncurrentGame\n.\ndescription\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n            \nwrapMode:\n \nText\n.\nWordWrap\n\n            \nhorizontalAlignment:\n \nText\n.\nAlignRight\n\n            \nelide:\n \nText\n.\nElideRight\n\n\n            \nanchors.top:\n \nshortInfo\n.\nbottom\n\n            \nanchors.topMargin:\n \nvpx\n(\n40\n)\n\n            \nanchors.bottom:\n \nparent\n.\nbottom\n\n            \nanchors.bottomMargin:\n \nvpx\n(\n50\n)\n\n            \nanchors.left:\n \ncover\n.\nleft\n\n            \nanchors.right:\n \ncover\n.\nright\n\n        \n}\n\n    \n}\n\n\n}", 
            "title": "Example -- Simple theme"
        }, 
        {
            "location": "/themes/example-simple/#step-by-step-simple-theme", 
            "text": "In this tutorial, I'll show the theme creation in practice by implementing the theme above from scratch. Before we start, you might want to be familiar with the QML basics and dynamic layout elements (see the  QML tutorials ).  The theme has the list of games on the left, in a scrollable menu, with the collection's logo above it. Then some basic information is shown on the right, like title, developer, release year, description, and also a box art.  Let's get started!", 
            "title": "Step by step: Simple theme"
        }, 
        {
            "location": "/themes/example-simple/#initial-files", 
            "text": "I'm on Linux, so my  theme directory  is at  ~/.config/pegasus-frontend/themes . I'm creating a new directory called  tutorial-simple , and in it my  theme.cfg , like this:  name :  Simple theme  author :  M\u00e1ty\u00e1s Mustoha   and the basic  theme.qml :  import   QtQuick   2.0  FocusScope   {  }   Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the  F5  key after changes. I also open the main log file  ~/.config/pegasus-frontend/lastrun.log  which will tell me if I've made any errors in the QML file.   Tip  You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others.    Note  You might see  .qmlc  files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.", 
            "title": "Initial files"
        }, 
        {
            "location": "/themes/example-simple/#base-layout", 
            "text": "The theme consists of a left and right main panel, so I'll start by adding them first. The left menu panel will take 1/3 of the whole screen, and have a lighter gray color. The right panel will be darker and take the rest of the screen.  import   QtQuick   2.0  FocusScope   { \n\n     Rectangle   { \n         id: menu \n\n         color:   #555 \n\n         width:   parent . width   *   0.3 \n         anchors.top:   parent . top \n         anchors.bottom:   parent . bottom \n     } \n\n     Rectangle   { \n         id: content \n\n         color:   #222 \n\n         anchors.left:   menu . right \n         anchors.right:   parent . right \n         anchors.top:   parent . top \n         anchors.bottom:   parent . bottom \n     }  }    Help  Using anchors you can define the position and size of elements relative to each other; see  anchoring .   If you now refresh Pegasus, you'll now see that the screen has been divided between the two shades of gray. You can also see the width of the left panel changing automatically when you resize the application's window.", 
            "title": "Base layout"
        }, 
        {
            "location": "/themes/example-simple/#left-panel", 
            "text": "Lt's continue with the menu panel, as this will be the more complex part of the theme.  I'd like to add a 50px padding around the contents of the left panel. But the players have all kinds of screens and devices, with larger or smaller resolutions -- how can I define it in a resolution-independent way?  You can define values using percentages, like we did with the width earlier, but for cases where more precision is desired, the  vpx  function might be of use. These virtual pixel values will automatically scale up or down depending on the screen resolution: a  vpx(60)  value will turn into 60px on a 720p screen, 90 real pixels on 1080p and 40 on 480p, while keeping the aspect ratio. Combining them with anchors and regular percentages, you can define and position elements in a quite detailed way.  So, I want to add a 50px padding for the items -- and by this, I mean a padding that will be 50px on a screen with 1280x720 resolution, and scale up or down for other sizes. For later use, I'll store the amount of the remaining \"content width\" in a property:  Rectangle   { \n     id: menu       property   real   contentWidth:   width   -   vpx ( 100 )  \n     color:   #555 \n\n     width:   parent . width   *   0.3 \n     anchors.top:   parent . top \n     anchors.bottom:   parent . bottom  }", 
            "title": "Left panel"
        }, 
        {
            "location": "/themes/example-simple/#collection-logo", 
            "text": "Lets's add the collection's logo to the panel. First of all you'll need a bunch of game system logo images. I've borrowed them from EmulationStation (original: Nils Bonenberger, CC-BY-NC-SA), except the RetroPie logo (original: Florian M\u00fcller, CC-BY-NC-SA). You can get them  here . The file names match the system names from EmulationStation. Simply create a new directory inside your theme's folder, eg.  assets , and extract them there.  After that, I add an Image element inside the  menu  Rectangle:  Rectangle   { \n     id: menu \n\n     property   real   contentWidth:   width   -   vpx ( 100 ) \n\n     color:   #555 \n\n     width:   parent . width   *   0.3 \n     anchors.top:   parent . top \n     anchors.bottom:   parent . bottom \n\n     Image   { \n         id: collectionLogo \n\n         width:   parent . contentWidth \n         height:   vpx ( 60 ) \n\n         fillMode:   Image . PreserveAspectFit \n         source:   assets/   +   api . currentCollection . tag   +   .svg \n         asynchronous:   true \n\n         anchors.horizontalCenter:   parent . horizontalCenter \n         anchors.top:   parent . top \n         anchors.topMargin:   vpx ( 50 ) \n     }  }   Some interesting things here:   api  is a globally accessible object through which you can access every game and collection data. Its contents are described on the  API reference  page.  source  is the concatenation of three strings,  tag  being the unique identifier for a collection (eg.  nes ,  gba , ...).  asynchronous  will load the image in the background. By default ( false ), the program will wait until the Image is fully loaded, but during this time it cannot respond to user input. Since images may take a long time to load depending on the device, asynchronous loading is preferred in most cases.", 
            "title": "Collection logo"
        }, 
        {
            "location": "/themes/example-simple/#changing-collections", 
            "text": "Pressing left or right feels kind of natural to use for selecting the next/previous collection. The CollectionList item of the API provides the functions called  incrementIndex()  and  decrementIndex() , which we call for this.  I'll handle of the  Left  and  Right  keys the top of the whole FocusScope, and simply call these two functions:  import   QtQuick   2.0  FocusScope   {       Keys.onLeftPressed:   api . collectionList . decrementIndex ()       Keys.onRightPressed:   api . collectionList . incrementIndex ()  \n\n     Rectangle   { \n         // ... \n     } \n\n     Rectangle   { \n         // ... \n     }  }   After a refresh, pressing  Left  and  Right  should now change the logo on the screen. Yay!   Note  Assuming you have more than one collection, of course.    Tip  Handling keyboard keys also enables gamepad navigation. See the  controls  page about how keys and buttons are related.", 
            "title": "Changing collections"
        }, 
        {
            "location": "/themes/example-simple/#game-list", 
            "text": "This is going to be actually the most complex piece of the theme. The games for the currently selected collection can be accessed via  api.currentCollection.gameList , with  gameList.model  being the list of games,  gameList.current  the currently selected game (also available as  api.currentGame ) and  gameList.index  the index of the selected element. The index can be set manually to a number, or changed by the increment/decrement functions, similarly to the collections.  Returning to the  menu  Rectangle, I add a ListView after the logo, first setting just the dimensions:  Rectangle   { \n     id: menu \n\n     // ... \n\n     Image   {   /* ... */   } \n\n\n     ListView   { \n         id: gameView \n\n         width:   parent . contentWidth \n         anchors.horizontalCenter:   parent . horizontalCenter \n         anchors.top:   collectionLogo . bottom \n         anchors.bottom:   parent . bottom \n         anchors.margins:   vpx ( 50 ) \n     }  }   Now to actually see something, ListView needs a Model: a list of items, and a Delegate: the definition of how one item should look like on the screen.  Our model will be the games of the currently selected collection, and for every game, the visual representation will be a text item:  ListView   { \n     id: gameView \n\n     model:   api . currentCollection . gameList . model \n     delegate:   Text   { \n         text:   modelData . title \n     } \n\n     // anchors, etc.  }   You should now see the list of games, changing with the selected collection on pressing  Left / Right .   Note  gameList.model  is a list of Game objects.  modelData  in the delegate will be one Game object of the Model.   I'll do two quick reorganization in the code:   typing  api.currentCollection.gameList. something  every time is a bit long, so I create a property as a shortcut  I move the Delegate definition to a separate object to make the code cleaner   Rectangle   { \n     id: menu \n\n     // ... \n\n     Image   {   /* ... */   } \n\n\n     ListView   { \n         id: gameView           property   var   gameList:   api . currentCollection . gameList  \n         model:   gameList . model           delegate:   gameViewDelegate  \n         width:   parent . contentWidth \n         anchors.horizontalCenter:   parent . horizontalCenter \n         anchors.top:   collectionLogo . bottom \n         anchors.bottom:   parent . bottom \n         anchors.margins:   vpx ( 50 ) \n     } \n\n     Component   {           id: gameViewDelegate  \n         Text   { \n             text:   modelData . title \n         } \n     }  }    Tip  Component is a special element that defines a QML document. Just as QML files can have only one root element, Components can have only one child. You could actually move the  Text  to a separate file (eg.  GameListItem.qml ) and use the file's name to set the delegate (eg.  delegate: GameListItem { } ).   Let's continue with tweaking the menu items:  Component   { \n     id: gameViewDelegate \n\n     Text   { \n         text:   modelData . title \n\n         // white, 20px, condensed font \n         color:   white \n         font.family:   globalFonts . condensed \n         font.pixelSize:   vpx ( 20 ) \n\n         // the size of the whole text box, \n         // a bit taller than the text size for a nice padding \n         width:   ListView . view . width \n         height:   vpx ( 36 ) \n         // align the text vertically in the middle of the text area \n         verticalAlignment:   Text . AlignVCenter \n         // if the text is too long, end it with ellipsis (three dots) \n         elide:   Text . ElideRight \n     }  }   This is how it should look like:   To see which one of the menu items is the selected one, I'll change its color and make it bigger and bold:  Component   { \n     id: gameViewDelegate \n\n     Text   { \n         text:   modelData . title \n\n         // orange if this item is the currently selected one, white otherwise           color:   ListView . isCurrentItem   ?   orange   :   white           font.family:   globalFonts . condensed \n         // bigger if selected           font.pixelSize:   ListView . isCurrentItem   ?   vpx ( 24 )   :   vpx ( 20 )           // bold if selected (hint: isCurrentItem is already a true/false value)           font.bold:   ListView . isCurrentItem  \n         width:   ListView . view . width \n         height:   vpx ( 36 ) \n         verticalAlignment:   Text . AlignVCenter \n         elide:   Text . ElideRight \n     }  }    Help  When setting values, the  X ? A : B  form is called \"inline-if\": if the condition  X  is true,  A  will be used, otherwise  B . In our case, it would equal to the following JavaScript code:  if   ( ListView . isCurrentItem ) \n     return   orange  else \n     return   white   (which you can also use, if you wish).", 
            "title": "Game list"
        }, 
        {
            "location": "/themes/example-simple/#game-selection", 
            "text": "You should now see one item being highlighted on the list. Now, to make the game selection work, we have to do two thing:   make the ListView's index track the current game list's index  change the game list index on pressing  Up  or  Down   To update the list when the index in the API changes, bind  gameList.index  to the ListView's  currentIndex :  ListView   { \n     id: gameView \n\n     property   var   gameList:   api . currentCollection . gameList \n\n     model:   gameList . model \n     delegate:   gameViewDelegate       currentItem:   gameList . index  \n     width:   parent . contentWidth \n     anchors.horizontalCenter:   parent . horizontalCenter \n     anchors.top:   collectionLogo . bottom \n     anchors.bottom:   parent . bottom \n     anchors.margins:   vpx ( 50 )  }   While for the user input, call the index increment/decrement function of the current game list, like we did with the collection changing. At the top of our file:  import   QtQuick   2.0  FocusScope   { \n\n     Keys.onLeftPressed:   api . collectionList . decrementIndex () \n     Keys.onRightPressed:   api . collectionList . incrementIndex ()       Keys.onUpPressed:   api . currentCollection . gameList . decrementIndexNoWrap ()       Keys.onDownPressed:   api . currentCollection . gameList . incrementIndexNoWrap ()  \n\n     Rectangle   { \n         // ... \n     } \n\n     Rectangle   { \n         // ... \n     }  }    Tip  There's a wrapping and a non-wrapping variant of the index changing functions. Use whichever is maching for your themes.    Note  Of course, you can put the key handling somewhere else, I've merely found it convenient there. Just make sure the item in which you put it has the active focus (eg. has  focus: true ).   The list should now scroll around with a visible highlight for the current selection.", 
            "title": "Game selection"
        }, 
        {
            "location": "/themes/example-simple/#launching-games", 
            "text": "The last feature required to make our theme functional is launching games. Game objects from the API have a  launch()  command you can call -- in the most common case, all you need to do is calling  api.currentGame.launch() .  Simply call it on  Enter :  import   QtQuick   2.0  FocusScope   { \n\n     Keys.onLeftPressed:   api . collectionList . decrementIndex () \n     Keys.onRightPressed:   api . collectionList . incrementIndex () \n     Keys.onUpPressed:   api . currentCollection . gameList . decrementIndexNoWrap () \n     Keys.onDownPressed:   api . currentCollection . gameList . incrementIndexNoWrap ()       Keys.onReturnPressed:   api . currentGame . launch ()  \n\n     Rectangle   { \n         // ... \n     } \n\n     Rectangle   { \n         // ... \n     }  }    Help  Technically the  Enter  next to the letter keys is called \"Return\", and the one on the numeric pad is \"Enter\". Careful not to mix them up.   And with this, we have a functional theme!", 
            "title": "Launching games"
        }, 
        {
            "location": "/themes/example-simple/#tweaks", 
            "text": "Some additional (and optional) graphical tweaks to try out for extra fancyness.", 
            "title": "Tweaks"
        }, 
        {
            "location": "/themes/example-simple/#clipping", 
            "text": "While scrolling, you might have noticed that items at the top and the bottom of the list seem to go out of the bounds of the ListView's area. Delegates are fully drawn on the screen if they are at least partially visible; to make sure nothing shows up outside the ListView's area, you can use the  clip  property:  ListView   { \n     id: gameView \n\n     property   var   gameList:   api . currentCollection . gameList \n\n     model:   gameList . model \n     delegate:   gameViewDelegate \n     currentItem:   gameList . index \n\n     width:   parent . contentWidth \n     anchors.horizontalCenter:   parent . horizontalCenter \n     anchors.top:   collectionLogo . bottom \n     anchors.bottom:   parent . bottom \n     anchors.margins:   vpx ( 50 )       clip:   true  }   Now the ListView will cut the drawing at its borders.", 
            "title": "Clipping"
        }, 
        {
            "location": "/themes/example-simple/#centering-the-current-item", 
            "text": "It'd be nice if the currently selected item would try to stay in the middle of the list:   We can set this by defining the \"highlight range\"; the ListView will then try to scroll the list so the currently selected item falls into this range.  The highlight range is defined by the start and end position. For our vertical ListView, these are the distances from the top edge of the item, in pixels. We can get the vertical center of the ListView simply as  height / 2 , and the height of one Text item was set to 36px previously. To position it exactly in the middle, I'll set the start of the range 18px above the center, and end it 18px below.  ListView   { \n     id: gameView \n\n     property   var   gameList:   api . currentCollection . gameList \n\n     model:   gameList . model \n     delegate:   gameViewDelegate \n     currentItem:   gameList . index       highlightRangeMode:   ListView . ApplyRange       preferredHighlightBegin:   height   *   0.5   -   vpx ( 18 )       preferredHighlightEnd:   height   *   0.5   +   vpx ( 18 )  \n     width:   parent . contentWidth \n     anchors.horizontalCenter:   parent . horizontalCenter \n     anchors.top:   collectionLogo . bottom \n     anchors.bottom:   parent . bottom \n     anchors.margins:   vpx ( 50 ) \n\n     clip:   true  }   which should give the desired result.  However, when you change the collection, there is a few seconds of scrolling to the index of the newly selected game list. To disable this, and jump to the selected item instantly, set animation duration to zero:  ListView   { \n     id: gameView \n\n     property   var   gameList:   api . currentCollection . gameList \n\n     model:   gameList . model \n     delegate:   gameViewDelegate \n     currentItem:   gameList . index \n\n     highlightRangeMode:   ListView . ApplyRange       highlightMoveDuration:   0       preferredHighlightBegin:   height   *   0.5   -   vpx ( 18 ) \n     preferredHighlightEnd:   height   *   0.5   +   vpx ( 18 ) \n\n     width:   parent . contentWidth \n     anchors.horizontalCenter:   parent . horizontalCenter \n     anchors.top:   collectionLogo . bottom \n     anchors.bottom:   parent . bottom \n     anchors.margins:   vpx ( 50 ) \n\n     clip:   true  }", 
            "title": "Centering the current item"
        }, 
        {
            "location": "/themes/example-simple/#game-information", 
            "text": "With the game selection menu done, let's continue with the right side of the theme, the game informations. Metadata and assets of the currently selected game will be shown here; unlike the dynamic menu, these will be simple Text and Image objects, with their content coming from the API. We'll show the following information, in order:   box art  game title  developer and release year (in one row)  game description", 
            "title": "Game information"
        }, 
        {
            "location": "/themes/example-simple/#box-art", 
            "text": "Add an Image object to the right side panel, with its source set to the current game's box art asset. The image will take the upper half of the screen, with a 50px padding around. As the box arts of different games may have different shapes (portrait, landscape, extra wide, etc.), it might be useful to define the maximum area an image may take up, and fit them in this area.  Rectangle   { \n     id: content \n\n     color:   #222 \n\n     anchors.left:   menu . right \n     anchors.right:   parent . right \n     anchors.top:   parent . top \n     anchors.bottom:   parent . bottom \n\n\n     Image   { \n         id: cover \n\n         anchors.top:   parent . top \n         anchors.right:   parent . right \n         anchors.left:   parent . left \n         anchors.margins:   vpx ( 50 ) \n         anchors.bottom:   parent . verticalCenter \n         anchors.bottomMargin:   0 \n\n         fillMode:   Image . PreserveAspectFit \n         horizontalAlignment:   Image . AlignRight \n\n         source:   api . currentGame . assets . boxFront \n         sourceSize   {   width:   1024 ;   height:   1024   } \n         asynchronous:   true \n     }  }   Box art images might be quite big in resolution, so this time I've also set  sourceSize : it limits the maximum amount of memory the image will take up. If the image is largen than this, it will be scaled down, keeping the aspect ratio. In this particular case, I've set it to scale down to 1024   1024 pixels (taking up about/at most 1024   1024   3 bytes = 3 MiB space in the memory).   Column and Row  The QML Column and Row object are great tools for aligning a fixed number of elements. In this case, the box art and the further Text items could be put into a Column that would  anchors.fill  its parent with a 50px  anchors.margin , so I wouldn't have to define it for the Image itself and the other Texts.  So why I didn't use it? Column and Row works the best when the spacing between the elements is the same, but in this theme, I'd like to set some custom spacing between the elements later.  An alternative would be to put the elements into an Item. Perhaps you might want to try it as a practice?", 
            "title": "Box art"
        }, 
        {
            "location": "/themes/example-simple/#title", 
            "text": "The rest of the game informations will be simple Text objects. The only thing that needs more attention is that the texts may be too long to fit on the screen, so we'll define a text area (similarly to the box art), and hide what doesn't fit into them.  So, for the title:  Rectangle   { \n     id: content \n\n     // ... \n\n     Image   {   /* ... */   } \n\n\n     Text   { \n         id: title \n\n         text:   api . currentGame . title \n         // white, big bold sans-serif font \n         color:   white \n         font.family:   globalFonts . sans \n         font.pixelSize:   vpx ( 42 ) \n         font.bold:   true \n\n         horizontalAlignment:   Text . AlignRight \n         // if it s too long, end it with an ellipsis \n         elide:   Text . ElideRight \n\n         // 40px below the box art \n         anchors.top:   cover . bottom \n         anchors.topMargin:   vpx ( 40 ) \n         // left and right edges same as the image \n         anchors.left:   cover . left \n         anchors.right:   cover . right \n     }  }", 
            "title": "Title"
        }, 
        {
            "location": "/themes/example-simple/#developer-and-release", 
            "text": "I'll put two Text items in a Row, and move the Row under the title. I didn't bother wth a maximum text width here, as company names tend to be not too long, while the release year should be just four numbers.  The code:  Rectangle   { \n     id: content \n\n     // ... \n\n     Row   { \n         id: shortInfo \n\n         anchors.top:   title . bottom \n         anchors.right:   title . right \n\n         spacing:   vpx ( 10 ) \n\n\n         Text   { \n             text:   api . currentGame . developer \n             color:   white \n             font.pixelSize:   vpx ( 18 ) \n             font.family:   globalFonts . sans \n         } \n\n         Text   { \n             text:   api . currentGame . year \n             color:   white \n             font.pixelSize:   vpx ( 18 ) \n             font.family:   globalFonts . sans \n             visible:   api . currentGame . year     0   // !! \n         } \n     }  }   Note that I only show the year when it's greater than 0. If we have no information about when the game was released,  Game .year  will be 0, which looks silly on the screen.", 
            "title": "Developer and release"
        }, 
        {
            "location": "/themes/example-simple/#description", 
            "text": "A multiline text area. If the game has a short summar, it'll show that, otherwise the detailed description (or stay empty if none is available).  Rectangle   { \n     id: content \n\n     // ... \n\n     Text   { \n         id: description \n\n         text:   api . currentGame . summary   ||   api . currentGame . description \n         color:   white \n         font.pixelSize:   vpx ( 18 ) \n         font.family:   globalFonts . sans \n\n         wrapMode:   Text . WordWrap \n         horizontalAlignment:   Text . AlignRight \n         elide:   Text . ElideRight \n\n         anchors.top:   shortInfo . bottom \n         anchors.topMargin:   vpx ( 40 ) \n         anchors.bottom:   parent . bottom \n         anchors.bottomMargin:   vpx ( 50 ) \n         anchors.left:   cover . left \n         anchors.right:   cover . right \n     }  }", 
            "title": "Description"
        }, 
        {
            "location": "/themes/example-simple/#conclusion", 
            "text": "With all these changes, our theme is now complete and should look like this:   Sure, perhaps not the most attractive yet, but I hope it helped learning theme creation. Feel free to tweak it to you liking, or make a new one based on it. Have fun!  Full code Here is the full code, as one file. In real projects though, you might prefer to split your theme into multiple files.   1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169 import   QtQuick   2.0  FocusScope   { \n\n     Keys.onLeftPressed:   api . collectionList . decrementIndex () \n     Keys.onRightPressed:   api . collectionList . incrementIndex () \n     Keys.onUpPressed:   api . currentCollection . gameList . decrementIndexNoWrap () \n     Keys.onDownPressed:   api . currentCollection . gameList . incrementIndexNoWrap () \n     Keys.onReturnPressed:   api . currentGame . launch () \n\n     Rectangle   { \n         id: menu \n\n         property   real   contentWidth:   width   -   vpx ( 100 ) \n\n         color:   #555 \n\n         width:   parent . width   *   0.3 \n         anchors.top:   parent . top \n         anchors.bottom:   parent . bottom \n\n         Image   { \n             id: collectionLogo \n\n             width:   parent . contentWidth \n             height:   vpx ( 60 ) \n\n             fillMode:   Image . PreserveAspectFit \n             source:   assets/   +   api . currentCollection . tag   +   .svg \n             asynchronous:   true \n\n             anchors.horizontalCenter:   parent . horizontalCenter \n             anchors.top:   parent . top \n             anchors.topMargin:   vpx ( 50 ) \n         } \n\n         ListView   { \n             id: gameView \n\n             property   var   gameList:   api . currentCollection . gameList \n\n             model:   gameList . model \n             delegate:   gameViewDelegate \n             currentIndex:   gameList . index \n\n             highlightRangeMode:   ListView . ApplyRange \n             highlightMoveDuration:   0 \n             preferredHighlightBegin:   height   *   0.5   -   vpx ( 18 ) \n             preferredHighlightEnd:   height   *   0.5   +   vpx ( 18 ) \n\n             width:   parent . contentWidth \n             anchors.horizontalCenter:   parent . horizontalCenter \n             anchors.top:   collectionLogo . bottom \n             anchors.bottom:   parent . bottom \n             anchors.margins:   vpx ( 50 ) \n\n             clip:   true \n         } \n\n         Component   { \n             id: gameViewDelegate \n\n             Text   { \n                 text:   modelData . title \n\n                 color:   ListView . isCurrentItem   ?   orange   :   white \n                 font.family:   globalFonts . condensed \n                 font.pixelSize:   ListView . isCurrentItem   ?   vpx ( 24 )   :   vpx ( 20 ) \n                 font.bold:   ListView . isCurrentItem \n\n                 width:   ListView . view . width \n                 height:   vpx ( 36 ) \n                 verticalAlignment:   Text . AlignVCenter \n                 elide:   Text . ElideRight \n             } \n         } \n     } \n\n     Rectangle   { \n         id: content \n\n         color:   #222 \n\n         anchors.left:   menu . right \n         anchors.right:   parent . right \n         anchors.top:   parent . top \n         anchors.bottom:   parent . bottom \n\n         Image   { \n             id: cover \n\n             anchors.top:   parent . top \n             anchors.right:   parent . right \n             anchors.left:   parent . left \n             anchors.margins:   vpx ( 50 ) \n             anchors.bottom:   parent . verticalCenter \n             anchors.bottomMargin:   0 \n\n             fillMode:   Image . PreserveAspectFit \n             horizontalAlignment:   Image . AlignRight \n\n             source:   api . currentGame . assets . boxFront \n             sourceSize   {   width:   1024 ;   height:   1024   } \n             asynchronous:   true \n         } \n\n         Text   { \n             id: title \n\n             text:   api . currentGame . title \n             color:   white \n             font.family:   globalFonts . sans \n             font.pixelSize:   vpx ( 42 ) \n             font.bold:   true \n\n             horizontalAlignment:   Text . AlignRight \n             elide:   Text . ElideRight \n\n             anchors.top:   cover . bottom \n             anchors.topMargin:   vpx ( 40 ) \n             anchors.left:   cover . left \n             anchors.right:   cover . right \n         } \n\n         Row   { \n             id: shortInfo \n\n             anchors.top:   title . bottom \n             anchors.right:   title . right \n\n             spacing:   vpx ( 10 ) \n\n             Text   { \n                 text:   api . currentGame . developer \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n             } \n\n             Text   { \n                 text:   api . currentGame . year \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n                 visible:   api . currentGame . year     0 \n             } \n         } \n\n         Text   { \n             id: description \n\n             text:   api . currentGame . summary   ||   api . currentGame . description \n             color:   white \n             font.pixelSize:   vpx ( 18 ) \n             font.family:   globalFonts . sans \n\n             wrapMode:   Text . WordWrap \n             horizontalAlignment:   Text . AlignRight \n             elide:   Text . ElideRight \n\n             anchors.top:   shortInfo . bottom \n             anchors.topMargin:   vpx ( 40 ) \n             anchors.bottom:   parent . bottom \n             anchors.bottomMargin:   vpx ( 50 ) \n             anchors.left:   cover . left \n             anchors.right:   cover . right \n         } \n     }  }", 
            "title": "Conclusion"
        }, 
        {
            "location": "/themes/example-flixnet/", 
            "text": "Step-by-step: Flixnet theme\n\n\nIn this tutorial, we'll implement the theme above from scratch, inspired by the UI of a certain video streaming company. While the guide is intended to be beginner-friendly, this is a somewhat complex project, so you might want to be familiar with the QML basics and dynamic layout elements (see the \nQML tutorials\n).\n\n\nIf we simplify it a bit, here's how its structure and navigation looks like:\n\n\n\n\n\nAs you can see, there are two main axes of motion:\n\n\n\n\na horizontal \ngame axis\n for each collection's games\n\n\na vertical \ncollection axis\n for selecting a collection\n\n\n\n\nEach row can be individually scrolled, and the currently selected game is the topmost row's first (fully visible) item. Furthermore, the rows themselves can also be scrolled vertically. This kind of layout makes the theme a bit complex, but other than these axes the rest of the theme seems to be simple enough.\n\n\nLet's get started!\n\n\nInitial files\n\n\nI'm on Linux, so my \ntheme directory\n is at \n~/.config/pegasus-frontend/themes\n. I'm creating a new directory called \nflixnet-tutorial\n, and in it my \ntheme.cfg\n, like this:\n\n\nname\n: \nFlixnet tutorial\n\n\nauthor\n: \nM\u00e1ty\u00e1s Mustoha\n\n\n\n\n\n\nand the basic \ntheme.qml\n:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n\n}\n\n\n\n\n\n\nNow I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the \nF5\n key. I also open the main log file \n~/.config/pegasus-frontend/lastrun.log\n which will tell me if I've made any errors in the QML file.\n\n\n\n\nTip\n\n\nYou can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others.\n\n\n\n\n\n\nNote\n\n\nYou might see \n.qmlc\n files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.\n\n\n\n\nInitial layout\n\n\nLet's start with the hard part, the layout on the bottom half. This is a vertically scrollable list of horizontally scrollable lists, each containing boxes for the games. Because collections are what contain the games, I'll first start making the vertical axis that selects the collection, and then add the horizontal game selection after that. I'll write a rough initial structure first, as once you have the basic layout done, you can tweak the elements as much as you want.\n\n\nSome planning\n\n\nThe game selection layout will take the whole lower half of the screen. On a standard 16:9 screen I want to show 2 rows of games to appear, and incrementally more on screens with smaller aspect ratios. Using Pegasus' virtual pixel values, I can design the theme for a screen with at least 720px height, and the values will scale appropriately for other resolutions. Based on that,\n\n\n\n\nif the height of the list is half the screen's height, I'll have 360px at least\n\n\nif I want to show two rows, one row's full height in the list will be 180px\n\n\nI'll use 18px font size for the collection's name\n\n\nto have some space around the text, I'll use 250% line height; that's 45px out of the 180px so far\n\n\nI'm left with 135px height to use for the game boxes\n\n\nthe game boxes will have a 16:9 aspect ratio, so their width will be 240px\n\n\n\n\nOk, let's start coding!\n\n\nVertical axis\n\n\nA simple type for laying out a variable amount of items with one of them being selected is \nListView\n. I set it up so it takes the whole lower half of the screen:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nOne element of this collection axis will have 180px height and the width is the whole width of the screen. I'll create a placeholder for now and add a fake \nmodel\n (a series of numbers) for testing (so you can see that they indeed come in order, and the ListView has the correct amount of items):\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n\n        \nmodel:\n \n10\n \n// just some random number\n\n\n        \ndelegate:\n \nRectangle\n \n{\n\n\n            \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n            \ncolor:\n \nblue\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nIf you now refresh Pegasus, you'll see the lower half of the screen turned blue. Yay!\n\n\n\n\nvpx\n\n\nThe function \nvpx\n is what you can use for virtual pixel values. It scales up or down the pixel value you put into it depending on the actual screen resolution.\n\n\n\n\n\n\ndelegate\n\n\nThe visual element of a list is called \ndelegate\n. For every data item of the \nmodel\n (in this case, for every number between 0 and 9), a delegate will be created.\n\n\n\n\nThe code looks good so far, I'll just make a small change: the delegate will likely get more complex later, so to make it easier to read, I'll move it out into a separate \nComponent\n:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nmodel:\n \n10\n\n\n        \ndelegate:\n \ncollectionAxisDelegate\n\n\n    \n}\n\n\n    \nComponent\n \n{\n\n\n        \nid: collectionAxisDelegate\n\n\n\n        \nRectangle\n \n{\n\n            \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n            \ncolor:\n \nblue\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\n\n\nTip\n\n\nComponent\n is a special element that defines a QML document. Actually, you could even move the \nRectangle\n to a new file (eg. \nCollectionAxisDelegate.qml\n) and use the file's name to set the delegate (eg. \ndelegate:\n \nCollectionAxisDelegate\n \n{\n \n}\n).\n\n\n\n\nHorizontal axis\n\n\nThe rows of the collection axis will consist of two things: a \nText\n label that shows the collection's name and a \nListView\n that shows its games. Because a \nComponent\n can have only one child, I'll turn the \nRectangle\n into an \nItem\n (an otherwise invisible container), and put a \nText\n and a \nListView\n into it.\n\n\n\n\nNote\n\n\nJust as individual QML files can have only one root element, \nComponent\n can have only one child.\n\n\n\n\nFirst I'll add the collection label:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \n// ...\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: collectionAxisDelegate\n\n\n\n        \nItem\n \n{\n\n\n            \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n\n            \nText\n \n{\n\n\n                \nid: label\n\n\n                \n// `modelData` is the item in the list\ns model\n\n                \n// for which this delegate is created for;\n\n                \n// in this case a number between 0-9\n\n                \ntext:\n \nmodelData\n\n\n                \n// white, bold 18px font, using Pegasus\n default font family\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n                \nfont.bold:\n \ntrue\n\n\n                \n// make the line height 45px high\n\n                \n// and center the text vertically in it\n\n                \nheight:\n \nvpx\n(\n45\n)\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nIf you refresh the theme in Pegasus, you'll now see the numbers \"0\" and \"1\" at where we'd expect the labels.\n\n\nI'll now add the horizontal \nListView\n:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n180\n)\n\n\n        \nText\n \n{\n\n            \nid: label\n\n            \n// ...\n\n        \n}\n\n\n\n        \nListView\n \n{\n\n\n            \nid: gameAxis\n\n\n            \n// span from left to right, from the label\ns bottom to the row\ns bottom\n\n            \nanchors.left:\n \nparent\n.\nleft\n\n            \nanchors.right:\n \nparent\n.\nright\n\n            \nanchors.top:\n \nlabel\n.\nbottom\n\n            \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n            \n// this one goes horizontal!\n\n            \norientation:\n \nListView\n.\nHorizontal\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nWe'll need a model and a delegate item to actually see something. Let's create some dummy items:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n    \n// ...\n\n\n    \nComponent\n \n{\n\n        \nid: collectionAxisDelegate\n\n\n        \nItem\n \n{\n\n            \n// ...\n\n\n            \nListView\n \n{\n\n                \nid: gameAxis\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.right:\n \nparent\n.\nright\n\n                \nanchors.top:\n \nlabel\n.\nbottom\n\n                \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n                \norientation:\n \nListView\n.\nHorizontal\n\n\n\n                \nmodel:\n \n20\n\n\n                \ndelegate:\n \ngameAxisDelegate\n\n\n                \nspacing:\n \nvpx\n(\n10\n)\n \n// some spacing to make it look fancy\n\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \n// this is one item of the horizontal axis, ie. a \ngame box\n\n\n    \nComponent\n \n{\n\n\n        \nid: gameAxisDelegate\n\n\n        \nRectangle\n \n{\n\n            \n// as we calculated previously\n\n            \nwidth:\n \nvpx\n(\n240\n)\n\n            \nheight:\n \nvpx\n(\n135\n)\n\n\n            \ncolor:\n \ngreen\n\n\n            \nText\n \n{\n\n                \n// will become a number between 0-19\n\n                \ntext:\n \nmodelData\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nAnd here's how it should look so far:\n\n\n\n\nNot the most beautiful yet, however with this we're done with the basics of the main layout. From now on we'll just have tweak these lists and delegates, then add some simple components for the metadata.\n\n\nThe code so far #1\n\n\nHere's the whole code so far (without comments to save space):\n\n\nThe code so far #1\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nmodel:\n \n10\n\n        \ndelegate:\n \ncollectionAxisDelegate\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: collectionAxisDelegate\n\n\n        \nItem\n \n{\n\n            \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n            \nText\n \n{\n\n                \nid: label\n\n\n                \ntext:\n \nmodelData\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n                \nheight:\n \nvpx\n(\n45\n)\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n            \n}\n\n\n            \nListView\n \n{\n\n                \nid: gameAxis\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.right:\n \nparent\n.\nright\n\n                \nanchors.top:\n \nlabel\n.\nbottom\n\n                \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n                \norientation:\n \nListView\n.\nHorizontal\n\n\n                \nmodel:\n \n20\n\n                \ndelegate:\n \ngameAxisDelegate\n\n                \nspacing:\n \nvpx\n(\n10\n)\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: gameAxisDelegate\n\n\n        \nRectangle\n \n{\n\n            \nwidth:\n \nvpx\n(\n240\n)\n\n            \nheight:\n \nvpx\n(\n135\n)\n\n\n            \ncolor:\n \ngreen\n\n\n            \nText\n \n{\n\n                \ntext:\n \nmodelData\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\nNavigation\n\n\nYou might have noticed that the components react already to mouse drag or scroll, but keyboard and gamepad input doesn't work yet. Let's fix this.\n\n\nVertical scroll\n\n\nSimply add \nfocus:\n \ntrue\n to the collection axis:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nfocus:\n \ntrue\n\n\n}\n\n\n\n\n\n\nYou can now scroll the bars with \nUp\n and \nDown\n, but... it's kind of weird right now. It'd be better for the items to \"snap\" to their place, to scroll to the next item when we press a button. This can be fixed with the \nsnapMode\n and \nhighlightRangeMode\n properties: setting \nsnapMode\n keeps the elements organized when scrolling the list as a whole, while \nhighlightRangeMode\n will make sure the selection follows the scrolling (that is, when you press \nUp\n or \nDown\n, you actually select the next or previous element, not just view a different part of the list).\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n\n    \nfocus:\n \ntrue\n\n\n}\n\n\n\n\n\n\nThere, much better now.\n\n\n\n\nTip\n\n\nSetting up the keyboard input also makes gamepads work. Check the \nControls\n page to see how are they related.\n\n\n\n\nBy default, every delegate that is at least partially in the ListView's area is fully drawn. To make sure only the rows in the lower half of the screen are visible, I set \nclip\n on the \nListView\n:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n\n    \nclip:\n \ntrue\n\n\n\n    \nfocus:\n \ntrue\n\n\n}\n\n\n\n\n\n\nHorizontal scroll\n\n\nWe have a somewhat complex layout -- scrollable items inside a scrollable item; we can't just set \nfocus: true\n here, since that'd mean we set it for \neach\n row, and end up with scrolling one we don't want. Hovewer, every \nListView\n has select-next and select-previous function we can use (\nincrementCurrentIndex()\n, \ndecrementCurrentIndex()\n), and the currently selected item can be accessed through \ncurrentItem\n.\n\n\nIn this case, the \ncurrentItem\n of \ncollectionAxis\n will be the \nItem\n element inside \ncollectionAxisDelegate\n:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \n// this one!\n\n    \nItem\n \n{\n\n        \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n180\n)\n\n\n        \nText\n \n{\n\n            \nid: label\n\n\n            \n// ...\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameAxis\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nBut how can we access the ListView, \ngameAxis\n of the Item? Turns out we can't just use its \nid\n, as it's not accessible by external element (we'll get an error about \ngameAxis\n being undefined). Function definitions and \nproperty\n members, however, \ncan\n be accessed. For now, I'll simply create an \nalias\n property for the horizontal axis:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n\n        \nproperty\n \nalias\n \naxis:\n \ngameAxis\n\n\n\n        \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n180\n)\n\n\n        \nText\n \n{\n\n            \nid: label\n\n\n            \n// ...\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameAxis\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nWe can now access the game axis of the current collection as \ncurrentItem.axis\n (see below).\n\n\n\n\nNote\n\n\nYes, you can also write it like \nproperty alias gameAxis: gameAxis\n, I simply preferred the different name in this case.\n\n\n\n\nCombining the ListView functions, \ncurrentItem\n and manual keyboard handling (\nKeys\n), we can now make the horizontal scrolling work with:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nfocus:\n \ntrue\n\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\naxis\n.\ndecrementCurrentIndex\n()\n\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\naxis\n.\nincrementCurrentIndex\n()\n\n\n}\n\n\n\n\n\n\n...which, similarly to the vertical axis, initially scrolls in a not so nice way. Fix it like previously, but in the delegate:\n\n\nListView\n \n{\n\n    \nid: gameAxis\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nlabel\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \norientation:\n \nListView\n.\nHorizontal\n\n\n    \nmodel:\n \n100\n\n    \ndelegate:\n \ngameAxisDelegate\n\n    \nspacing:\n \nvpx\n(\n10\n)\n\n\n\n    \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n\n    \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n\n}\n\n\n\n\n\n\nAnd now both directions should scroll finely!\n\n\n\n\nTip\n\n\nTo see that the current item indeed changes, you could set the \ncolor\n of the \ngameAxisDelegate\n's \nRectangle\n to:\n\n\ncolor:\n \nListView\n.\nisCurrentItem\n \n?\n \norange\n \n:\n \ngreen\n\n\n\n\nLeft margin\n\n\nThere's a small margin on the left that shows the game before the currently selected one. We don't want to reduce the size of the horizontal \nListView\ns (they should fill the whole width of the screen), we just want to move the currently selected item a little bit right. For this, we can use the \npreferredHighlightBegin\n/\nEnd\n members of the \nListView\ns: they can be used to define a fixed position range (in pixels) where the currently selected element should reside.\n\n\nI'll set a 100px offset like this:\n\n\nListView\n \n{\n\n    \nid: gameAxis\n\n\n    \n// ...\n\n\n    \npreferredHighlightBegin:\n \nvpx\n(\n100\n)\n\n    \npreferredHighlightEnd:\n \npreferredHighlightBegin\n \n+\n \nvpx\n(\n240\n)\n \n// the width of one game box\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\npreferredHighlightBegin\n and \npreferredHighlightEnd\n almost always come in pair, and \nEnd\n must be greater or equal than \nBegin\n to have their effect applied.\n\n\n\n\nWe also need to move the collection label too. As it's just a regular Text element, I'll simply set its left anchor and a margin on it:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \n// ...\n\n\n        \nText\n \n{\n\n            \nid: label\n\n\n            \n// ...\n\n\n\n            \nanchors.left:\n \nparent\n.\nleft\n\n\n            \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameAxis\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nThe anchor margin is only applied if the anchor itself is defined.\n\n\n\n\n\n\nTip\n\n\nYou can also use the Text item's \nleftPadding\n property. This feature was added in Qt 5.6 (as mentioned in the \nofficial documentation\n), so you'll need to change the \nimport\n command on the top of the QML file to \nimport QtQuick 2.6\n or higher (Pegasus comes with Qt 5.9 at the moment).\n\n\n\n\nUsing API data\n\n\nFinally, the time has come to replace the placeholder elements with actual content. Let's start by using the real collection data. According to the \nAPI reference\n, collections can be accessed and selected through \napi.collectionList\n: we can use \napi.collectionList.model\n as the \nmodel\n of a ListView (or any other View) and \nindex\n as the \ncurrentIndex\n of it. We can then call \nincreaseIndex()\n and \ndecreaseIndex()\n to move to the next and previous items (or by setting the \nindex\n manually).\n\n\nVertical axis\n\n\nFirst, find the ListView for the collection axis and set its \nmodel\n property. Then add the \ncurrentIndex\n line to bind it to the index from the API. Finally, call \nincreaseIndex()\n and \ndecreaseIndex()\n when \nUp\n and \nDown\n is pressed:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n\n    \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n\n    \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n\n    \ndelegate:\n \ncollectionAxisDelegate\n\n\n    \n// ...\n\n\n    \nfocus:\n \ntrue\n\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\naxis\n.\ndecrementCurrentIndex\n()\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\naxis\n.\nincrementCurrentIndex\n()\n\n\n}\n\n\n\n\n\n\n\n\nWarning\n\n\nIncrementing/decrementing the \ncurrentIndex\n property of a ListView (eg. by navigation) has no effect on the bound value (in this case \napi.collectionList.index\n); this is why I call \nincrementIndex()\n/\ndecrementIndex()\n manually on \nUp\n and \nDown\n. We'll also modify the \nLeft\n/\nRight\n keys very soon.\n\n\n\n\n\n\nTip\n\n\nInstead of using \nKeys\n and increment/decrement, you can also set \napi.collectionList.index\n manually, eg.\n\n\nonCurrentIndexChanged:\n \napi\n.\ncollectionList\n.\nindex\n \n=\n \ncurrentIndex\n\n\n\n\n\n\nHelp\n\n\nincrementIndex()\n and \ndecrementIndex()\n wraps around (incrementing the index at the last item will make it jump to the first one). If you don't want them to wrap, you can use \nincrementIndexNoWrap()\n and \ndecrementIndexNoWrap()\n instead.\n\n\n\n\nPreviously the \nmodel\n was set to \n10\n, and so the \nmodelData\n available in the delegates was a number between 0 and 9. With \nmodel\n set to \napi.collectionList.model\n, the \nmodelData\n will be a \nCollection\n object.\n\n\nA \nCollection\n always has a \ntag\n (a short, unique label) and possibly a proper \nname\n. We should show the \nname\n if it's available, and fall back to the \ntag\n if it's not defined. We can do it like this:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \n// ...\n\n\n        \nText\n \n{\n\n            \nid: label\n\n\n\n            \ntext:\n \nmodelData\n.\nname\n \n||\n \nmodelData\n.\ntag\n\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n            \n// ...\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameAxis\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nTip\n\n\nIf the name of the \nmodelData\n property you use (in this case \nname\n and \ntag\n) don't collide with other properties of the object, it's not required to type out \nmodelData\n: you can simply write \ntext: name || tag\n.\n\n\n\n\nAfter a refresh, you should see the names of collections appearing in Pegasus.\n\n\n\n\nHorizontal axis\n\n\nNow let's show the game titles in the horizontal rectangles. Every \nCollection\n has a \ngameList\n member we can use to access the list of games associated with the collection. Similarly to \ncollectionList\n, \ngameList\n also has \nmodel\n and \nindex\n properties, so let's use them in the horizontal axis (\ncollectionAxisDelegate\n):\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \n// ...\n\n\n        \nText\n \n{\n\n            \nid: label\n\n\n            \n// ...\n\n        \n}\n\n\n        \nListView\n \n{\n\n            \nid: gameAxis\n\n\n            \n// ...\n\n\n\n            \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n\n            \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n\n            \ndelegate:\n \ngameAxisDelegate\n\n            \nspacing:\n \nvpx\n(\n10\n)\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nJust like with the vertical axis, I'll use \nincrementIndex()\n and \ndecrementIndex()\n again. Currently we access the horizontal ListView of the collection delegate via an \nalias\n property, and call the ListView's \nincrementCurrentIndex()\n and \ndecrementCurrentIndex()\n methods by \nKeys.onLeftPressed\n and \nKeys.onRightPressed\n of the collection axis. Instead, we should call the index changing functions of the API, of the Collection belonging to a delegate (ie. \nmodelData\n).\n\n\nAs usual, there are more than one way to do it, I'll show how you can use JavaScript functions this time. First, find the \nproperty alias axis: gameAxis\n line\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n\n        \nproperty\n \nalias\n \naxis:\n \ngameAxis\n \n// this one\n\n\n\n        \n// ...\n\n\n        \nText\n \n{\n \n...\n \n}\n\n        \nListView\n \n{\n \n...\n \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nthen delete and replace it with the \nselectNext()\n and \nselectPrev()\n functions, with the increment/decrement methods of the API in their body:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \nfunction\n \nselectNext\n()\n \n{\n\n            \nmodelData\n.\ngameList\n.\nincrementIndex\n();\n\n        \n}\n\n\n        \nfunction\n \nselectPrev\n()\n \n{\n\n            \nmodelData\n.\ngameList\n.\ndecrementIndex\n();\n\n        \n}\n\n\n\n        \n// ...\n\n\n        \nText\n \n{\n \n...\n \n}\n\n        \nListView\n \n{\n \n...\n \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nThen you can call the new functions in the \ncollectionAxis\n like this:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n    \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n    \ndelegate:\n \ncollectionAxisDelegate\n\n\n    \n// ...\n\n\n    \nfocus:\n \ntrue\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n\n}\n\n\n\n\n\n\nAnd now the Views scroll properly, with the real data!\n\n\nGame items\n\n\nWith the previous changes, \ngameAxisDelegate\n is now a visual representation for a Game element. A Game always has a \ntitle\n, so we can simply set it as the text:\n\n\nComponent\n \n{\n\n    \nid: gameAxisDelegate\n\n\n    \nRectangle\n \n{\n\n        \nwidth:\n \nvpx\n(\n240\n)\n\n        \nheight:\n \nvpx\n(\n135\n)\n\n\n        \ncolor:\n \ngreen\n\n\n        \nText\n \n{\n\n\n            \ntext:\n \nmodelData\n.\ntitle\n\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\nThe \nmodel\n of the \nvertical\n ListView was a list of \nCollection\ns, so the \nmodelData\n received by a delegate of that ListView (one whole horizontal row) is one \nCollection\n object.\n\n\nThe \nmodel\n of these \nhorizontal\n ListViews is a list of \nGame\ns, so a delegate of the horizontal ListViews will see a \nGame\n in its \nmodelData\n.\n\n\n\n\nAnd now the game names also show up in Pegasus:\n\n\n\n\nLaunching games\n\n\nNow that the game selection items are in sync with the API, we can actually launch games! To start the currently selected game, simply call \napi.currentGame.launch()\n when \nEnter\n is pressed:\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \n// ...\n\n\n    \nfocus:\n \ntrue\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n}\n\n\n\n\n\n\n\n\nHelp\n\n\nCareful not to confuse the \nonReturnPressed\n and \nonEnterPressed\n calls: technically \nReturn\n is the key next to the letters, while \nEnter\n is the one on the numeric keypad.\n\n\n\n\n\n\nNote\n\n\nonReturnPressed\n is also triggered by pressing \n/\n on the gamepad.\n\n\n\n\nAnd with this, technically our theme is fully functional!\n\n\nNext step, let's make it pretty.\n\n\nThe code so far #2\n\n\nThe code so far #2\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nListView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n        \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n        \ndelegate:\n \ncollectionAxisDelegate\n\n\n        \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n        \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n        \nclip:\n \ntrue\n\n\n        \nfocus:\n \ntrue\n\n        \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n        \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n        \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n        \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n        \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: collectionAxisDelegate\n\n\n        \nItem\n \n{\n\n            \nfunction\n \nselectNext\n()\n \n{\n\n                \nmodelData\n.\ngameList\n.\nincrementIndex\n();\n\n            \n}\n\n\n            \nfunction\n \nselectPrev\n()\n \n{\n\n                \nmodelData\n.\ngameList\n.\ndecrementIndex\n();\n\n            \n}\n\n\n            \nwidth:\n \nListView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n            \nText\n \n{\n\n                \nid: label\n\n\n                \ntext:\n \nmodelData\n.\nname\n \n||\n \nmodelData\n.\ntag\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n                \nheight:\n \nvpx\n(\n45\n)\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n            \n}\n\n\n            \nListView\n \n{\n\n                \nid: gameAxis\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.right:\n \nparent\n.\nright\n\n                \nanchors.top:\n \nlabel\n.\nbottom\n\n                \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n                \norientation:\n \nListView\n.\nHorizontal\n\n\n                \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n                \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n                \ndelegate:\n \ngameAxisDelegate\n\n                \nspacing:\n \nvpx\n(\n10\n)\n\n\n                \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n                \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n\n                \npreferredHighlightBegin:\n \nvpx\n(\n100\n)\n\n                \npreferredHighlightEnd:\n \npreferredHighlightBegin\n \n+\n \nvpx\n(\n240\n)\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: gameAxisDelegate\n\n\n        \nRectangle\n \n{\n\n            \nwidth:\n \nvpx\n(\n240\n)\n\n            \nheight:\n \nvpx\n(\n135\n)\n\n\n            \ncolor:\n \ngreen\n\n\n            \nText\n \n{\n\n                \ntext:\n \nmodelData\n.\ntitle\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\nFancy game boxes\n\n\nI'll now replace the green game boxes with something better to look at. There are two main cases we have to support:\n\n\n\n\nif there is an available image for a game, the box should show that\n\n\nif there is none, or the image has not loaded yet, the box should show a gray rectangle, with the game's title in the center\n\n\n\n\nSo \ngameAxisDelegate\n is our game box that right now contains a green rectangle. I'll turn that into an Item, and, for the two cases above, I'll add an initial gray Rectangle and Image:\n\n\nComponent\n \n{\n\n    \nid: gameAxisDelegate\n\n\n    \nItem\n \n{\n\n        \nwidth:\n \nvpx\n(\n240\n)\n\n        \nheight:\n \nvpx\n(\n135\n)\n\n\n        \nRectangle\n \n{\n\n            \nanchors.fill:\n \nparent\n\n            \ncolor:\n \n#333\n\n        \n}\n\n\n        \nImage\n \n{\n\n            \nid: image\n\n\n            \nanchors.fill:\n \nparent\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nSo which image asset should we use? A game box is a rectangle with 16:9 aspect ratio, so the \nbanner\n would be perfect for this. However, since every asset is potentially missing, we should consider showing other images and provide multiple fallbacks. If we don't have a \nbanner\n, the next similarly sized one is the \nsteam\n (\"grid icon\") asset. Because it's wider than 16:9, we'll need to crop it if we don't want black bars or squashed/scretched images (though you might prefer that). If neither image is available, I'll use \nboxFront\n as it tends to be commonly available.\n\n\nLet's extend the Image object created previously:\n\n\nImage\n \n{\n\n    \nid: image\n\n\n    \nanchors.fill:\n \nparent\n\n    \nvisible:\n \nsource\n\n\n    \n// fill the whole area, cropping what lies outside\n\n    \nfillMode:\n \nImage\n.\nPreserveAspectCrop\n\n\n    \nasynchronous:\n \ntrue\n\n    \nsource:\n \nassets\n.\nbanner\n \n||\n \nassets\n.\nsteam\n \n||\n \nassets\n.\nboxFront\n\n    \nsourceSize\n \n{\n \nwidth:\n \n256\n;\n \nheight:\n \n256\n \n}\n\n\n}\n\n\n\n\n\n\nI've also made some optimizations here:\n\n\n\n\nI've set \nasynchronous: true\n: Loading image files takes some time depending on the device Pegasus runs on. If this property is set to false (default), the program will not react to input until the image is loaded (or noticed that it failed to load). If it's false, the image is loaded \"in the background\", and input is not blocked; hovewer depending on your theme, you might want to show something in its place for the users during this time (eg. a loading spinner or progress bar).\n\n\nI've set \nsourceSize\n: This sets the maximum size the image should occupy in the memory. The \nofficial documentation\n describes this in detail.\n\n\nI've set \nvisible: source\n, that is, if the \nsource\n is empty (neither \nbanner\n, \nsteam\n or \nboxFront\n is available), then ignore this whole object: no input will be ever handled here and there's nothing to see either.\n\n\n\n\nWith these changes, here's how it looks:\n\n\n\n\nStarting to take shape, isn't it?\n\n\nLet's finish the text-only fallback too:\n\n\nComponent\n \n{\n\n    \nid: gameAxisDelegate\n\n\n    \nItem\n \n{\n\n        \nwidth:\n \nvpx\n(\n240\n)\n\n        \nheight:\n \nvpx\n(\n135\n)\n\n\n        \nRectangle\n \n{\n\n            \nanchors.fill:\n \nparent\n\n            \ncolor:\n \n#333\n\n\n            \nvisible:\n \nimage\n.\nstatus\n \n!==\n \nImage\n.\nReady\n\n\n\n\n            \nText\n \n{\n\n\n                \ntext:\n \nmodelData\n.\ntitle\n\n\n                \n// define the text area\n\n                \nanchors.fill:\n \nparent\n\n                \nanchors.margins:\n \nvpx\n(\n12\n)\n\n\n                \n// align to the center\n\n                \nhorizontalAlignment:\n \nText\n.\nAlignHCenter\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n                \nwrapMode:\n \nText\n.\nWrap\n\n\n                \n// set the font\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n            \n}\n\n        \n}\n\n\n        \nImage\n \n{\n\n            \nid: image\n\n\n            \n// ...\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAnd we're done with the game boxes!\n\n\nLooping the axes\n\n\nIt'd be nice if all of the lists would loop around. You can do two kinds of loop:\n\n\n\n\nmake the list finite and when the last item is reached, jump back to the first one (and also in reverse direction)\n\n\nmake the list infinite and loop around (carousel style)\n\n\n\n\nThe first one can be done either by simply setting \nkeyNavigationWraps: true\n for a ListView (and other Views) or using the API's default index increase/decrease functions. In our case though, the carousel option would look the best.\n\n\nI won't lie, making a carousel-like looping list is annoying and overly complex for this use case; the situation might improve later by creating some easier-to-use custom types in Pegasus.\n\n\nVertically\n\n\nSo the problem is, ListView can't do carousels: the only type that can is PathView. As such, we'll turn our ListViews into PathViews next. Again, let's start with the vertical axis; here's a before-after comparison, with some comments after the code:\n\n\nBefore\n\n\nListView\n \n{\n\n    \nid: collectionAxis\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nparent\n.\nverticalCenter\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n    \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n    \ndelegate:\n \ncollectionAxisDelegate\n\n\n    \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n    \nclip:\n \ntrue\n\n\n    \nfocus:\n \ntrue\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n}\n\n\n\n\n\n\nAfter\n\n\nPathView\n \n{\n\n    \nid: collectionAxis\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nparent\n.\nverticalCenter\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n    \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n    \ndelegate:\n \ncollectionAxisDelegate\n\n\n\n\n    \n// changed ListView to PathView\n\n\n    \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n    \nclip:\n \ntrue\n\n\n\n    \n// brand new: path definitions\n\n\n    \npathItemCount:\n \n1\n \n+\n \nMath\n.\nceil\n(\nheight\n \n/\n \nvpx\n(\n180\n))\n\n    \npath:\n \nPath\n \n{\n\n        \nstartX:\n \ncollectionAxis\n.\nwidth\n \n*\n \n0.5\n\n        \nstartY:\n \nvpx\n(\n180\n)\n \n*\n \n-\n0.5\n\n        \nPathLine\n \n{\n\n            \nx:\n \ncollectionAxis\n.\npath\n.\nstartX\n\n            \ny:\n \ncollectionAxis\n.\npath\n.\nstartY\n \n+\n \ncollectionAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n180\n)\n\n        \n}\n\n    \n}\n\n    \npreferredHighlightBegin:\n \n1\n \n/\n \npathItemCount\n\n    \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n\n\n    \nfocus:\n \ntrue\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n}\n\n\n\n\n\n\n\n\nWarning\n\n\nDon't forget to change ListView to PathView in the delegate (\ncollectionAxisDelegate\n's \nwidth\n prop) too!\n\n\n\n\nUnlike ListView that goes to one direction only, PathView can be used to create arbitrary paths on which the items will travel (curves, circles, all kinds of shapes). Because of that, some properties have to be provided in percentage or need manual calculations.\n\n\n\n\n\n\nFor PathViews, \npathItemCount\n must be set (the default behaviour is to show all items). We should show as many rows as it fits into lower half or the screen (one row's height is 180px). The number of visible items thus will be [area height] / [row height], which I've rounded up using \nMath.ceil\n, a standard JavaScript function. However, when there's a scrolling going on, there'll be actually \none more\n row visible on the screen: the topmost row will gradually go \nout\n on the top of the lower area, while a new line is on its way \nin\n to appear on the bottom (see the animation below).\n\n\n\n\n\n\nThe \npath\n defines the trail the elements will follow \nby their center point\n. Because there'll be one item that slides \nout\n, and one that slides \nin\n, the path extends above and below the PathView's area. The starting point of the axis (the center point of the item that will slide out) is horizontally (\nstartX\n) the center of the screen (as the rows fill the width), and vertically (\nstartY\n) above the top edge of the PathView (which would be 0) by 50% of the row height (where values are in pixels). From the start point, a linear path is created with \nPathLine\n: I've set it so the end point is the same as the start except the \nY\n coordinate, which is increased by the length ot the path, [number of max. visible items] * [item height].\n\n\n\n\n\n\nThe preferred highlight positions are in \npercentage\n for the PathView (as it can have any kind of shape, pixels don't always make sense). Again, the values define the range for the \ncenter point\n of the selected item. It defaults to 0 (start of the line), which in our case would be the center of the sliding out element, out of the visible area. I've set it to [1] / [item count], which will produce the center point of the \nsecond\n element on the path. Since I'm not planning to add any additional effects and such, just select one item, I've set the end of the range to the same as the beginning.\n\n\n\n\n\n\n\n\n\nStructure of the vertical PathView. The red line marks the path, with red dots at positions 0/4 (top), 1/4, 2/4, 3/4 and 4/4 (bottom). The centers of the delegates are marked with blue.\n\n\nHorizontally\n\n\nThe horizontal scrolling works similarly, with one important difference: there is a margin on the left of the currently selected item, where the previous one is halfway in the screen. We'll have to shift the whole path horizontally, and add 1 to the maximum number of visible items, and another one to account for scrolling, just like at the vertical axis.\n\n\n\n\n\nI've set the left margin previously to 100 px and the width of a game box to be 240x135. In addition, there's a 10px spacing between the elements, giving the full width of a box to 250. The center of the current-item would be at 100 + 250/2 = 225 on the path, but to make it align with the collection label, I'll shift it 5px (half of the spacing) to the left, making the X center to be 220px. Then counting backwards, the previous-item will be at 220 - 250, and the one before that (the leftmost postion, where the new elements will appear when scrolling) at 220 - 250 * 2.\n\n\nAll right, let's change the horizontal ListView into a PathView:\n\n\nBefore\n:\n\n\nListView\n \n{\n\n    \nid: gameAxis\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nlabel\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \norientation:\n \nListView\n.\nHorizontal\n\n\n    \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n    \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n    \ndelegate:\n \ngameAxisDelegate\n\n    \nspacing:\n \nvpx\n(\n10\n)\n\n\n    \nsnapMode:\n \nListView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nListView\n.\nStrictlyEnforceRange\n\n\n    \npreferredHighlightBegin:\n \nvpx\n(\n100\n)\n\n    \npreferredHighlightEnd:\n \npreferredHighlightBegin\n \n+\n \nvpx\n(\n240\n)\n\n\n}\n\n\n\n\n\n\nAfter\n:\n\n\nPathView\n \n{\n\n    \nid: gameAxis\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.top:\n \nlabel\n.\nbottom\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n\n    \n// removed orientation\n\n\n\n\n    \n// removed spacing\n\n\n    \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n    \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n    \ndelegate:\n \ngameAxisDelegate\n\n\n\n    \n// changed ListView to PathView\n\n\n    \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n\n\n\n    \n// brand new: path definitions\n\n\n    \npathItemCount:\n \n2\n \n+\n \nMath\n.\nceil\n(\nwidth\n \n/\n \nvpx\n(\n250\n))\n \n// note the \n2\n!\n\n    \npath:\n \nPath\n \n{\n\n        \nstartX:\n \nvpx\n(\n220\n)\n \n-\n \nvpx\n(\n250\n)\n \n*\n \n2\n\n        \nstartY:\n \nvpx\n(\n135\n)\n \n*\n \n0.5\n\n        \nPathLine\n \n{\n\n            \nx:\n \ngameAxis\n.\npath\n.\nstartX\n \n+\n \ngameAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n250\n)\n\n            \ny:\n \ngameAxis\n.\npath\n.\nstartY\n\n        \n}\n\n    \n}\n\n\n    \n// changed highlight range\n\n\n    \npreferredHighlightBegin:\n \n2\n \n/\n \npathItemCount\n\n    \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n\n}\n\n\n\n\n\n\nAnd now both the horizontal and vertical axis loops as intended!\n\n\n\n\nTip\n\n\nTyping out fixed values in pixels every time can be tedious and error prone. I'd recommend defining them as properties at the top of the object they're used in (eg. \nproperty real boxHeight: vpx(135)\n).\n\n\n\n\nThe rest of the theme\n\n\nThe upper half of the screen contains the metadata and preview image of the currently selected game. The components here will consist of simple elements, like Image and Text, which will make adding them way easier.\n\n\nYou can place all these elements directly under the main \nFocusScope\n, or you could create a containing Item if you wish. I'll do the former to keep the guide shorter.\n\n\nAs for accessing the actual game data, we can use the properties of \napi.currentGame\n for metadata information, and \napi.currentGame.assets\n for the assets. You can find all the available fields listed in the \nAPI reference\n.\n\n\nTitle\n\n\nA simple Text item in the upper left corner, with the left margin set to the same 100px we used at the game rows, and some additional margin at the top.\n\n\nText\n \n{\n\n    \nid: title\n\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\ntitle\n\n    \ncolor:\n \nwhite\n\n\n    \nfont.pixelSize:\n \nvpx\n(\n32\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n    \nfont.bold:\n \ntrue\n\n\n    \nanchors.top:\n \nparent\n.\ntop\n\n    \nanchors.topMargin:\n \nvpx\n(\n42\n)\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n\n}\n\n\n\n\n\n\nRating\n\n\nThe rating will be displayed as a five-star bar, with some percentage of it colored according to the actual rating. This can be done with two simple, overlapping QML Images: draw five empty stars first, then over them, draw filled ones according to the rating. Kind of like a progress bar, except we're using stars for filling.\n\n\nBut first of all, I actuatlly draw two images for the stars, an empty one and a filled. Both have square size and transparent background. I create a new directory (eg. \nassets\n) in my theme folder and put them there.\n\n\n\n\n\n\n\n\nstar_empty.svg\n\n\nstar_filled.svg\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nI've used Inkscape for drawing the vector art; it has a built-in tool for drawing stars and other polygons.\n\n\n\n\nThen I create the following Item. As the star image is a square, I make its width 5 times the height to hold the five stars horizontally. I make the empty-star Image fill this whole item, and set \nfillMode: Image.TileHorizontally\n to make the star repeat horizontally. For the filled-star image, I place it over the other one, and modify its width by the rating, which is provided as a number between \n0.0\n and \n1.0\n (0% and 100%).\n\n\nItem\n \n{\n\n    \nid: rating\n\n\n    \n// set the item\ns dimensions\n\n    \nheight:\n \nvpx\n(\n16\n)\n\n    \nwidth:\n \nheight\n \n*\n \n5\n\n\n    \n// put it under the title\n\n    \nanchors.top:\n \ntitle\n.\nbottom\n\n    \nanchors.left:\n \ntitle\n.\nleft\n\n\n\n    \n// the empty stars\n\n    \nImage\n \n{\n\n        \nanchors.fill:\n \nparent\n\n\n        \nsource:\n \nassets/star_empty.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n        \n// the most important bits!\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n\n    \n// the filled stars\n\n    \nImage\n \n{\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \napi\n.\ncurrentGame\n.\nrating\n \n// !!!\n\n        \nheight:\n \nparent\n.\nheight\n\n\n        \nsource:\n \nassets/star_filled.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nWithout \nhorizontalAlignment\n the stars might not line up perfectly (the repeat will start from the center).\n\n\n\n\nWhen a game has no rating defined, \ngame.rating\n is \n0.0\n. Showing five empty stars for an otherwise good game might be a bit misleading, so I'll make the rating bar only appear when the \nrating\n is over 0%:\n\n\nItem\n \n{\n\n    \nid: rating\n\n\n\n    \nvisible:\n \napi\n.\ncurrentGame\n.\nrating\n \n \n0.0\n\n\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\nRelease year\n\n\nYet another simple Text element:\n\n\nText\n \n{\n\n    \nid: year\n\n\n    \n// if not defined, the release year is 0\n\n    \nvisible:\n \ngame\n.\nyear\n \n \n0\n\n\n    \ntext:\n \ngame\n.\nyear\n\n    \ncolor:\n \nwhite\n\n    \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n    \nanchors.left:\n \nrating\n.\nright\n\n    \nanchors.top:\n \nrating\n.\ntop\n\n\n}\n\n\n\n\n\n\nRow\n\n\nCurrently the \nyear\n element is manually anchored right next to the rating. Doing this for each item every time is quite annoying, let's just put them in a \nRow\n:\n\n\nRow\n \n{\n\n    \nid: detailsRow\n\n\n    \n// anchor the whole row\n\n    \nanchors.top:\n \ntitle\n.\nbottom\n\n    \nanchors.topMargin:\n \nvpx\n(\n5\n)\n\n    \nanchors.left:\n \ntitle\n.\nleft\n\n\n    \nspacing:\n \nvpx\n(\n10\n)\n\n\n\n    \nItem\n \n{\n\n        \nid: rating\n\n\n        \n// remove anchor items!\n\n        \n// anchors.top: title.bottom\n\n        \n// anchors.left: title.left\n\n\n        \n// ...\n\n    \n}\n\n\n    \nText\n \n{\n\n        \nid: year\n\n\n        \n// remove anchor items!\n\n        \n// anchors.left: rating.right\n\n        \n// anchors.top: rating.top\n\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\n\n\nPlayer count\n\n\nThis one will be a rounded rectangle with smiley faces in it indicating the number of players. The player count defaults to one; similarly to the rating, I'll show the component only if the player count is more than one.\n\n\nFirst I create the smiley face image (based on the Unicode \"filled smiling face\" symbol (\nU+263B\n). Again, it's square sized with a transparent background.\n\n\n\n\n\n\n\n\n\nThen create a background rounded Rectangle and the smiles Image in it, putting the whole thing in the Row created in the previous step:\n\n\nRectangle\n \n{\n\n    \nid: multiplayer\n\n\n    \n// the Rectangle\ns size depends on the Image,\n\n    \n// with some additional padding\n\n    \nwidth:\n \nsmileys\n.\nwidth\n \n+\n \nvpx\n(\n8\n)\n\n    \nheight:\n \nsmileys\n.\nheight\n \n+\n \nvpx\n(\n5\n)\n\n\n    \ncolor:\n \n#555\n\n    \nradius:\n \nvpx\n(\n3\n)\n\n\n    \nvisible:\n \napi\n.\ncurrentGame\n.\nplayers\n \n \n1\n\n\n\n    \nImage\n \n{\n\n        \nid: smileys\n\n\n        \n// 13px looked good for me\n\n        \nwidth:\n \nvpx\n(\n13\n)\n \n*\n \napi\n.\ncurrentGame\n.\nplayers\n\n        \nheight:\n \nvpx\n(\n13\n)\n\n\n        \nanchors.centerIn:\n \nparent\n\n\n        \nsource:\n \nassets/smiley.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nsmileys\n.\nheight\n;\n \nheight:\n \nsmileys\n.\nheight\n \n}\n\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n}\n\n\n\n\n\n\nDeveloper\n\n\nYet another simple Text in the Row:\n\n\nText\n \n{\n\n    \nid: developer\n\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\ndeveloper\n\n    \ncolor:\n \nwhite\n\n    \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n}\n\n\n\n\n\n\n\n\nTip\n\n\nA game may have multiple developers: if you just want to show them as a Text, you can use \nGame\n.developer\n, a string that simply lists them all. There's also \nGame\n.developerList\n, a JavaScript \nArray\n, if you wish to use them individually.\n\n\n\n\nDescription\n\n\nA bigger text with set boundaries for alignment. If there is a short \nsummary\n, I'll use that, otherwise the beginning of the full description.\n\n\nText\n \n{\n\n    \nid: description\n\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\ndescription\n\n    \ncolor:\n \nwhite\n\n    \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n    \n// allow word wrapping, justify horizontally\n\n    \nwrapMode:\n \nText\n.\nWordWrap\n\n    \nhorizontalAlignment:\n \nText\n.\nAlignJustify\n\n    \n// if the text is too long, end it with an ellipsis (...)\n\n    \nelide:\n \nText\n.\nElideRight\n\n\n    \nanchors\n \n{\n\n        \nleft:\n \ndetailsRow\n.\nleft\n\n        \nright:\n \nparent\n.\nhorizontalCenter\n\n        \ntop:\n \ndetailsRow\n.\nbottom\n;\n \ntopMargin:\n \nvpx\n(\n20\n)\n\n        \nbottom:\n \nparent\n.\nverticalCenter\n;\n \nbottomMargin:\n \nvpx\n(\n32\n)\n\n    \n}\n\n\n}\n\n\n\n\n\n\nScreenshot\n\n\nThis should be below everything else on the screen -- in fact, if you look at the image at the beginning of this guide, it's actually going into the bottom-half region of the screen, reaching the row of images.\n\n\nAs it's under everything else, I'll put its implementation at the top of the theme file, even before the collection PathView. I'll anchor the top and left edges of the image to the top right corner of the screen. To make it go slightly into the bottom half, I'll anchor the bottom edge to the vertical center of the screen, then add a small amount of \nnegative margin\n to the bottom (a positive margin \nreduces\n the size of the element, while a negative one \nincreases\n it).\n\n\nImage\n \n{\n\n    \nid: screenshot\n\n\n    \nasynchronous:\n \ntrue\n\n    \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n\n    \n// set the first screenshot as source, or nothing\n\n    \nsource:\n \napi\n.\ncurrentGame\n.\nassets\n.\nscreenshots\n[\n0\n]\n \n||\n \n\n    \nsourceSize\n \n{\n \nwidth:\n \n512\n;\n \nheight:\n \n512\n \n}\n\n\n    \nanchors.top:\n \nparent\n.\ntop\n\n    \nanchors.right:\n \nparent\n.\nright\n\n    \nanchors.bottom:\n \nparent\n.\nverticalCenter\n\n    \nanchors.bottomMargin:\n \nvpx\n(\n-\n45\n)\n \n// the height of the collection label\n\n\n}\n\n\n\n\n\n\n\n\nNote\n\n\nUsing negative margins kind of feels like a hack though, so depending on the situation you might prefer to use simple width/height properties.\n\n\n\n\n\n\nHelp\n\n\nThe screenshots are stored under \nassets.screenshots\n, which is a regular JavaScript \nArray\n. If it's empty, \nscreenshots[0]\n will be \nundefined\n, and setting an \nundefined\n value as the \nsource\n of an Image will produce a warning in the log. Setting it to an empty string, however, will not, so appending \n|| \n as a fallback will silence the warning.\n\n\nAn alternative solution could be is to use \nscreenshots\n as a \nmodel\n in eg. a ListView, and the Image as delegate. You could then further extend it to periodically change the current visible screenshot.\n\n\n\n\n\n\nTip\n\n\nYou can also use the \nz\n property of the components to set their relative \"height\".\n\n\n\n\nGradients\n\n\nThere are two linear gradients (\"fade-ins\"), one from the left and one from the bottom of the image. Such effect can be added just like regular components, can be positioned, sized, animated, etc. But first of all, to use gradients you'll need the \nQtGraphicalEffects\n QML module:\n\n\nimport\n \nQtQuick\n \n2.0\n\n\nimport\n \nQtGraphicalEffects\n \n1.0\n\n\n\n\nFocusScope\n \n{\n\n    \n// ...\n\n\n}\n\n\n\n\n\n\nThen, create the horizontal linear gradient inside our Image component:\n\n\nImage\n \n{\n\n    \nid: screenshot\n\n\n    \n// ...\n\n\n\n    \nLinearGradient\n \n{\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.25\n\n        \nheight:\n \nparent\n.\nheight\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n\n        \n// since it goes straight horizontally from the left,\n\n        \n// the Y of the point doesn\nt really matter\n\n        \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n        \nend:\n \nQt\n.\npoint\n(\nwidth\n,\n \n0\n)\n\n        \n// at the left side (0%), it starts with a fully visible black\n\n        \n// at the right side (100%), it blends into transparency\n\n        \ngradient:\n \nGradient\n \n{\n\n            \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n            \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n        \n}\n\n    \n}\n\n\n\n}\n\n\n\n\n\n\nAnd another for the bottom:\n\n\nLinearGradient\n \n{\n\n    \nwidth:\n \nparent\n.\nwidth\n\n    \nheight:\n \nvpx\n(\n50\n)\n\n\n    \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n    \n// goes straight up, so the X of the point doesn\nt really matter\n\n    \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \nheight\n)\n\n    \nend:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n    \ngradient:\n \nGradient\n \n{\n\n        \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n        \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n    \n}\n\n\n}\n\n\n\n\n\n\nAnd we're done!\n\n\nSelection marker\n\n\nPerhaps not easy to notice on the example images, but actually there's a white rectangular border around the current item's place on the topmost horizontal axis. It's position is fixed and does not move even during scrolling.\n\n\nI'll create an empty, border-only Rectangle for it. Since it's over everything else in the theme, I'll put it to the bottom of the whole file, after the \ngameAxisDelegate\n's definition.\n\n\nRectangle\n \n{\n\n    \nid: selectionMarker\n\n\n    \nwidth:\n \nvpx\n(\n240\n)\n\n    \nheight:\n \nvpx\n(\n135\n)\n\n\n    \ncolor:\n \ntransparent\n\n    \nborder\n \n{\n \nwidth:\n \n3\n;\n \ncolor:\n \nwhite\n \n}\n\n\n    \nanchors.left:\n \nparent\n.\nleft\n\n    \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n    \nanchors.top:\n \nparent\n.\nverticalCenter\n\n    \nanchors.topMargin:\n \nvpx\n(\n45\n)\n\n\n}\n\n\n\n\n\n\nOpacity\n\n\nThe currently active horizontal row is fully visible, while the rest are a bit darker. I'll set the opacity of the non-active rows to 60%. In addition, I'll add a light animation, so instead of a sudden change in the visibility, the rows gradually raise their opacity during scrolling.\n\n\nSimply add these two lines to the \ncollectionAxisDelegate\n:\n\n\nComponent\n \n{\n\n    \nid: collectionAxisDelegate\n\n\n    \nItem\n \n{\n\n        \n// JS functions\n\n\n        \n// width, height\n\n\n\n        \nopacity:\n \nPathView\n.\nisCurrentItem\n \n?\n \n1.0\n \n:\n \n0.6\n\n\n        \nBehavior\n \non\n \nopacity\n \n{\n \nNumberAnimation\n \n{\n \nduration:\n \n150\n \n}\n \n}\n\n\n\n        \n// ...\n\n    \n}\n\n\n}\n\n\n\n\n\n\nDone!\n\n\nWith all these components added, it seems we're actually done! Here's the end result:\n\n\n\n\nAnd the full code:\n\n\nThe code so far #3\nimport\n \nQtQuick\n \n2.0\n\n\nimport\n \nQtGraphicalEffects\n \n1.0\n\n\n\nFocusScope\n \n{\n\n\n    \nImage\n \n{\n\n        \nid: screenshot\n\n\n        \nasynchronous:\n \ntrue\n\n        \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n\n        \nsource:\n \napi\n.\ncurrentGame\n.\nassets\n.\nscreenshots\n[\n0\n]\n \n||\n \n\n        \nsourceSize\n \n{\n \nwidth:\n \n512\n;\n \nheight:\n \n512\n \n}\n\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.bottom:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottomMargin:\n \nvpx\n(\n-\n45\n)\n\n\n        \nLinearGradient\n \n{\n\n            \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.25\n\n            \nheight:\n \nparent\n.\nheight\n\n\n            \nanchors.left:\n \nparent\n.\nleft\n\n\n            \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n            \nend:\n \nQt\n.\npoint\n(\nwidth\n,\n \n0\n)\n\n            \ngradient:\n \nGradient\n \n{\n\n                \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n                \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n            \n}\n\n        \n}\n\n\n        \nLinearGradient\n \n{\n\n            \nwidth:\n \nparent\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n50\n)\n\n\n            \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n            \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \nheight\n)\n\n            \nend:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n            \ngradient:\n \nGradient\n \n{\n\n                \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n                \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nText\n \n{\n\n        \nid: title\n\n\n        \ntext:\n \napi\n.\ncurrentGame\n.\ntitle\n\n        \ncolor:\n \nwhite\n\n\n        \nfont.pixelSize:\n \nvpx\n(\n32\n)\n\n        \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \nfont.bold:\n \ntrue\n\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.topMargin:\n \nvpx\n(\n42\n)\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n    \n}\n\n\n    \nRow\n \n{\n\n        \nid: detailsRow\n\n\n        \nanchors.top:\n \ntitle\n.\nbottom\n\n        \nanchors.topMargin:\n \nvpx\n(\n5\n)\n\n        \nanchors.left:\n \ntitle\n.\nleft\n\n\n        \nspacing:\n \nvpx\n(\n10\n)\n\n\n        \nItem\n \n{\n\n            \nid: rating\n\n\n            \nvisible:\n \napi\n.\ncurrentGame\n.\nrating\n \n \n0.0\n\n\n            \nheight:\n \nvpx\n(\n16\n)\n\n            \nwidth:\n \nheight\n \n*\n \n5\n\n\n            \nImage\n \n{\n\n                \nanchors.fill:\n \nparent\n\n\n                \nsource:\n \nassets/star_empty.svg\n\n                \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n                \nfillMode:\n \nImage\n.\nTileHorizontally\n\n                \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n            \n}\n\n\n            \nImage\n \n{\n\n                \nanchors.top:\n \nparent\n.\ntop\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n\n                \nwidth:\n \nparent\n.\nwidth\n \n*\n \napi\n.\ncurrentGame\n.\nrating\n\n                \nheight:\n \nparent\n.\nheight\n\n\n                \nsource:\n \nassets/star_filled.svg\n\n                \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n                \nfillMode:\n \nImage\n.\nTileHorizontally\n\n                \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n            \n}\n\n        \n}\n\n\n        \nText\n \n{\n\n            \nid: year\n\n\n            \nvisible:\n \napi\n.\ncurrentGame\n.\nyear\n \n \n0\n\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\nyear\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \n}\n\n\n        \nRectangle\n \n{\n\n            \nid: multiplayer\n\n\n            \nwidth:\n \nsmileys\n.\nwidth\n \n+\n \nvpx\n(\n8\n)\n\n            \nheight:\n \nsmileys\n.\nheight\n \n+\n \nvpx\n(\n5\n)\n\n\n            \ncolor:\n \n#555\n\n            \nradius:\n \nvpx\n(\n3\n)\n\n\n            \nvisible:\n \napi\n.\ncurrentGame\n.\nplayers\n \n \n1\n\n\n            \nImage\n \n{\n\n                \nid: smileys\n\n\n                \nwidth:\n \nvpx\n(\n13\n)\n \n*\n \napi\n.\ncurrentGame\n.\nplayers\n\n                \nheight:\n \nvpx\n(\n13\n)\n\n\n                \nanchors.centerIn:\n \nparent\n\n\n                \nsource:\n \nassets/smiley.svg\n\n                \nsourceSize\n \n{\n \nwidth:\n \nsmileys\n.\nheight\n;\n \nheight:\n \nsmileys\n.\nheight\n \n}\n\n\n                \nfillMode:\n \nImage\n.\nTileHorizontally\n\n                \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n            \n}\n\n        \n}\n\n\n        \nText\n \n{\n\n            \nid: developer\n\n\n            \ntext:\n \napi\n.\ncurrentGame\n.\ndeveloper\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \n}\n\n    \n}\n\n\n    \nText\n \n{\n\n        \nid: description\n\n\n        \ntext:\n \napi\n.\ncurrentGame\n.\nsummary\n \n||\n \napi\n.\ncurrentGame\n.\ndescription\n\n        \ncolor:\n \nwhite\n\n        \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n        \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n        \nwrapMode:\n \nText\n.\nWordWrap\n\n        \nhorizontalAlignment:\n \nText\n.\nAlignJustify\n\n        \nelide:\n \nText\n.\nElideRight\n\n\n        \nanchors\n \n{\n\n            \nleft:\n \ndetailsRow\n.\nleft\n\n            \nright:\n \nparent\n.\nhorizontalCenter\n\n            \ntop:\n \ndetailsRow\n.\nbottom\n;\n \ntopMargin:\n \nvpx\n(\n20\n)\n\n            \nbottom:\n \nparent\n.\nverticalCenter\n;\n \nbottomMargin:\n \nvpx\n(\n32\n)\n\n        \n}\n\n    \n}\n\n\n    \nPathView\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n        \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n        \ndelegate:\n \ncollectionAxisDelegate\n\n\n        \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n        \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n        \nclip:\n \ntrue\n\n\n        \npathItemCount:\n \n1\n \n+\n \nMath\n.\nceil\n(\nheight\n \n/\n \nvpx\n(\n180\n))\n\n        \npath:\n \nPath\n \n{\n\n            \nstartX:\n \ncollectionAxis\n.\nwidth\n \n*\n \n0.5\n\n            \nstartY:\n \nvpx\n(\n180\n)\n \n*\n \n-\n0.5\n\n            \nPathLine\n \n{\n\n                \nx:\n \ncollectionAxis\n.\npath\n.\nstartX\n\n                \ny:\n \ncollectionAxis\n.\npath\n.\nstartY\n \n+\n \ncollectionAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n180\n)\n\n            \n}\n\n        \n}\n\n        \npreferredHighlightBegin:\n \n1\n \n/\n \npathItemCount\n\n        \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n\n        \nfocus:\n \ntrue\n\n        \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n        \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n        \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n        \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n        \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: collectionAxisDelegate\n\n\n        \nItem\n \n{\n\n            \nfunction\n \nselectNext\n()\n \n{\n\n                \nmodelData\n.\ngameList\n.\nincrementIndex\n();\n\n            \n}\n\n\n            \nfunction\n \nselectPrev\n()\n \n{\n\n                \nmodelData\n.\ngameList\n.\ndecrementIndex\n();\n\n            \n}\n\n\n            \nwidth:\n \nPathView\n.\nview\n.\nwidth\n\n            \nheight:\n \nvpx\n(\n180\n)\n\n\n            \nopacity:\n \nPathView\n.\nisCurrentItem\n \n?\n \n1.0\n \n:\n \n0.6\n\n            \nBehavior\n \non\n \nopacity\n \n{\n \nNumberAnimation\n \n{\n \nduration:\n \n150\n \n}\n \n}\n\n\n            \nText\n \n{\n\n                \nid: label\n\n\n                \ntext:\n \nmodelData\n.\nname\n \n||\n \nmodelData\n.\ntag\n\n                \ncolor:\n \nwhite\n\n                \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n                \nfont.family:\n \nglobalFonts\n.\nsans\n\n                \nfont.bold:\n \ntrue\n\n\n                \nheight:\n \nvpx\n(\n45\n)\n\n                \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n            \n}\n\n\n            \nPathView\n \n{\n\n                \nid: gameAxis\n\n\n                \nanchors.left:\n \nparent\n.\nleft\n\n                \nanchors.right:\n \nparent\n.\nright\n\n                \nanchors.top:\n \nlabel\n.\nbottom\n\n                \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n                \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n                \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n                \ndelegate:\n \ngameAxisDelegate\n\n\n                \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n                \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n\n                \npathItemCount:\n \n2\n \n+\n \nMath\n.\nceil\n(\nwidth\n \n/\n \nvpx\n(\n250\n))\n\n                \npath:\n \nPath\n \n{\n\n                    \nstartX:\n \nvpx\n(\n220\n)\n \n-\n \nvpx\n(\n250\n)\n \n*\n \n2\n\n                    \nstartY:\n \nvpx\n(\n135\n)\n \n*\n \n0.5\n\n                    \nPathLine\n \n{\n\n                        \nx:\n \ngameAxis\n.\npath\n.\nstartX\n \n+\n \ngameAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n250\n)\n\n                        \ny:\n \ngameAxis\n.\npath\n.\nstartY\n\n                    \n}\n\n                \n}\n\n                \npreferredHighlightBegin:\n \n2\n \n/\n \npathItemCount\n\n                \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nComponent\n \n{\n\n        \nid: gameAxisDelegate\n\n\n        \nItem\n \n{\n\n            \nwidth:\n \nvpx\n(\n240\n)\n\n            \nheight:\n \nvpx\n(\n135\n)\n\n\n            \nRectangle\n \n{\n\n                \nanchors.fill:\n \nparent\n\n                \ncolor:\n \n#333\n\n                \nvisible:\n \nimage\n.\nstatus\n \n!==\n \nImage\n.\nReady\n\n\n                \nText\n \n{\n\n                    \ntext:\n \nmodelData\n.\ntitle\n\n\n                    \nanchors.fill:\n \nparent\n\n                    \nanchors.margins:\n \nvpx\n(\n12\n)\n\n\n                    \nhorizontalAlignment:\n \nText\n.\nAlignHCenter\n\n                    \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n                    \nwrapMode:\n \nText\n.\nWrap\n\n\n                    \ncolor:\n \nwhite\n\n                    \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n                    \nfont.family:\n \nglobalFonts\n.\nsans\n\n                \n}\n\n            \n}\n\n\n            \nImage\n \n{\n\n                \nid: image\n\n\n                \nanchors.fill:\n \nparent\n\n                \nvisible:\n \nsource\n\n\n                \nfillMode:\n \nImage\n.\nPreserveAspectCrop\n\n\n                \nasynchronous:\n \ntrue\n\n                \nsource:\n \nassets\n.\nbanner\n \n||\n \nassets\n.\nsteam\n \n||\n \nassets\n.\nboxFront\n\n                \nsourceSize\n \n{\n \nwidth:\n \n256\n;\n \nheight:\n \n256\n \n}\n\n            \n}\n\n        \n}\n\n    \n}\n\n\n    \nRectangle\n \n{\n\n        \nid: selectionMarker\n\n\n        \nwidth:\n \nvpx\n(\n240\n)\n\n        \nheight:\n \nvpx\n(\n135\n)\n\n\n        \ncolor:\n \ntransparent\n\n        \nborder\n \n{\n \nwidth:\n \n3\n;\n \ncolor:\n \nwhite\n \n}\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.topMargin:\n \nvpx\n(\n45\n)\n\n    \n}\n\n\n}\n\n\n\n\n\nIt's a bit long, but then again this theme had some complex layouting going on. A possible separation to multiple QML files would look like this:\n\n\nScreenshot.qml\nimport\n \nQtQuick\n \n2.0\n\n\nimport\n \nQtGraphicalEffects\n \n1.0\n\n\n\nImage\n \n{\n\n    \nasynchronous:\n \ntrue\n\n    \nfillMode:\n \nImage\n.\nPreserveAspectFit\n\n\n    \nsource:\n \napi\n.\ncurrentGame\n.\nassets\n.\nscreenshots\n[\n0\n]\n \n||\n \n\n    \nsourceSize\n \n{\n \nwidth:\n \n512\n;\n \nheight:\n \n512\n \n}\n\n\n    \nLinearGradient\n \n{\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \n0.25\n\n        \nheight:\n \nparent\n.\nheight\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n\n        \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n        \nend:\n \nQt\n.\npoint\n(\nwidth\n,\n \n0\n)\n\n        \ngradient:\n \nGradient\n \n{\n\n            \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n            \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n        \n}\n\n    \n}\n\n\n    \nLinearGradient\n \n{\n\n        \nwidth:\n \nparent\n.\nwidth\n\n        \nheight:\n \nvpx\n(\n50\n)\n\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nstart:\n \nQt\n.\npoint\n(\n0\n,\n \nheight\n)\n\n        \nend:\n \nQt\n.\npoint\n(\n0\n,\n \n0\n)\n\n        \ngradient:\n \nGradient\n \n{\n\n            \nGradientStop\n \n{\n \nposition:\n \n0.0\n;\n \ncolor:\n \nblack\n \n}\n\n            \nGradientStop\n \n{\n \nposition:\n \n1.0\n;\n \ncolor:\n \ntransparent\n \n}\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nTitle.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nText\n \n{\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\ntitle\n\n    \ncolor:\n \nwhite\n\n\n    \nfont.pixelSize:\n \nvpx\n(\n32\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n    \nfont.bold:\n \ntrue\n\n\n}\n\n\n\n\n\nRating.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nItem\n \n{\n\n    \nvisible:\n \napi\n.\ncurrentGame\n.\nrating\n \n \n0.0\n\n\n    \nheight:\n \nvpx\n(\n16\n)\n\n    \nwidth:\n \nheight\n \n*\n \n5\n\n\n    \nImage\n \n{\n\n        \nanchors.fill:\n \nparent\n\n\n        \nsource:\n \nassets/star_empty.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n    \nImage\n \n{\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n\n        \nwidth:\n \nparent\n.\nwidth\n \n*\n \napi\n.\ncurrentGame\n.\nrating\n\n        \nheight:\n \nparent\n.\nheight\n\n\n        \nsource:\n \nassets/star_filled.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nparent\n.\nheight\n;\n \nheight:\n \nparent\n.\nheight\n \n}\n\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n}\n\n\n\n\n\nReleaseYear.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nText\n \n{\n\n    \nvisible:\n \napi\n.\ncurrentGame\n.\nyear\n \n \n0\n\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\nyear\n\n    \ncolor:\n \nwhite\n\n    \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n}\n\n\n\n\n\nMultiplayerIcon.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nRectangle\n \n{\n\n    \nwidth:\n \nsmileys\n.\nwidth\n \n+\n \nvpx\n(\n8\n)\n\n    \nheight:\n \nsmileys\n.\nheight\n \n+\n \nvpx\n(\n5\n)\n\n\n    \ncolor:\n \n#555\n\n    \nradius:\n \nvpx\n(\n3\n)\n\n\n    \nvisible:\n \napi\n.\ncurrentGame\n.\nplayers\n \n \n1\n\n\n    \nImage\n \n{\n\n        \nid: smileys\n\n\n        \nwidth:\n \nvpx\n(\n13\n)\n \n*\n \napi\n.\ncurrentGame\n.\nplayers\n\n        \nheight:\n \nvpx\n(\n13\n)\n\n\n        \nanchors.centerIn:\n \nparent\n\n\n        \nsource:\n \nassets/smiley.svg\n\n        \nsourceSize\n \n{\n \nwidth:\n \nsmileys\n.\nheight\n;\n \nheight:\n \nsmileys\n.\nheight\n \n}\n\n\n        \nfillMode:\n \nImage\n.\nTileHorizontally\n\n        \nhorizontalAlignment:\n \nImage\n.\nAlignLeft\n\n    \n}\n\n\n}\n\n\n\n\n\nDescription.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nText\n \n{\n\n    \ntext:\n \napi\n.\ncurrentGame\n.\nsummary\n \n||\n \napi\n.\ncurrentGame\n.\ndescription\n\n    \ncolor:\n \nwhite\n\n    \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n    \nfont.family:\n \nglobalFonts\n.\nsans\n\n\n    \nwrapMode:\n \nText\n.\nWordWrap\n\n    \nhorizontalAlignment:\n \nText\n.\nAlignJustify\n\n    \nelide:\n \nText\n.\nElideRight\n\n\n}\n\n\n\n\n\nCollectionAxis.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nPathView\n \n{\n\n    \nid: collectionAxis\n\n\n    \nmodel:\n \napi\n.\ncollectionList\n.\nmodel\n\n    \ncurrentIndex:\n \napi\n.\ncollectionList\n.\nindex\n\n    \ndelegate:\n \nCollectionAxisDelegate\n \n{\n \n}\n\n\n    \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n    \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n    \nclip:\n \ntrue\n\n\n    \npathItemCount:\n \n1\n \n+\n \nMath\n.\nceil\n(\nheight\n \n/\n \nvpx\n(\n180\n))\n\n    \npath:\n \nPath\n \n{\n\n        \nstartX:\n \ncollectionAxis\n.\nwidth\n \n*\n \n0.5\n\n        \nstartY:\n \nvpx\n(\n180\n)\n \n*\n \n-\n0.5\n\n        \nPathLine\n \n{\n\n            \nx:\n \ncollectionAxis\n.\npath\n.\nstartX\n\n            \ny:\n \ncollectionAxis\n.\npath\n.\nstartY\n \n+\n \ncollectionAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n180\n)\n\n        \n}\n\n    \n}\n\n    \npreferredHighlightBegin:\n \n1\n \n/\n \npathItemCount\n\n    \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n\n    \nfocus:\n \ntrue\n\n    \nKeys.onUpPressed:\n \napi\n.\ncollectionList\n.\ndecrementIndex\n()\n\n    \nKeys.onDownPressed:\n \napi\n.\ncollectionList\n.\nincrementIndex\n()\n\n    \nKeys.onLeftPressed:\n \ncurrentItem\n.\nselectPrev\n()\n\n    \nKeys.onRightPressed:\n \ncurrentItem\n.\nselectNext\n()\n\n    \nKeys.onReturnPressed:\n \napi\n.\ncurrentGame\n.\nlaunch\n()\n\n\n}\n\n\n\n\n\nCollectionAxisDelegate.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nItem\n \n{\n\n    \nfunction\n \nselectNext\n()\n \n{\n\n        \nmodelData\n.\ngameList\n.\nincrementIndex\n();\n\n    \n}\n\n\n    \nfunction\n \nselectPrev\n()\n \n{\n\n        \nmodelData\n.\ngameList\n.\ndecrementIndex\n();\n\n    \n}\n\n\n    \nwidth:\n \nPathView\n.\nview\n.\nwidth\n\n    \nheight:\n \nvpx\n(\n180\n)\n\n\n    \nopacity:\n \nPathView\n.\nisCurrentItem\n \n?\n \n1.0\n \n:\n \n0.6\n\n    \nBehavior\n \non\n \nopacity\n \n{\n \nNumberAnimation\n \n{\n \nduration:\n \n150\n \n}\n \n}\n\n\n    \nText\n \n{\n\n        \nid: label\n\n\n        \ntext:\n \nmodelData\n.\nname\n \n||\n \nmodelData\n.\ntag\n\n        \ncolor:\n \nwhite\n\n        \nfont.pixelSize:\n \nvpx\n(\n18\n)\n\n        \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \nfont.bold:\n \ntrue\n\n\n        \nheight:\n \nvpx\n(\n45\n)\n\n        \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n    \n}\n\n\n    \nPathView\n \n{\n\n        \nid: gameAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nlabel\n.\nbottom\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n\n        \nmodel:\n \nmodelData\n.\ngameList\n.\nmodel\n\n        \ncurrentIndex:\n \nmodelData\n.\ngameList\n.\nindex\n\n        \ndelegate:\n \nGameAxisDelegate\n \n{\n \n}\n\n\n        \nsnapMode:\n \nPathView\n.\nSnapOneItem\n\n        \nhighlightRangeMode:\n \nPathView\n.\nStrictlyEnforceRange\n\n\n        \npathItemCount:\n \n2\n \n+\n \nMath\n.\nceil\n(\nwidth\n \n/\n \nvpx\n(\n250\n))\n\n        \npath:\n \nPath\n \n{\n\n            \nstartX:\n \nvpx\n(\n220\n)\n \n-\n \nvpx\n(\n250\n)\n \n*\n \n2\n\n            \nstartY:\n \nvpx\n(\n135\n)\n \n*\n \n0.5\n\n            \nPathLine\n \n{\n\n                \nx:\n \ngameAxis\n.\npath\n.\nstartX\n \n+\n \ngameAxis\n.\npathItemCount\n \n*\n \nvpx\n(\n250\n)\n\n                \ny:\n \ngameAxis\n.\npath\n.\nstartY\n\n            \n}\n\n        \n}\n\n        \npreferredHighlightBegin:\n \n2\n \n/\n \npathItemCount\n\n        \npreferredHighlightEnd:\n \npreferredHighlightBegin\n\n    \n}\n\n\n}\n\n\n\n\n\nGameAxisDelegate.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nItem\n \n{\n\n    \nwidth:\n \nvpx\n(\n240\n)\n\n    \nheight:\n \nvpx\n(\n135\n)\n\n\n    \nRectangle\n \n{\n\n        \nanchors.fill:\n \nparent\n\n        \ncolor:\n \n#333\n\n        \nvisible:\n \nimage\n.\nstatus\n \n!==\n \nImage\n.\nReady\n\n\n        \nText\n \n{\n\n            \ntext:\n \nmodelData\n.\ntitle\n\n\n            \nanchors.fill:\n \nparent\n\n            \nanchors.margins:\n \nvpx\n(\n12\n)\n\n\n            \nhorizontalAlignment:\n \nText\n.\nAlignHCenter\n\n            \nverticalAlignment:\n \nText\n.\nAlignVCenter\n\n            \nwrapMode:\n \nText\n.\nWrap\n\n\n            \ncolor:\n \nwhite\n\n            \nfont.pixelSize:\n \nvpx\n(\n16\n)\n\n            \nfont.family:\n \nglobalFonts\n.\nsans\n\n        \n}\n\n    \n}\n\n\n    \nImage\n \n{\n\n        \nid: image\n\n\n        \nanchors.fill:\n \nparent\n\n        \nvisible:\n \nsource\n\n\n        \nfillMode:\n \nImage\n.\nPreserveAspectCrop\n\n\n        \nasynchronous:\n \ntrue\n\n        \nsource:\n \nassets\n.\nbanner\n \n||\n \nassets\n.\nsteam\n \n||\n \nassets\n.\nboxFront\n\n        \nsourceSize\n \n{\n \nwidth:\n \n256\n;\n \nheight:\n \n256\n \n}\n\n    \n}\n\n\n}\n\n\n\n\n\nSelectionMarker.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nRectangle\n \n{\n\n    \nwidth:\n \nvpx\n(\n240\n)\n\n    \nheight:\n \nvpx\n(\n135\n)\n\n\n    \ncolor:\n \ntransparent\n\n    \nborder\n \n{\n \nwidth:\n \n3\n;\n \ncolor:\n \nwhite\n \n}\n\n\n}\n\n\n\n\n\ntheme.qml\nimport\n \nQtQuick\n \n2.0\n\n\n\nFocusScope\n \n{\n\n\n    \nScreenshot\n \n{\n\n        \nid: screenshot\n\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.bottom:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottomMargin:\n \nvpx\n(\n-\n45\n)\n\n    \n}\n\n\n    \nTitle\n \n{\n\n        \nid: title\n\n\n        \nanchors.top:\n \nparent\n.\ntop\n\n        \nanchors.topMargin:\n \nvpx\n(\n42\n)\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n    \n}\n\n\n    \nRow\n \n{\n\n        \nid: detailsRow\n\n\n        \nanchors.top:\n \ntitle\n.\nbottom\n\n        \nanchors.topMargin:\n \nvpx\n(\n5\n)\n\n        \nanchors.left:\n \ntitle\n.\nleft\n\n\n        \nspacing:\n \nvpx\n(\n10\n)\n\n\n        \nRating\n \n{\n \n}\n\n        \nReleaseYear\n \n{\n \n}\n\n        \nMultiplayerIcon\n \n{\n \n}\n\n        \nDeveloper\n \n{\n \n}\n\n    \n}\n\n\n    \nDescription\n \n{\n\n        \nid: description\n\n\n        \nanchors\n \n{\n\n            \nleft:\n \ndetailsRow\n.\nleft\n\n            \nright:\n \nparent\n.\nhorizontalCenter\n\n            \ntop:\n \ndetailsRow\n.\nbottom\n;\n \ntopMargin:\n \nvpx\n(\n20\n)\n\n            \nbottom:\n \nparent\n.\nverticalCenter\n;\n \nbottomMargin:\n \nvpx\n(\n32\n)\n\n        \n}\n\n    \n}\n\n\n    \nCollectionAxis\n \n{\n\n        \nid: collectionAxis\n\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.right:\n \nparent\n.\nright\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.bottom:\n \nparent\n.\nbottom\n\n    \n}\n\n\n    \nSelectionMarker\n \n{\n\n        \nanchors.left:\n \nparent\n.\nleft\n\n        \nanchors.leftMargin:\n \nvpx\n(\n100\n)\n\n        \nanchors.top:\n \nparent\n.\nverticalCenter\n\n        \nanchors.topMargin:\n \nvpx\n(\n45\n)\n\n    \n}\n\n\n}\n\n\n\n\n\ntheme.cfg\nname\n: \nFlixnet tutorial\n\n\nauthor\n: \nM\u00e1ty\u00e1s Mustoha", 
            "title": "Example -- Flixnet theme"
        }, 
        {
            "location": "/themes/example-flixnet/#step-by-step-flixnet-theme", 
            "text": "In this tutorial, we'll implement the theme above from scratch, inspired by the UI of a certain video streaming company. While the guide is intended to be beginner-friendly, this is a somewhat complex project, so you might want to be familiar with the QML basics and dynamic layout elements (see the  QML tutorials ).  If we simplify it a bit, here's how its structure and navigation looks like:   As you can see, there are two main axes of motion:   a horizontal  game axis  for each collection's games  a vertical  collection axis  for selecting a collection   Each row can be individually scrolled, and the currently selected game is the topmost row's first (fully visible) item. Furthermore, the rows themselves can also be scrolled vertically. This kind of layout makes the theme a bit complex, but other than these axes the rest of the theme seems to be simple enough.  Let's get started!", 
            "title": "Step-by-step: Flixnet theme"
        }, 
        {
            "location": "/themes/example-flixnet/#initial-files", 
            "text": "I'm on Linux, so my  theme directory  is at  ~/.config/pegasus-frontend/themes . I'm creating a new directory called  flixnet-tutorial , and in it my  theme.cfg , like this:  name :  Flixnet tutorial  author :  M\u00e1ty\u00e1s Mustoha   and the basic  theme.qml :  import   QtQuick   2.0  FocusScope   {  }   Now I open Pegasus and select this theme on the Settings screen. I'll keep Pegasus open during the development, and refresh the theme with the  F5  key. I also open the main log file  ~/.config/pegasus-frontend/lastrun.log  which will tell me if I've made any errors in the QML file.   Tip  You can use whatever text editor you like. Qt Creator is cross platform, has good auto-complete and syntax highlight features. For a more lightweight editor, Sublime Text with the QML package, Atom or Notepad++ could be used, among others.    Note  You might see  .qmlc  files popping up in your theme's directory. These are cache files, generated for faster loading. When copying the theme to a different machine, you don't have to bring them, they'll automatically get generated the next time you launch Pegasus.", 
            "title": "Initial files"
        }, 
        {
            "location": "/themes/example-flixnet/#initial-layout", 
            "text": "Let's start with the hard part, the layout on the bottom half. This is a vertically scrollable list of horizontally scrollable lists, each containing boxes for the games. Because collections are what contain the games, I'll first start making the vertical axis that selects the collection, and then add the horizontal game selection after that. I'll write a rough initial structure first, as once you have the basic layout done, you can tweak the elements as much as you want.", 
            "title": "Initial layout"
        }, 
        {
            "location": "/themes/example-flixnet/#some-planning", 
            "text": "The game selection layout will take the whole lower half of the screen. On a standard 16:9 screen I want to show 2 rows of games to appear, and incrementally more on screens with smaller aspect ratios. Using Pegasus' virtual pixel values, I can design the theme for a screen with at least 720px height, and the values will scale appropriately for other resolutions. Based on that,   if the height of the list is half the screen's height, I'll have 360px at least  if I want to show two rows, one row's full height in the list will be 180px  I'll use 18px font size for the collection's name  to have some space around the text, I'll use 250% line height; that's 45px out of the 180px so far  I'm left with 135px height to use for the game boxes  the game boxes will have a 16:9 aspect ratio, so their width will be 240px   Ok, let's start coding!", 
            "title": "Some planning"
        }, 
        {
            "location": "/themes/example-flixnet/#vertical-axis", 
            "text": "A simple type for laying out a variable amount of items with one of them being selected is  ListView . I set it up so it takes the whole lower half of the screen:  import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n     }  }   One element of this collection axis will have 180px height and the width is the whole width of the screen. I'll create a placeholder for now and add a fake  model  (a series of numbers) for testing (so you can see that they indeed come in order, and the ListView has the correct amount of items):  import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom           model:   10   // just some random number           delegate:   Rectangle   {               width:   ListView . view . width \n             height:   vpx ( 180 ) \n\n             color:   blue \n         } \n     }  }   If you now refresh Pegasus, you'll see the lower half of the screen turned blue. Yay!   vpx  The function  vpx  is what you can use for virtual pixel values. It scales up or down the pixel value you put into it depending on the actual screen resolution.    delegate  The visual element of a list is called  delegate . For every data item of the  model  (in this case, for every number between 0 and 9), a delegate will be created.   The code looks good so far, I'll just make a small change: the delegate will likely get more complex later, so to make it easier to read, I'll move it out into a separate  Component :  import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n\n         model:   10           delegate:   collectionAxisDelegate       } \n\n     Component   {           id: collectionAxisDelegate  \n         Rectangle   { \n             width:   ListView . view . width \n             height:   vpx ( 180 ) \n\n             color:   blue \n         } \n     }  }    Tip  Component  is a special element that defines a QML document. Actually, you could even move the  Rectangle  to a new file (eg.  CollectionAxisDelegate.qml ) and use the file's name to set the delegate (eg.  delegate:   CollectionAxisDelegate   {   } ).", 
            "title": "Vertical axis"
        }, 
        {
            "location": "/themes/example-flixnet/#horizontal-axis", 
            "text": "The rows of the collection axis will consist of two things: a  Text  label that shows the collection's name and a  ListView  that shows its games. Because a  Component  can have only one child, I'll turn the  Rectangle  into an  Item  (an otherwise invisible container), and put a  Text  and a  ListView  into it.   Note  Just as individual QML files can have only one root element,  Component  can have only one child.   First I'll add the collection label:  import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         // ... \n     } \n\n     Component   { \n         id: collectionAxisDelegate           Item   {               width:   ListView . view . width \n             height:   vpx ( 180 )               Text   {                   id: label \n\n                 // `modelData` is the item in the list s model \n                 // for which this delegate is created for; \n                 // in this case a number between 0-9 \n                 text:   modelData \n\n                 // white, bold 18px font, using Pegasus  default font family \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n                 font.bold:   true \n\n                 // make the line height 45px high \n                 // and center the text vertically in it \n                 height:   vpx ( 45 ) \n                 verticalAlignment:   Text . AlignVCenter \n             } \n         } \n     }  }   If you refresh the theme in Pegasus, you'll now see the numbers \"0\" and \"1\" at where we'd expect the labels.  I'll now add the horizontal  ListView :  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         width:   ListView . view . width \n         height:   vpx ( 180 ) \n\n         Text   { \n             id: label \n             // ... \n         }           ListView   {               id: gameAxis \n\n             // span from left to right, from the label s bottom to the row s bottom \n             anchors.left:   parent . left \n             anchors.right:   parent . right \n             anchors.top:   label . bottom \n             anchors.bottom:   parent . bottom \n\n             // this one goes horizontal! \n             orientation:   ListView . Horizontal \n         } \n     }  }   We'll need a model and a delegate item to actually see something. Let's create some dummy items:  import   QtQuick   2.0  FocusScope   { \n     // ... \n\n     Component   { \n         id: collectionAxisDelegate \n\n         Item   { \n             // ... \n\n             ListView   { \n                 id: gameAxis \n\n                 anchors.left:   parent . left \n                 anchors.right:   parent . right \n                 anchors.top:   label . bottom \n                 anchors.bottom:   parent . bottom \n\n                 orientation:   ListView . Horizontal                   model:   20                   delegate:   gameAxisDelegate                   spacing:   vpx ( 10 )   // some spacing to make it look fancy               } \n         } \n     } \n\n     // this is one item of the horizontal axis, ie. a  game box       Component   {           id: gameAxisDelegate \n\n         Rectangle   { \n             // as we calculated previously \n             width:   vpx ( 240 ) \n             height:   vpx ( 135 ) \n\n             color:   green \n\n             Text   { \n                 // will become a number between 0-19 \n                 text:   modelData \n             } \n         } \n     }  }   And here's how it should look so far:   Not the most beautiful yet, however with this we're done with the basics of the main layout. From now on we'll just have tweak these lists and delegates, then add some simple components for the metadata.", 
            "title": "Horizontal axis"
        }, 
        {
            "location": "/themes/example-flixnet/#the-code-so-far-1", 
            "text": "Here's the whole code so far (without comments to save space):  The code so far #1 import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n\n         model:   10 \n         delegate:   collectionAxisDelegate \n     } \n\n     Component   { \n         id: collectionAxisDelegate \n\n         Item   { \n             width:   ListView . view . width \n             height:   vpx ( 180 ) \n\n             Text   { \n                 id: label \n\n                 text:   modelData \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n\n                 height:   vpx ( 45 ) \n                 verticalAlignment:   Text . AlignVCenter \n             } \n\n             ListView   { \n                 id: gameAxis \n\n                 anchors.left:   parent . left \n                 anchors.right:   parent . right \n                 anchors.top:   label . bottom \n                 anchors.bottom:   parent . bottom \n\n                 orientation:   ListView . Horizontal \n\n                 model:   20 \n                 delegate:   gameAxisDelegate \n                 spacing:   vpx ( 10 ) \n             } \n         } \n     } \n\n     Component   { \n         id: gameAxisDelegate \n\n         Rectangle   { \n             width:   vpx ( 240 ) \n             height:   vpx ( 135 ) \n\n             color:   green \n\n             Text   { \n                 text:   modelData \n             } \n         } \n     }  }", 
            "title": "The code so far #1"
        }, 
        {
            "location": "/themes/example-flixnet/#navigation", 
            "text": "You might have noticed that the components react already to mouse drag or scroll, but keyboard and gamepad input doesn't work yet. Let's fix this.", 
            "title": "Navigation"
        }, 
        {
            "location": "/themes/example-flixnet/#vertical-scroll", 
            "text": "Simply add  focus:   true  to the collection axis:  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     focus:   true  }   You can now scroll the bars with  Up  and  Down , but... it's kind of weird right now. It'd be better for the items to \"snap\" to their place, to scroll to the next item when we press a button. This can be fixed with the  snapMode  and  highlightRangeMode  properties: setting  snapMode  keeps the elements organized when scrolling the list as a whole, while  highlightRangeMode  will make sure the selection follows the scrolling (that is, when you press  Up  or  Down , you actually select the next or previous element, not just view a different part of the list).  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     snapMode:   ListView . SnapOneItem \n     highlightRangeMode:   ListView . StrictlyEnforceRange \n\n     focus:   true  }   There, much better now.   Tip  Setting up the keyboard input also makes gamepads work. Check the  Controls  page to see how are they related.   By default, every delegate that is at least partially in the ListView's area is fully drawn. To make sure only the rows in the lower half of the screen are visible, I set  clip  on the  ListView :  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     snapMode:   ListView . SnapOneItem \n     highlightRangeMode:   ListView . StrictlyEnforceRange       clip:   true  \n     focus:   true  }", 
            "title": "Vertical scroll"
        }, 
        {
            "location": "/themes/example-flixnet/#horizontal-scroll", 
            "text": "We have a somewhat complex layout -- scrollable items inside a scrollable item; we can't just set  focus: true  here, since that'd mean we set it for  each  row, and end up with scrolling one we don't want. Hovewer, every  ListView  has select-next and select-previous function we can use ( incrementCurrentIndex() ,  decrementCurrentIndex() ), and the currently selected item can be accessed through  currentItem .  In this case, the  currentItem  of  collectionAxis  will be the  Item  element inside  collectionAxisDelegate :  Component   { \n     id: collectionAxisDelegate \n\n     // this one! \n     Item   { \n         width:   ListView . view . width \n         height:   vpx ( 180 ) \n\n         Text   { \n             id: label \n\n             // ... \n         } \n\n         ListView   { \n             id: gameAxis \n\n             // ... \n         } \n     }  }   But how can we access the ListView,  gameAxis  of the Item? Turns out we can't just use its  id , as it's not accessible by external element (we'll get an error about  gameAxis  being undefined). Function definitions and  property  members, however,  can  be accessed. For now, I'll simply create an  alias  property for the horizontal axis:  Component   { \n     id: collectionAxisDelegate \n\n     Item   {           property   alias   axis:   gameAxis  \n         width:   ListView . view . width \n         height:   vpx ( 180 ) \n\n         Text   { \n             id: label \n\n             // ... \n         } \n\n         ListView   { \n             id: gameAxis \n\n             // ... \n         } \n     }  }   We can now access the game axis of the current collection as  currentItem.axis  (see below).   Note  Yes, you can also write it like  property alias gameAxis: gameAxis , I simply preferred the different name in this case.   Combining the ListView functions,  currentItem  and manual keyboard handling ( Keys ), we can now make the horizontal scrolling work with:  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     focus:   true       Keys.onLeftPressed:   currentItem . axis . decrementCurrentIndex ()       Keys.onRightPressed:   currentItem . axis . incrementCurrentIndex ()  }   ...which, similarly to the vertical axis, initially scrolls in a not so nice way. Fix it like previously, but in the delegate:  ListView   { \n     id: gameAxis \n\n     anchors.left:   parent . left \n     anchors.right:   parent . right \n     anchors.top:   label . bottom \n     anchors.bottom:   parent . bottom \n\n     orientation:   ListView . Horizontal \n\n     model:   100 \n     delegate:   gameAxisDelegate \n     spacing:   vpx ( 10 )       snapMode:   ListView . SnapOneItem       highlightRangeMode:   ListView . StrictlyEnforceRange  }   And now both directions should scroll finely!   Tip  To see that the current item indeed changes, you could set the  color  of the  gameAxisDelegate 's  Rectangle  to:  color:   ListView . isCurrentItem   ?   orange   :   green", 
            "title": "Horizontal scroll"
        }, 
        {
            "location": "/themes/example-flixnet/#left-margin", 
            "text": "There's a small margin on the left that shows the game before the currently selected one. We don't want to reduce the size of the horizontal  ListView s (they should fill the whole width of the screen), we just want to move the currently selected item a little bit right. For this, we can use the  preferredHighlightBegin / End  members of the  ListView s: they can be used to define a fixed position range (in pixels) where the currently selected element should reside.  I'll set a 100px offset like this:  ListView   { \n     id: gameAxis \n\n     // ... \n\n     preferredHighlightBegin:   vpx ( 100 ) \n     preferredHighlightEnd:   preferredHighlightBegin   +   vpx ( 240 )   // the width of one game box  }    Help  preferredHighlightBegin  and  preferredHighlightEnd  almost always come in pair, and  End  must be greater or equal than  Begin  to have their effect applied.   We also need to move the collection label too. As it's just a regular Text element, I'll simply set its left anchor and a margin on it:  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         // ... \n\n         Text   { \n             id: label \n\n             // ...               anchors.left:   parent . left               anchors.leftMargin:   vpx ( 100 )           } \n\n         ListView   { \n             id: gameAxis \n\n             // ... \n         } \n     }  }    Note  The anchor margin is only applied if the anchor itself is defined.    Tip  You can also use the Text item's  leftPadding  property. This feature was added in Qt 5.6 (as mentioned in the  official documentation ), so you'll need to change the  import  command on the top of the QML file to  import QtQuick 2.6  or higher (Pegasus comes with Qt 5.9 at the moment).", 
            "title": "Left margin"
        }, 
        {
            "location": "/themes/example-flixnet/#using-api-data", 
            "text": "Finally, the time has come to replace the placeholder elements with actual content. Let's start by using the real collection data. According to the  API reference , collections can be accessed and selected through  api.collectionList : we can use  api.collectionList.model  as the  model  of a ListView (or any other View) and  index  as the  currentIndex  of it. We can then call  increaseIndex()  and  decreaseIndex()  to move to the next and previous items (or by setting the  index  manually).", 
            "title": "Using API data"
        }, 
        {
            "location": "/themes/example-flixnet/#vertical-axis_1", 
            "text": "First, find the ListView for the collection axis and set its  model  property. Then add the  currentIndex  line to bind it to the index from the API. Finally, call  increaseIndex()  and  decreaseIndex()  when  Up  and  Down  is pressed:  ListView   { \n     id: collectionAxis \n\n     // ...       model:   api . collectionList . model       currentIndex:   api . collectionList . index       delegate:   collectionAxisDelegate \n\n     // ... \n\n     focus:   true       Keys.onUpPressed:   api . collectionList . decrementIndex ()       Keys.onDownPressed:   api . collectionList . incrementIndex ()       Keys.onLeftPressed:   currentItem . axis . decrementCurrentIndex () \n     Keys.onRightPressed:   currentItem . axis . incrementCurrentIndex ()  }    Warning  Incrementing/decrementing the  currentIndex  property of a ListView (eg. by navigation) has no effect on the bound value (in this case  api.collectionList.index ); this is why I call  incrementIndex() / decrementIndex()  manually on  Up  and  Down . We'll also modify the  Left / Right  keys very soon.    Tip  Instead of using  Keys  and increment/decrement, you can also set  api.collectionList.index  manually, eg.  onCurrentIndexChanged:   api . collectionList . index   =   currentIndex    Help  incrementIndex()  and  decrementIndex()  wraps around (incrementing the index at the last item will make it jump to the first one). If you don't want them to wrap, you can use  incrementIndexNoWrap()  and  decrementIndexNoWrap()  instead.   Previously the  model  was set to  10 , and so the  modelData  available in the delegates was a number between 0 and 9. With  model  set to  api.collectionList.model , the  modelData  will be a  Collection  object.  A  Collection  always has a  tag  (a short, unique label) and possibly a proper  name . We should show the  name  if it's available, and fall back to the  tag  if it's not defined. We can do it like this:  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         // ... \n\n         Text   { \n             id: label               text:   modelData . name   ||   modelData . tag               color:   white \n             font.pixelSize:   vpx ( 18 ) \n             font.family:   globalFonts . sans \n\n             // ... \n         } \n\n         ListView   { \n             id: gameAxis \n\n             // ... \n         } \n     }  }    Tip  If the name of the  modelData  property you use (in this case  name  and  tag ) don't collide with other properties of the object, it's not required to type out  modelData : you can simply write  text: name || tag .   After a refresh, you should see the names of collections appearing in Pegasus.", 
            "title": "Vertical axis"
        }, 
        {
            "location": "/themes/example-flixnet/#horizontal-axis_1", 
            "text": "Now let's show the game titles in the horizontal rectangles. Every  Collection  has a  gameList  member we can use to access the list of games associated with the collection. Similarly to  collectionList ,  gameList  also has  model  and  index  properties, so let's use them in the horizontal axis ( collectionAxisDelegate ):  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         // ... \n\n         Text   { \n             id: label \n\n             // ... \n         } \n\n         ListView   { \n             id: gameAxis \n\n             // ...               model:   modelData . gameList . model               currentIndex:   modelData . gameList . index               delegate:   gameAxisDelegate \n             spacing:   vpx ( 10 ) \n\n             // ... \n         } \n     }  }   Just like with the vertical axis, I'll use  incrementIndex()  and  decrementIndex()  again. Currently we access the horizontal ListView of the collection delegate via an  alias  property, and call the ListView's  incrementCurrentIndex()  and  decrementCurrentIndex()  methods by  Keys.onLeftPressed  and  Keys.onRightPressed  of the collection axis. Instead, we should call the index changing functions of the API, of the Collection belonging to a delegate (ie.  modelData ).  As usual, there are more than one way to do it, I'll show how you can use JavaScript functions this time. First, find the  property alias axis: gameAxis  line  Component   { \n     id: collectionAxisDelegate \n\n     Item   {           property   alias   axis:   gameAxis   // this one  \n         // ... \n\n         Text   {   ...   } \n         ListView   {   ...   } \n     }  }   then delete and replace it with the  selectNext()  and  selectPrev()  functions, with the increment/decrement methods of the API in their body:  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         function   selectNext ()   { \n             modelData . gameList . incrementIndex (); \n         } \n\n         function   selectPrev ()   { \n             modelData . gameList . decrementIndex (); \n         } \n\n\n         // ... \n\n         Text   {   ...   } \n         ListView   {   ...   } \n     }  }   Then you can call the new functions in the  collectionAxis  like this:  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     model:   api . collectionList . model \n     currentIndex:   api . collectionList . index \n     delegate:   collectionAxisDelegate \n\n     // ... \n\n     focus:   true \n     Keys.onUpPressed:   api . collectionList . decrementIndex () \n     Keys.onDownPressed:   api . collectionList . incrementIndex ()       Keys.onLeftPressed:   currentItem . selectPrev ()       Keys.onRightPressed:   currentItem . selectNext ()  }   And now the Views scroll properly, with the real data!", 
            "title": "Horizontal axis"
        }, 
        {
            "location": "/themes/example-flixnet/#game-items", 
            "text": "With the previous changes,  gameAxisDelegate  is now a visual representation for a Game element. A Game always has a  title , so we can simply set it as the text:  Component   { \n     id: gameAxisDelegate \n\n     Rectangle   { \n         width:   vpx ( 240 ) \n         height:   vpx ( 135 ) \n\n         color:   green \n\n         Text   {               text:   modelData . title           } \n     }  }    Help  The  model  of the  vertical  ListView was a list of  Collection s, so the  modelData  received by a delegate of that ListView (one whole horizontal row) is one  Collection  object.  The  model  of these  horizontal  ListViews is a list of  Game s, so a delegate of the horizontal ListViews will see a  Game  in its  modelData .   And now the game names also show up in Pegasus:", 
            "title": "Game items"
        }, 
        {
            "location": "/themes/example-flixnet/#launching-games", 
            "text": "Now that the game selection items are in sync with the API, we can actually launch games! To start the currently selected game, simply call  api.currentGame.launch()  when  Enter  is pressed:  ListView   { \n     id: collectionAxis \n\n     // ... \n\n     focus:   true \n     Keys.onUpPressed:   api . collectionList . decrementIndex () \n     Keys.onDownPressed:   api . collectionList . incrementIndex () \n     Keys.onLeftPressed:   currentItem . selectPrev () \n     Keys.onRightPressed:   currentItem . selectNext ()       Keys.onReturnPressed:   api . currentGame . launch ()  }    Help  Careful not to confuse the  onReturnPressed  and  onEnterPressed  calls: technically  Return  is the key next to the letters, while  Enter  is the one on the numeric keypad.    Note  onReturnPressed  is also triggered by pressing  /  on the gamepad.   And with this, technically our theme is fully functional!  Next step, let's make it pretty.", 
            "title": "Launching games"
        }, 
        {
            "location": "/themes/example-flixnet/#the-code-so-far-2", 
            "text": "The code so far #2 import   QtQuick   2.0  FocusScope   { \n\n     ListView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n\n         model:   api . collectionList . model \n         currentIndex:   api . collectionList . index \n         delegate:   collectionAxisDelegate \n\n         snapMode:   ListView . SnapOneItem \n         highlightRangeMode:   ListView . StrictlyEnforceRange \n         clip:   true \n\n         focus:   true \n         Keys.onUpPressed:   api . collectionList . decrementIndex () \n         Keys.onDownPressed:   api . collectionList . incrementIndex () \n         Keys.onLeftPressed:   currentItem . selectPrev () \n         Keys.onRightPressed:   currentItem . selectNext () \n         Keys.onReturnPressed:   api . currentGame . launch () \n     } \n\n     Component   { \n         id: collectionAxisDelegate \n\n         Item   { \n             function   selectNext ()   { \n                 modelData . gameList . incrementIndex (); \n             } \n\n             function   selectPrev ()   { \n                 modelData . gameList . decrementIndex (); \n             } \n\n             width:   ListView . view . width \n             height:   vpx ( 180 ) \n\n             Text   { \n                 id: label \n\n                 text:   modelData . name   ||   modelData . tag \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n\n                 height:   vpx ( 45 ) \n                 verticalAlignment:   Text . AlignVCenter \n\n                 anchors.left:   parent . left \n                 anchors.leftMargin:   vpx ( 100 ) \n             } \n\n             ListView   { \n                 id: gameAxis \n\n                 anchors.left:   parent . left \n                 anchors.right:   parent . right \n                 anchors.top:   label . bottom \n                 anchors.bottom:   parent . bottom \n\n                 orientation:   ListView . Horizontal \n\n                 model:   modelData . gameList . model \n                 currentIndex:   modelData . gameList . index \n                 delegate:   gameAxisDelegate \n                 spacing:   vpx ( 10 ) \n\n                 snapMode:   ListView . SnapOneItem \n                 highlightRangeMode:   ListView . StrictlyEnforceRange \n\n                 preferredHighlightBegin:   vpx ( 100 ) \n                 preferredHighlightEnd:   preferredHighlightBegin   +   vpx ( 240 ) \n             } \n         } \n     } \n\n     Component   { \n         id: gameAxisDelegate \n\n         Rectangle   { \n             width:   vpx ( 240 ) \n             height:   vpx ( 135 ) \n\n             color:   green \n\n             Text   { \n                 text:   modelData . title \n             } \n         } \n     }  }", 
            "title": "The code so far #2"
        }, 
        {
            "location": "/themes/example-flixnet/#fancy-game-boxes", 
            "text": "I'll now replace the green game boxes with something better to look at. There are two main cases we have to support:   if there is an available image for a game, the box should show that  if there is none, or the image has not loaded yet, the box should show a gray rectangle, with the game's title in the center   So  gameAxisDelegate  is our game box that right now contains a green rectangle. I'll turn that into an Item, and, for the two cases above, I'll add an initial gray Rectangle and Image:  Component   { \n     id: gameAxisDelegate \n\n     Item   { \n         width:   vpx ( 240 ) \n         height:   vpx ( 135 ) \n\n         Rectangle   { \n             anchors.fill:   parent \n             color:   #333 \n         } \n\n         Image   { \n             id: image \n\n             anchors.fill:   parent \n         } \n     }  }   So which image asset should we use? A game box is a rectangle with 16:9 aspect ratio, so the  banner  would be perfect for this. However, since every asset is potentially missing, we should consider showing other images and provide multiple fallbacks. If we don't have a  banner , the next similarly sized one is the  steam  (\"grid icon\") asset. Because it's wider than 16:9, we'll need to crop it if we don't want black bars or squashed/scretched images (though you might prefer that). If neither image is available, I'll use  boxFront  as it tends to be commonly available.  Let's extend the Image object created previously:  Image   { \n     id: image \n\n     anchors.fill:   parent \n     visible:   source \n\n     // fill the whole area, cropping what lies outside \n     fillMode:   Image . PreserveAspectCrop \n\n     asynchronous:   true \n     source:   assets . banner   ||   assets . steam   ||   assets . boxFront \n     sourceSize   {   width:   256 ;   height:   256   }  }   I've also made some optimizations here:   I've set  asynchronous: true : Loading image files takes some time depending on the device Pegasus runs on. If this property is set to false (default), the program will not react to input until the image is loaded (or noticed that it failed to load). If it's false, the image is loaded \"in the background\", and input is not blocked; hovewer depending on your theme, you might want to show something in its place for the users during this time (eg. a loading spinner or progress bar).  I've set  sourceSize : This sets the maximum size the image should occupy in the memory. The  official documentation  describes this in detail.  I've set  visible: source , that is, if the  source  is empty (neither  banner ,  steam  or  boxFront  is available), then ignore this whole object: no input will be ever handled here and there's nothing to see either.   With these changes, here's how it looks:   Starting to take shape, isn't it?  Let's finish the text-only fallback too:  Component   { \n     id: gameAxisDelegate \n\n     Item   { \n         width:   vpx ( 240 ) \n         height:   vpx ( 135 ) \n\n         Rectangle   { \n             anchors.fill:   parent \n             color:   #333               visible:   image . status   !==   Image . Ready                Text   {                   text:   modelData . title \n\n                 // define the text area \n                 anchors.fill:   parent \n                 anchors.margins:   vpx ( 12 ) \n\n                 // align to the center \n                 horizontalAlignment:   Text . AlignHCenter \n                 verticalAlignment:   Text . AlignVCenter \n                 wrapMode:   Text . Wrap \n\n                 // set the font \n                 color:   white \n                 font.pixelSize:   vpx ( 16 ) \n                 font.family:   globalFonts . sans \n             } \n         } \n\n         Image   { \n             id: image \n\n             // ... \n         } \n     }  }   And we're done with the game boxes!", 
            "title": "Fancy game boxes"
        }, 
        {
            "location": "/themes/example-flixnet/#looping-the-axes", 
            "text": "It'd be nice if all of the lists would loop around. You can do two kinds of loop:   make the list finite and when the last item is reached, jump back to the first one (and also in reverse direction)  make the list infinite and loop around (carousel style)   The first one can be done either by simply setting  keyNavigationWraps: true  for a ListView (and other Views) or using the API's default index increase/decrease functions. In our case though, the carousel option would look the best.  I won't lie, making a carousel-like looping list is annoying and overly complex for this use case; the situation might improve later by creating some easier-to-use custom types in Pegasus.", 
            "title": "Looping the axes"
        }, 
        {
            "location": "/themes/example-flixnet/#vertically", 
            "text": "So the problem is, ListView can't do carousels: the only type that can is PathView. As such, we'll turn our ListViews into PathViews next. Again, let's start with the vertical axis; here's a before-after comparison, with some comments after the code:  Before  ListView   { \n     id: collectionAxis \n\n     anchors.left:   parent . left \n     anchors.right:   parent . right \n     anchors.top:   parent . verticalCenter \n     anchors.bottom:   parent . bottom \n\n     model:   api . collectionList . model \n     currentIndex:   api . collectionList . index \n     delegate:   collectionAxisDelegate \n\n     snapMode:   ListView . SnapOneItem \n     highlightRangeMode:   ListView . StrictlyEnforceRange \n     clip:   true \n\n     focus:   true \n     Keys.onUpPressed:   api . collectionList . decrementIndex () \n     Keys.onDownPressed:   api . collectionList . incrementIndex () \n     Keys.onLeftPressed:   currentItem . selectPrev () \n     Keys.onRightPressed:   currentItem . selectNext () \n     Keys.onReturnPressed:   api . currentGame . launch ()  }   After  PathView   { \n     id: collectionAxis \n\n     anchors.left:   parent . left \n     anchors.right:   parent . right \n     anchors.top:   parent . verticalCenter \n     anchors.bottom:   parent . bottom \n\n     model:   api . collectionList . model \n     currentIndex:   api . collectionList . index \n     delegate:   collectionAxisDelegate       // changed ListView to PathView       snapMode:   PathView . SnapOneItem \n     highlightRangeMode:   PathView . StrictlyEnforceRange \n     clip:   true       // brand new: path definitions       pathItemCount:   1   +   Math . ceil ( height   /   vpx ( 180 )) \n     path:   Path   { \n         startX:   collectionAxis . width   *   0.5 \n         startY:   vpx ( 180 )   *   - 0.5 \n         PathLine   { \n             x:   collectionAxis . path . startX \n             y:   collectionAxis . path . startY   +   collectionAxis . pathItemCount   *   vpx ( 180 ) \n         } \n     } \n     preferredHighlightBegin:   1   /   pathItemCount \n     preferredHighlightEnd:   preferredHighlightBegin \n\n\n     focus:   true \n     Keys.onUpPressed:   api . collectionList . decrementIndex () \n     Keys.onDownPressed:   api . collectionList . incrementIndex () \n     Keys.onLeftPressed:   currentItem . selectPrev () \n     Keys.onRightPressed:   currentItem . selectNext () \n     Keys.onReturnPressed:   api . currentGame . launch ()  }    Warning  Don't forget to change ListView to PathView in the delegate ( collectionAxisDelegate 's  width  prop) too!   Unlike ListView that goes to one direction only, PathView can be used to create arbitrary paths on which the items will travel (curves, circles, all kinds of shapes). Because of that, some properties have to be provided in percentage or need manual calculations.    For PathViews,  pathItemCount  must be set (the default behaviour is to show all items). We should show as many rows as it fits into lower half or the screen (one row's height is 180px). The number of visible items thus will be [area height] / [row height], which I've rounded up using  Math.ceil , a standard JavaScript function. However, when there's a scrolling going on, there'll be actually  one more  row visible on the screen: the topmost row will gradually go  out  on the top of the lower area, while a new line is on its way  in  to appear on the bottom (see the animation below).    The  path  defines the trail the elements will follow  by their center point . Because there'll be one item that slides  out , and one that slides  in , the path extends above and below the PathView's area. The starting point of the axis (the center point of the item that will slide out) is horizontally ( startX ) the center of the screen (as the rows fill the width), and vertically ( startY ) above the top edge of the PathView (which would be 0) by 50% of the row height (where values are in pixels). From the start point, a linear path is created with  PathLine : I've set it so the end point is the same as the start except the  Y  coordinate, which is increased by the length ot the path, [number of max. visible items] * [item height].    The preferred highlight positions are in  percentage  for the PathView (as it can have any kind of shape, pixels don't always make sense). Again, the values define the range for the  center point  of the selected item. It defaults to 0 (start of the line), which in our case would be the center of the sliding out element, out of the visible area. I've set it to [1] / [item count], which will produce the center point of the  second  element on the path. Since I'm not planning to add any additional effects and such, just select one item, I've set the end of the range to the same as the beginning.     Structure of the vertical PathView. The red line marks the path, with red dots at positions 0/4 (top), 1/4, 2/4, 3/4 and 4/4 (bottom). The centers of the delegates are marked with blue.", 
            "title": "Vertically"
        }, 
        {
            "location": "/themes/example-flixnet/#horizontally", 
            "text": "The horizontal scrolling works similarly, with one important difference: there is a margin on the left of the currently selected item, where the previous one is halfway in the screen. We'll have to shift the whole path horizontally, and add 1 to the maximum number of visible items, and another one to account for scrolling, just like at the vertical axis.   I've set the left margin previously to 100 px and the width of a game box to be 240x135. In addition, there's a 10px spacing between the elements, giving the full width of a box to 250. The center of the current-item would be at 100 + 250/2 = 225 on the path, but to make it align with the collection label, I'll shift it 5px (half of the spacing) to the left, making the X center to be 220px. Then counting backwards, the previous-item will be at 220 - 250, and the one before that (the leftmost postion, where the new elements will appear when scrolling) at 220 - 250 * 2.  All right, let's change the horizontal ListView into a PathView:  Before :  ListView   { \n     id: gameAxis \n\n     anchors.left:   parent . left \n     anchors.right:   parent . right \n     anchors.top:   label . bottom \n     anchors.bottom:   parent . bottom \n\n     orientation:   ListView . Horizontal \n\n     model:   modelData . gameList . model \n     currentIndex:   modelData . gameList . index \n     delegate:   gameAxisDelegate \n     spacing:   vpx ( 10 ) \n\n     snapMode:   ListView . SnapOneItem \n     highlightRangeMode:   ListView . StrictlyEnforceRange \n\n     preferredHighlightBegin:   vpx ( 100 ) \n     preferredHighlightEnd:   preferredHighlightBegin   +   vpx ( 240 )  }   After :  PathView   { \n     id: gameAxis \n\n     anchors.left:   parent . left \n     anchors.right:   parent . right \n     anchors.top:   label . bottom \n     anchors.bottom:   parent . bottom       // removed orientation        // removed spacing       model:   modelData . gameList . model \n     currentIndex:   modelData . gameList . index \n     delegate:   gameAxisDelegate       // changed ListView to PathView       snapMode:   PathView . SnapOneItem \n     highlightRangeMode:   PathView . StrictlyEnforceRange       // brand new: path definitions       pathItemCount:   2   +   Math . ceil ( width   /   vpx ( 250 ))   // note the  2 ! \n     path:   Path   { \n         startX:   vpx ( 220 )   -   vpx ( 250 )   *   2 \n         startY:   vpx ( 135 )   *   0.5 \n         PathLine   { \n             x:   gameAxis . path . startX   +   gameAxis . pathItemCount   *   vpx ( 250 ) \n             y:   gameAxis . path . startY \n         } \n     }       // changed highlight range       preferredHighlightBegin:   2   /   pathItemCount \n     preferredHighlightEnd:   preferredHighlightBegin  }   And now both the horizontal and vertical axis loops as intended!   Tip  Typing out fixed values in pixels every time can be tedious and error prone. I'd recommend defining them as properties at the top of the object they're used in (eg.  property real boxHeight: vpx(135) ).", 
            "title": "Horizontally"
        }, 
        {
            "location": "/themes/example-flixnet/#the-rest-of-the-theme", 
            "text": "The upper half of the screen contains the metadata and preview image of the currently selected game. The components here will consist of simple elements, like Image and Text, which will make adding them way easier.  You can place all these elements directly under the main  FocusScope , or you could create a containing Item if you wish. I'll do the former to keep the guide shorter.  As for accessing the actual game data, we can use the properties of  api.currentGame  for metadata information, and  api.currentGame.assets  for the assets. You can find all the available fields listed in the  API reference .", 
            "title": "The rest of the theme"
        }, 
        {
            "location": "/themes/example-flixnet/#title", 
            "text": "A simple Text item in the upper left corner, with the left margin set to the same 100px we used at the game rows, and some additional margin at the top.  Text   { \n     id: title \n\n     text:   api . currentGame . title \n     color:   white \n\n     font.pixelSize:   vpx ( 32 ) \n     font.family:   globalFonts . sans \n     font.bold:   true \n\n     anchors.top:   parent . top \n     anchors.topMargin:   vpx ( 42 ) \n     anchors.left:   parent . left \n     anchors.leftMargin:   vpx ( 100 )  }", 
            "title": "Title"
        }, 
        {
            "location": "/themes/example-flixnet/#rating", 
            "text": "The rating will be displayed as a five-star bar, with some percentage of it colored according to the actual rating. This can be done with two simple, overlapping QML Images: draw five empty stars first, then over them, draw filled ones according to the rating. Kind of like a progress bar, except we're using stars for filling.  But first of all, I actuatlly draw two images for the stars, an empty one and a filled. Both have square size and transparent background. I create a new directory (eg.  assets ) in my theme folder and put them there.     star_empty.svg  star_filled.svg            Tip  I've used Inkscape for drawing the vector art; it has a built-in tool for drawing stars and other polygons.   Then I create the following Item. As the star image is a square, I make its width 5 times the height to hold the five stars horizontally. I make the empty-star Image fill this whole item, and set  fillMode: Image.TileHorizontally  to make the star repeat horizontally. For the filled-star image, I place it over the other one, and modify its width by the rating, which is provided as a number between  0.0  and  1.0  (0% and 100%).  Item   { \n     id: rating \n\n     // set the item s dimensions \n     height:   vpx ( 16 ) \n     width:   height   *   5 \n\n     // put it under the title \n     anchors.top:   title . bottom \n     anchors.left:   title . left \n\n\n     // the empty stars \n     Image   { \n         anchors.fill:   parent \n\n         source:   assets/star_empty.svg \n         sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n         // the most important bits! \n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     } \n\n\n     // the filled stars \n     Image   { \n         anchors.top:   parent . top \n         anchors.left:   parent . left \n\n         width:   parent . width   *   api . currentGame . rating   // !!! \n         height:   parent . height \n\n         source:   assets/star_filled.svg \n         sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     }  }    Note  Without  horizontalAlignment  the stars might not line up perfectly (the repeat will start from the center).   When a game has no rating defined,  game.rating  is  0.0 . Showing five empty stars for an otherwise good game might be a bit misleading, so I'll make the rating bar only appear when the  rating  is over 0%:  Item   { \n     id: rating       visible:   api . currentGame . rating     0.0  \n     // ...  }", 
            "title": "Rating"
        }, 
        {
            "location": "/themes/example-flixnet/#release-year", 
            "text": "Yet another simple Text element:  Text   { \n     id: year \n\n     // if not defined, the release year is 0 \n     visible:   game . year     0 \n\n     text:   game . year \n     color:   white \n     font.pixelSize:   vpx ( 16 ) \n     font.family:   globalFonts . sans \n\n     anchors.left:   rating . right \n     anchors.top:   rating . top  }", 
            "title": "Release year"
        }, 
        {
            "location": "/themes/example-flixnet/#row", 
            "text": "Currently the  year  element is manually anchored right next to the rating. Doing this for each item every time is quite annoying, let's just put them in a  Row :  Row   { \n     id: detailsRow \n\n     // anchor the whole row \n     anchors.top:   title . bottom \n     anchors.topMargin:   vpx ( 5 ) \n     anchors.left:   title . left \n\n     spacing:   vpx ( 10 ) \n\n\n     Item   { \n         id: rating \n\n         // remove anchor items! \n         // anchors.top: title.bottom \n         // anchors.left: title.left \n\n         // ... \n     } \n\n     Text   { \n         id: year \n\n         // remove anchor items! \n         // anchors.left: rating.right \n         // anchors.top: rating.top \n\n         // ... \n     }  }", 
            "title": "Row"
        }, 
        {
            "location": "/themes/example-flixnet/#player-count", 
            "text": "This one will be a rounded rectangle with smiley faces in it indicating the number of players. The player count defaults to one; similarly to the rating, I'll show the component only if the player count is more than one.  First I create the smiley face image (based on the Unicode \"filled smiling face\" symbol ( U+263B ). Again, it's square sized with a transparent background.     Then create a background rounded Rectangle and the smiles Image in it, putting the whole thing in the Row created in the previous step:  Rectangle   { \n     id: multiplayer \n\n     // the Rectangle s size depends on the Image, \n     // with some additional padding \n     width:   smileys . width   +   vpx ( 8 ) \n     height:   smileys . height   +   vpx ( 5 ) \n\n     color:   #555 \n     radius:   vpx ( 3 ) \n\n     visible:   api . currentGame . players     1 \n\n\n     Image   { \n         id: smileys \n\n         // 13px looked good for me \n         width:   vpx ( 13 )   *   api . currentGame . players \n         height:   vpx ( 13 ) \n\n         anchors.centerIn:   parent \n\n         source:   assets/smiley.svg \n         sourceSize   {   width:   smileys . height ;   height:   smileys . height   } \n\n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     }  }", 
            "title": "Player count"
        }, 
        {
            "location": "/themes/example-flixnet/#developer", 
            "text": "Yet another simple Text in the Row:  Text   { \n     id: developer \n\n     text:   api . currentGame . developer \n     color:   white \n     font.pixelSize:   vpx ( 16 ) \n     font.family:   globalFonts . sans  }    Tip  A game may have multiple developers: if you just want to show them as a Text, you can use  Game .developer , a string that simply lists them all. There's also  Game .developerList , a JavaScript  Array , if you wish to use them individually.", 
            "title": "Developer"
        }, 
        {
            "location": "/themes/example-flixnet/#description", 
            "text": "A bigger text with set boundaries for alignment. If there is a short  summary , I'll use that, otherwise the beginning of the full description.  Text   { \n     id: description \n\n     text:   api . currentGame . description \n     color:   white \n     font.pixelSize:   vpx ( 18 ) \n     font.family:   globalFonts . sans \n\n     // allow word wrapping, justify horizontally \n     wrapMode:   Text . WordWrap \n     horizontalAlignment:   Text . AlignJustify \n     // if the text is too long, end it with an ellipsis (...) \n     elide:   Text . ElideRight \n\n     anchors   { \n         left:   detailsRow . left \n         right:   parent . horizontalCenter \n         top:   detailsRow . bottom ;   topMargin:   vpx ( 20 ) \n         bottom:   parent . verticalCenter ;   bottomMargin:   vpx ( 32 ) \n     }  }", 
            "title": "Description"
        }, 
        {
            "location": "/themes/example-flixnet/#screenshot", 
            "text": "This should be below everything else on the screen -- in fact, if you look at the image at the beginning of this guide, it's actually going into the bottom-half region of the screen, reaching the row of images.  As it's under everything else, I'll put its implementation at the top of the theme file, even before the collection PathView. I'll anchor the top and left edges of the image to the top right corner of the screen. To make it go slightly into the bottom half, I'll anchor the bottom edge to the vertical center of the screen, then add a small amount of  negative margin  to the bottom (a positive margin  reduces  the size of the element, while a negative one  increases  it).  Image   { \n     id: screenshot \n\n     asynchronous:   true \n     fillMode:   Image . PreserveAspectFit \n\n     // set the first screenshot as source, or nothing \n     source:   api . currentGame . assets . screenshots [ 0 ]   ||   \n     sourceSize   {   width:   512 ;   height:   512   } \n\n     anchors.top:   parent . top \n     anchors.right:   parent . right \n     anchors.bottom:   parent . verticalCenter \n     anchors.bottomMargin:   vpx ( - 45 )   // the height of the collection label  }    Note  Using negative margins kind of feels like a hack though, so depending on the situation you might prefer to use simple width/height properties.    Help  The screenshots are stored under  assets.screenshots , which is a regular JavaScript  Array . If it's empty,  screenshots[0]  will be  undefined , and setting an  undefined  value as the  source  of an Image will produce a warning in the log. Setting it to an empty string, however, will not, so appending  ||   as a fallback will silence the warning.  An alternative solution could be is to use  screenshots  as a  model  in eg. a ListView, and the Image as delegate. You could then further extend it to periodically change the current visible screenshot.    Tip  You can also use the  z  property of the components to set their relative \"height\".", 
            "title": "Screenshot"
        }, 
        {
            "location": "/themes/example-flixnet/#gradients", 
            "text": "There are two linear gradients (\"fade-ins\"), one from the left and one from the bottom of the image. Such effect can be added just like regular components, can be positioned, sized, animated, etc. But first of all, to use gradients you'll need the  QtGraphicalEffects  QML module:  import   QtQuick   2.0  import   QtGraphicalEffects   1.0   FocusScope   { \n     // ...  }   Then, create the horizontal linear gradient inside our Image component:  Image   { \n     id: screenshot \n\n     // ... \n\n\n     LinearGradient   { \n         width:   parent . width   *   0.25 \n         height:   parent . height \n\n         anchors.left:   parent . left \n\n         // since it goes straight horizontally from the left, \n         // the Y of the point doesn t really matter \n         start:   Qt . point ( 0 ,   0 ) \n         end:   Qt . point ( width ,   0 ) \n         // at the left side (0%), it starts with a fully visible black \n         // at the right side (100%), it blends into transparency \n         gradient:   Gradient   { \n             GradientStop   {   position:   0.0 ;   color:   black   } \n             GradientStop   {   position:   1.0 ;   color:   transparent   } \n         } \n     }  }   And another for the bottom:  LinearGradient   { \n     width:   parent . width \n     height:   vpx ( 50 ) \n\n     anchors.bottom:   parent . bottom \n\n     // goes straight up, so the X of the point doesn t really matter \n     start:   Qt . point ( 0 ,   height ) \n     end:   Qt . point ( 0 ,   0 ) \n     gradient:   Gradient   { \n         GradientStop   {   position:   0.0 ;   color:   black   } \n         GradientStop   {   position:   1.0 ;   color:   transparent   } \n     }  }   And we're done!", 
            "title": "Gradients"
        }, 
        {
            "location": "/themes/example-flixnet/#selection-marker", 
            "text": "Perhaps not easy to notice on the example images, but actually there's a white rectangular border around the current item's place on the topmost horizontal axis. It's position is fixed and does not move even during scrolling.  I'll create an empty, border-only Rectangle for it. Since it's over everything else in the theme, I'll put it to the bottom of the whole file, after the  gameAxisDelegate 's definition.  Rectangle   { \n     id: selectionMarker \n\n     width:   vpx ( 240 ) \n     height:   vpx ( 135 ) \n\n     color:   transparent \n     border   {   width:   3 ;   color:   white   } \n\n     anchors.left:   parent . left \n     anchors.leftMargin:   vpx ( 100 ) \n     anchors.top:   parent . verticalCenter \n     anchors.topMargin:   vpx ( 45 )  }", 
            "title": "Selection marker"
        }, 
        {
            "location": "/themes/example-flixnet/#opacity", 
            "text": "The currently active horizontal row is fully visible, while the rest are a bit darker. I'll set the opacity of the non-active rows to 60%. In addition, I'll add a light animation, so instead of a sudden change in the visibility, the rows gradually raise their opacity during scrolling.  Simply add these two lines to the  collectionAxisDelegate :  Component   { \n     id: collectionAxisDelegate \n\n     Item   { \n         // JS functions \n\n         // width, height           opacity:   PathView . isCurrentItem   ?   1.0   :   0.6           Behavior   on   opacity   {   NumberAnimation   {   duration:   150   }   }  \n         // ... \n     }  }", 
            "title": "Opacity"
        }, 
        {
            "location": "/themes/example-flixnet/#done", 
            "text": "With all these components added, it seems we're actually done! Here's the end result:   And the full code:  The code so far #3 import   QtQuick   2.0  import   QtGraphicalEffects   1.0  FocusScope   { \n\n     Image   { \n         id: screenshot \n\n         asynchronous:   true \n         fillMode:   Image . PreserveAspectFit \n\n         source:   api . currentGame . assets . screenshots [ 0 ]   ||   \n         sourceSize   {   width:   512 ;   height:   512   } \n\n         anchors.top:   parent . top \n         anchors.right:   parent . right \n         anchors.bottom:   parent . verticalCenter \n         anchors.bottomMargin:   vpx ( - 45 ) \n\n         LinearGradient   { \n             width:   parent . width   *   0.25 \n             height:   parent . height \n\n             anchors.left:   parent . left \n\n             start:   Qt . point ( 0 ,   0 ) \n             end:   Qt . point ( width ,   0 ) \n             gradient:   Gradient   { \n                 GradientStop   {   position:   0.0 ;   color:   black   } \n                 GradientStop   {   position:   1.0 ;   color:   transparent   } \n             } \n         } \n\n         LinearGradient   { \n             width:   parent . width \n             height:   vpx ( 50 ) \n\n             anchors.bottom:   parent . bottom \n\n             start:   Qt . point ( 0 ,   height ) \n             end:   Qt . point ( 0 ,   0 ) \n             gradient:   Gradient   { \n                 GradientStop   {   position:   0.0 ;   color:   black   } \n                 GradientStop   {   position:   1.0 ;   color:   transparent   } \n             } \n         } \n     } \n\n     Text   { \n         id: title \n\n         text:   api . currentGame . title \n         color:   white \n\n         font.pixelSize:   vpx ( 32 ) \n         font.family:   globalFonts . sans \n         font.bold:   true \n\n         anchors.top:   parent . top \n         anchors.topMargin:   vpx ( 42 ) \n         anchors.left:   parent . left \n         anchors.leftMargin:   vpx ( 100 ) \n     } \n\n     Row   { \n         id: detailsRow \n\n         anchors.top:   title . bottom \n         anchors.topMargin:   vpx ( 5 ) \n         anchors.left:   title . left \n\n         spacing:   vpx ( 10 ) \n\n         Item   { \n             id: rating \n\n             visible:   api . currentGame . rating     0.0 \n\n             height:   vpx ( 16 ) \n             width:   height   *   5 \n\n             Image   { \n                 anchors.fill:   parent \n\n                 source:   assets/star_empty.svg \n                 sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n                 fillMode:   Image . TileHorizontally \n                 horizontalAlignment:   Image . AlignLeft \n             } \n\n             Image   { \n                 anchors.top:   parent . top \n                 anchors.left:   parent . left \n\n                 width:   parent . width   *   api . currentGame . rating \n                 height:   parent . height \n\n                 source:   assets/star_filled.svg \n                 sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n                 fillMode:   Image . TileHorizontally \n                 horizontalAlignment:   Image . AlignLeft \n             } \n         } \n\n         Text   { \n             id: year \n\n             visible:   api . currentGame . year     0 \n\n             text:   api . currentGame . year \n             color:   white \n             font.pixelSize:   vpx ( 16 ) \n             font.family:   globalFonts . sans \n         } \n\n         Rectangle   { \n             id: multiplayer \n\n             width:   smileys . width   +   vpx ( 8 ) \n             height:   smileys . height   +   vpx ( 5 ) \n\n             color:   #555 \n             radius:   vpx ( 3 ) \n\n             visible:   api . currentGame . players     1 \n\n             Image   { \n                 id: smileys \n\n                 width:   vpx ( 13 )   *   api . currentGame . players \n                 height:   vpx ( 13 ) \n\n                 anchors.centerIn:   parent \n\n                 source:   assets/smiley.svg \n                 sourceSize   {   width:   smileys . height ;   height:   smileys . height   } \n\n                 fillMode:   Image . TileHorizontally \n                 horizontalAlignment:   Image . AlignLeft \n             } \n         } \n\n         Text   { \n             id: developer \n\n             text:   api . currentGame . developer \n             color:   white \n             font.pixelSize:   vpx ( 16 ) \n             font.family:   globalFonts . sans \n         } \n     } \n\n     Text   { \n         id: description \n\n         text:   api . currentGame . summary   ||   api . currentGame . description \n         color:   white \n         font.pixelSize:   vpx ( 18 ) \n         font.family:   globalFonts . sans \n\n         wrapMode:   Text . WordWrap \n         horizontalAlignment:   Text . AlignJustify \n         elide:   Text . ElideRight \n\n         anchors   { \n             left:   detailsRow . left \n             right:   parent . horizontalCenter \n             top:   detailsRow . bottom ;   topMargin:   vpx ( 20 ) \n             bottom:   parent . verticalCenter ;   bottomMargin:   vpx ( 32 ) \n         } \n     } \n\n     PathView   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n\n         model:   api . collectionList . model \n         currentIndex:   api . collectionList . index \n         delegate:   collectionAxisDelegate \n\n         snapMode:   PathView . SnapOneItem \n         highlightRangeMode:   PathView . StrictlyEnforceRange \n         clip:   true \n\n         pathItemCount:   1   +   Math . ceil ( height   /   vpx ( 180 )) \n         path:   Path   { \n             startX:   collectionAxis . width   *   0.5 \n             startY:   vpx ( 180 )   *   - 0.5 \n             PathLine   { \n                 x:   collectionAxis . path . startX \n                 y:   collectionAxis . path . startY   +   collectionAxis . pathItemCount   *   vpx ( 180 ) \n             } \n         } \n         preferredHighlightBegin:   1   /   pathItemCount \n         preferredHighlightEnd:   preferredHighlightBegin \n\n         focus:   true \n         Keys.onUpPressed:   api . collectionList . decrementIndex () \n         Keys.onDownPressed:   api . collectionList . incrementIndex () \n         Keys.onLeftPressed:   currentItem . selectPrev () \n         Keys.onRightPressed:   currentItem . selectNext () \n         Keys.onReturnPressed:   api . currentGame . launch () \n     } \n\n     Component   { \n         id: collectionAxisDelegate \n\n         Item   { \n             function   selectNext ()   { \n                 modelData . gameList . incrementIndex (); \n             } \n\n             function   selectPrev ()   { \n                 modelData . gameList . decrementIndex (); \n             } \n\n             width:   PathView . view . width \n             height:   vpx ( 180 ) \n\n             opacity:   PathView . isCurrentItem   ?   1.0   :   0.6 \n             Behavior   on   opacity   {   NumberAnimation   {   duration:   150   }   } \n\n             Text   { \n                 id: label \n\n                 text:   modelData . name   ||   modelData . tag \n                 color:   white \n                 font.pixelSize:   vpx ( 18 ) \n                 font.family:   globalFonts . sans \n                 font.bold:   true \n\n                 height:   vpx ( 45 ) \n                 verticalAlignment:   Text . AlignVCenter \n\n                 anchors.left:   parent . left \n                 anchors.leftMargin:   vpx ( 100 ) \n             } \n\n             PathView   { \n                 id: gameAxis \n\n                 anchors.left:   parent . left \n                 anchors.right:   parent . right \n                 anchors.top:   label . bottom \n                 anchors.bottom:   parent . bottom \n\n                 model:   modelData . gameList . model \n                 currentIndex:   modelData . gameList . index \n                 delegate:   gameAxisDelegate \n\n                 snapMode:   PathView . SnapOneItem \n                 highlightRangeMode:   PathView . StrictlyEnforceRange \n\n                 pathItemCount:   2   +   Math . ceil ( width   /   vpx ( 250 )) \n                 path:   Path   { \n                     startX:   vpx ( 220 )   -   vpx ( 250 )   *   2 \n                     startY:   vpx ( 135 )   *   0.5 \n                     PathLine   { \n                         x:   gameAxis . path . startX   +   gameAxis . pathItemCount   *   vpx ( 250 ) \n                         y:   gameAxis . path . startY \n                     } \n                 } \n                 preferredHighlightBegin:   2   /   pathItemCount \n                 preferredHighlightEnd:   preferredHighlightBegin \n             } \n         } \n     } \n\n     Component   { \n         id: gameAxisDelegate \n\n         Item   { \n             width:   vpx ( 240 ) \n             height:   vpx ( 135 ) \n\n             Rectangle   { \n                 anchors.fill:   parent \n                 color:   #333 \n                 visible:   image . status   !==   Image . Ready \n\n                 Text   { \n                     text:   modelData . title \n\n                     anchors.fill:   parent \n                     anchors.margins:   vpx ( 12 ) \n\n                     horizontalAlignment:   Text . AlignHCenter \n                     verticalAlignment:   Text . AlignVCenter \n                     wrapMode:   Text . Wrap \n\n                     color:   white \n                     font.pixelSize:   vpx ( 16 ) \n                     font.family:   globalFonts . sans \n                 } \n             } \n\n             Image   { \n                 id: image \n\n                 anchors.fill:   parent \n                 visible:   source \n\n                 fillMode:   Image . PreserveAspectCrop \n\n                 asynchronous:   true \n                 source:   assets . banner   ||   assets . steam   ||   assets . boxFront \n                 sourceSize   {   width:   256 ;   height:   256   } \n             } \n         } \n     } \n\n     Rectangle   { \n         id: selectionMarker \n\n         width:   vpx ( 240 ) \n         height:   vpx ( 135 ) \n\n         color:   transparent \n         border   {   width:   3 ;   color:   white   } \n\n         anchors.left:   parent . left \n         anchors.leftMargin:   vpx ( 100 ) \n         anchors.top:   parent . verticalCenter \n         anchors.topMargin:   vpx ( 45 ) \n     }  }   It's a bit long, but then again this theme had some complex layouting going on. A possible separation to multiple QML files would look like this:  Screenshot.qml import   QtQuick   2.0  import   QtGraphicalEffects   1.0  Image   { \n     asynchronous:   true \n     fillMode:   Image . PreserveAspectFit \n\n     source:   api . currentGame . assets . screenshots [ 0 ]   ||   \n     sourceSize   {   width:   512 ;   height:   512   } \n\n     LinearGradient   { \n         width:   parent . width   *   0.25 \n         height:   parent . height \n\n         anchors.left:   parent . left \n\n         start:   Qt . point ( 0 ,   0 ) \n         end:   Qt . point ( width ,   0 ) \n         gradient:   Gradient   { \n             GradientStop   {   position:   0.0 ;   color:   black   } \n             GradientStop   {   position:   1.0 ;   color:   transparent   } \n         } \n     } \n\n     LinearGradient   { \n         width:   parent . width \n         height:   vpx ( 50 ) \n\n         anchors.bottom:   parent . bottom \n\n         start:   Qt . point ( 0 ,   height ) \n         end:   Qt . point ( 0 ,   0 ) \n         gradient:   Gradient   { \n             GradientStop   {   position:   0.0 ;   color:   black   } \n             GradientStop   {   position:   1.0 ;   color:   transparent   } \n         } \n     }  }   Title.qml import   QtQuick   2.0  Text   { \n     text:   api . currentGame . title \n     color:   white \n\n     font.pixelSize:   vpx ( 32 ) \n     font.family:   globalFonts . sans \n     font.bold:   true  }   Rating.qml import   QtQuick   2.0  Item   { \n     visible:   api . currentGame . rating     0.0 \n\n     height:   vpx ( 16 ) \n     width:   height   *   5 \n\n     Image   { \n         anchors.fill:   parent \n\n         source:   assets/star_empty.svg \n         sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     } \n\n     Image   { \n         anchors.top:   parent . top \n         anchors.left:   parent . left \n\n         width:   parent . width   *   api . currentGame . rating \n         height:   parent . height \n\n         source:   assets/star_filled.svg \n         sourceSize   {   width:   parent . height ;   height:   parent . height   } \n\n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     }  }   ReleaseYear.qml import   QtQuick   2.0  Text   { \n     visible:   api . currentGame . year     0 \n\n     text:   api . currentGame . year \n     color:   white \n     font.pixelSize:   vpx ( 16 ) \n     font.family:   globalFonts . sans  }   MultiplayerIcon.qml import   QtQuick   2.0  Rectangle   { \n     width:   smileys . width   +   vpx ( 8 ) \n     height:   smileys . height   +   vpx ( 5 ) \n\n     color:   #555 \n     radius:   vpx ( 3 ) \n\n     visible:   api . currentGame . players     1 \n\n     Image   { \n         id: smileys \n\n         width:   vpx ( 13 )   *   api . currentGame . players \n         height:   vpx ( 13 ) \n\n         anchors.centerIn:   parent \n\n         source:   assets/smiley.svg \n         sourceSize   {   width:   smileys . height ;   height:   smileys . height   } \n\n         fillMode:   Image . TileHorizontally \n         horizontalAlignment:   Image . AlignLeft \n     }  }   Description.qml import   QtQuick   2.0  Text   { \n     text:   api . currentGame . summary   ||   api . currentGame . description \n     color:   white \n     font.pixelSize:   vpx ( 18 ) \n     font.family:   globalFonts . sans \n\n     wrapMode:   Text . WordWrap \n     horizontalAlignment:   Text . AlignJustify \n     elide:   Text . ElideRight  }   CollectionAxis.qml import   QtQuick   2.0  PathView   { \n     id: collectionAxis \n\n     model:   api . collectionList . model \n     currentIndex:   api . collectionList . index \n     delegate:   CollectionAxisDelegate   {   } \n\n     snapMode:   PathView . SnapOneItem \n     highlightRangeMode:   PathView . StrictlyEnforceRange \n     clip:   true \n\n     pathItemCount:   1   +   Math . ceil ( height   /   vpx ( 180 )) \n     path:   Path   { \n         startX:   collectionAxis . width   *   0.5 \n         startY:   vpx ( 180 )   *   - 0.5 \n         PathLine   { \n             x:   collectionAxis . path . startX \n             y:   collectionAxis . path . startY   +   collectionAxis . pathItemCount   *   vpx ( 180 ) \n         } \n     } \n     preferredHighlightBegin:   1   /   pathItemCount \n     preferredHighlightEnd:   preferredHighlightBegin \n\n     focus:   true \n     Keys.onUpPressed:   api . collectionList . decrementIndex () \n     Keys.onDownPressed:   api . collectionList . incrementIndex () \n     Keys.onLeftPressed:   currentItem . selectPrev () \n     Keys.onRightPressed:   currentItem . selectNext () \n     Keys.onReturnPressed:   api . currentGame . launch ()  }   CollectionAxisDelegate.qml import   QtQuick   2.0  Item   { \n     function   selectNext ()   { \n         modelData . gameList . incrementIndex (); \n     } \n\n     function   selectPrev ()   { \n         modelData . gameList . decrementIndex (); \n     } \n\n     width:   PathView . view . width \n     height:   vpx ( 180 ) \n\n     opacity:   PathView . isCurrentItem   ?   1.0   :   0.6 \n     Behavior   on   opacity   {   NumberAnimation   {   duration:   150   }   } \n\n     Text   { \n         id: label \n\n         text:   modelData . name   ||   modelData . tag \n         color:   white \n         font.pixelSize:   vpx ( 18 ) \n         font.family:   globalFonts . sans \n         font.bold:   true \n\n         height:   vpx ( 45 ) \n         verticalAlignment:   Text . AlignVCenter \n\n         anchors.left:   parent . left \n         anchors.leftMargin:   vpx ( 100 ) \n     } \n\n     PathView   { \n         id: gameAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   label . bottom \n         anchors.bottom:   parent . bottom \n\n         model:   modelData . gameList . model \n         currentIndex:   modelData . gameList . index \n         delegate:   GameAxisDelegate   {   } \n\n         snapMode:   PathView . SnapOneItem \n         highlightRangeMode:   PathView . StrictlyEnforceRange \n\n         pathItemCount:   2   +   Math . ceil ( width   /   vpx ( 250 )) \n         path:   Path   { \n             startX:   vpx ( 220 )   -   vpx ( 250 )   *   2 \n             startY:   vpx ( 135 )   *   0.5 \n             PathLine   { \n                 x:   gameAxis . path . startX   +   gameAxis . pathItemCount   *   vpx ( 250 ) \n                 y:   gameAxis . path . startY \n             } \n         } \n         preferredHighlightBegin:   2   /   pathItemCount \n         preferredHighlightEnd:   preferredHighlightBegin \n     }  }   GameAxisDelegate.qml import   QtQuick   2.0  Item   { \n     width:   vpx ( 240 ) \n     height:   vpx ( 135 ) \n\n     Rectangle   { \n         anchors.fill:   parent \n         color:   #333 \n         visible:   image . status   !==   Image . Ready \n\n         Text   { \n             text:   modelData . title \n\n             anchors.fill:   parent \n             anchors.margins:   vpx ( 12 ) \n\n             horizontalAlignment:   Text . AlignHCenter \n             verticalAlignment:   Text . AlignVCenter \n             wrapMode:   Text . Wrap \n\n             color:   white \n             font.pixelSize:   vpx ( 16 ) \n             font.family:   globalFonts . sans \n         } \n     } \n\n     Image   { \n         id: image \n\n         anchors.fill:   parent \n         visible:   source \n\n         fillMode:   Image . PreserveAspectCrop \n\n         asynchronous:   true \n         source:   assets . banner   ||   assets . steam   ||   assets . boxFront \n         sourceSize   {   width:   256 ;   height:   256   } \n     }  }   SelectionMarker.qml import   QtQuick   2.0  Rectangle   { \n     width:   vpx ( 240 ) \n     height:   vpx ( 135 ) \n\n     color:   transparent \n     border   {   width:   3 ;   color:   white   }  }   theme.qml import   QtQuick   2.0  FocusScope   { \n\n     Screenshot   { \n         id: screenshot \n\n         anchors.top:   parent . top \n         anchors.right:   parent . right \n         anchors.bottom:   parent . verticalCenter \n         anchors.bottomMargin:   vpx ( - 45 ) \n     } \n\n     Title   { \n         id: title \n\n         anchors.top:   parent . top \n         anchors.topMargin:   vpx ( 42 ) \n         anchors.left:   parent . left \n         anchors.leftMargin:   vpx ( 100 ) \n     } \n\n     Row   { \n         id: detailsRow \n\n         anchors.top:   title . bottom \n         anchors.topMargin:   vpx ( 5 ) \n         anchors.left:   title . left \n\n         spacing:   vpx ( 10 ) \n\n         Rating   {   } \n         ReleaseYear   {   } \n         MultiplayerIcon   {   } \n         Developer   {   } \n     } \n\n     Description   { \n         id: description \n\n         anchors   { \n             left:   detailsRow . left \n             right:   parent . horizontalCenter \n             top:   detailsRow . bottom ;   topMargin:   vpx ( 20 ) \n             bottom:   parent . verticalCenter ;   bottomMargin:   vpx ( 32 ) \n         } \n     } \n\n     CollectionAxis   { \n         id: collectionAxis \n\n         anchors.left:   parent . left \n         anchors.right:   parent . right \n         anchors.top:   parent . verticalCenter \n         anchors.bottom:   parent . bottom \n     } \n\n     SelectionMarker   { \n         anchors.left:   parent . left \n         anchors.leftMargin:   vpx ( 100 ) \n         anchors.top:   parent . verticalCenter \n         anchors.topMargin:   vpx ( 45 ) \n     }  }   theme.cfg name :  Flixnet tutorial  author :  M\u00e1ty\u00e1s Mustoha", 
            "title": "Done!"
        }, 
        {
            "location": "/themes/api/", 
            "text": "API reference (alpha)\n\n\nGames found by Pegasus are organized in collections. Games can have metadata and various kinds of assets, and one game may be present in multiple collections.\n\n\nAll data provided by the Core is available in a global QML object called \napi\n. It has the following main components. Unless otherwise noted, all fields are read-only.\n\n\nList of Collections\n\n\nThe list of collections can be accessed trough \napi.collectionList\n. It's an Object with the following members:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodel\n\n\nThe array of \nCollection\n items; can be used as the \nmodel\n parameter of dynamic layouts.\n\n\n\n\n\n\ncount\n\n\nThe number of \nCollection\n items in \nmodel\n. Positive integer.\n\n\n\n\n\n\nindex\n\n\nThe index of the currently selected item of \nmodel\n. \nWritable\n, accepted values are positive integers less than \ncount\n, and \n-1\n (nothing selected). Setting invalid values will be ignored.\n\n\n\n\n\n\ncurrent\n\n\nThe currently selected \nCollection\n. If \nindex\n is \n-1\n, its value is \nnull\n, otherwise equivalent to \nmodel[index]\n. \ncurrent\n as a field is read-only, but the \nCollection\n itself has writable fields; see below.\n\n\n\n\n\n\n\n\nFurthermore, it also has the following callable methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrementIndex()\n\n\nIncrements the \nindex\n by one. If the \nindex\n was pointing to the last item, it jumps to the first one (ie. wraps around).\n\n\n\n\n\n\ndecrementIndex()\n\n\nDecrements the \nindex\n by one. If the \nindex\n was pointing to the firs item, it jumps to the last one (ie. wraps around).\n\n\n\n\n\n\nincrementIndexNoWrap()\n\n\nIncrements the \nindex\n by one, if it's not pointing to the last item already.\n\n\n\n\n\n\ndecrementIndexNoWrap()\n\n\nDecrements the \nindex\n by one, if it's not pointing to the first item already.\n\n\n\n\n\n\n\n\nOne Collection\n\n\napi.currentCollection\n can be used as a shortcut for \napi.collectionList.current\n. A \nCollection\n has the following data members. Properties marked as \"optional\" might have no value (eg. empty string or empty array).\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntag\n\n\nA short, unique string for identifying a collection, for example \nnes\n, \nmario carts\n, etc.\n\n\n\n\n\n\nname\n\n\n The proper name of the collection, eg. \"Nintendo Entertainment System\", \"Mario Cartridges\", etc.\n\n\n\n\n\n\ngameList\n\n\nObject storing the list of games (see below).\n\n\n\n\n\n\n\n\nList of Games\n\n\nSimilarly to the list of collections, \napi.currentCollection.gameList\n is an Object with the following members:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmodelAll\n\n\nThe array of all \nGame\n items in this collection; can be used as the \nmodel\n parameter of dynamic layouts.\n\n\n\n\n\n\nmodel\n\n\nThe array of \nGame\n items matching the currently active \nFilter\n (see later); can be used as the \nmodel\n parameter of dynamic layouts.\n\n\n\n\n\n\ncountAll\n\n\nThe number of items in \nmodelAll\n. Positive integer.\n\n\n\n\n\n\ncount\n\n\nThe number of items in \nmodel\n. Positive integer.\n\n\n\n\n\n\nindex\n\n\nThe index of the currently selected item of \nmodel\n (not \nmodelAll\n, since you can't select a game you've hide with a filter). \nWritable\n, accepted values are positive integers less than \ncount\n, and \n-1\n (nothing selected). Setting invalid values will be ignored.\n\n\n\n\n\n\ncurrent\n\n\nThe currently selected \nGame\n. If \nindex\n is \n-1\n, its value is \nnull\n, otherwise equivalent to \nmodel[index]\n.\n\n\n\n\n\n\n\n\nFurthermore, it also has the following callable methods:\n\n\n\n\n\n\n\n\nMethod\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nincrementIndex()\n\n\nIncrements the \nindex\n by one. If the \nindex\n was pointing to the last item, it jumps to the first one (ie. wraps around).\n\n\n\n\n\n\ndecrementIndex()\n\n\nDecrements the \nindex\n by one. If the \nindex\n was pointing to the firs item, it jumps to the last one (ie. wraps around).\n\n\n\n\n\n\nincrementIndexNoWrap()\n\n\nIncrements the \nindex\n by one, if it's not pointing to the last item already.\n\n\n\n\n\n\ndecrementIndexNoWrap()\n\n\nDecrements the \nindex\n by one, if it's not pointing to the first item already.\n\n\n\n\n\n\n\n\nOne Game\n\n\napi.currentGame\n can be used as a shortcut for \napi.collectionList.current.gameList.current\n. A \nGame\n is an Object with the following data members. Properties marked as \"optional\" might have no value (eg. empty string or empty array).\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nGame title\n\n\n\n\n\n\ndeveloper\n\n\n Developer(s) as a string. If there are more than one, they are separated with \n,\n.\n\n\n\n\n\n\npublisher\n\n\n Publisher(s) as a string. If there are more than one, they are separated with \n,\n.\n\n\n\n\n\n\ngenre\n\n\n Genre(s) as a string. If there are more than one, they are separated with \n,\n.\n\n\n\n\n\n\ndeveloperList\n\n\n Developers as an array.\n\n\n\n\n\n\npublisherList\n\n\n Publishers as an array.\n\n\n\n\n\n\ngenreList\n\n\n Genres as an array.\n\n\n\n\n\n\nsummary\n\n\n Short description (2-3 sentence or less)\n\n\n\n\n\n\ndescription\n\n\n Longer description\n\n\n\n\n\n\nrelease\n\n\n Release date as QML \ndate\n (default: invalid)\n\n\n\n\n\n\nyear\n\n\n Release year as integer (default: 0)\n\n\n\n\n\n\nmonth\n\n\n Release month as integer (default: 0)\n\n\n\n\n\n\nday\n\n\n Release day as integer (default: 0)\n\n\n\n\n\n\nplayers\n\n\n Maximum number of players (default: 1)\n\n\n\n\n\n\nfavorite\n\n\n Boolean (true/false) value (default: false)\n\n\n\n\n\n\nrating\n\n\n Floating-point value between and including \n0.0\n and \n1.0\n (default: \n0.0\n)\n\n\n\n\n\n\nplayCount\n\n\n Positive integer (default: 0)\n\n\n\n\n\n\nlastPlayed\n\n\n As QML \ndate\n, incl. time (default: invalid)\n\n\n\n\n\n\nassets\n\n\nAn Object containing game assets (see below)\n\n\n\n\n\n\n\n\nGame Assets\n\n\nEvery \nGame\n has an \nasset\n member Object with the following data members. All of them are string URLs, and all of them can be empty.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nboxFront\n\n\nThe front of the game box\n\n\n\n\n\n\nboxBack\n\n\nThe back of the game box\n\n\n\n\n\n\nboxSpine\n\n\nThe spine (side) of the game box\n\n\n\n\n\n\nboxFull\n\n\nFull size box art (front + back + spine)\n\n\n\n\n\n\ncartridge\n\n\nImage of the game medium (cartridge, floppy, disk, etc.)\n\n\n\n\n\n\nlogo\n\n\nThe game's logo, usually the title art over a transparent background\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmarquee\n\n\nA wide (often over 3:1) artwork on the top of arcade machines\n\n\n\n\n\n\nbezel\n\n\nDecoration around a game's screen on an arcade machine or emulator\n\n\n\n\n\n\npanel\n\n\nControl panel of the arcade machine\n\n\n\n\n\n\ncabinetLeft\n\n\nLeft side of the arcade machine\n\n\n\n\n\n\ncabinetRight\n\n\nRight side of the arcade machine\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntile\n\n\nA square-sized image (\nnot\n the desktop icon)\n\n\n\n\n\n\nbanner\n\n\nAn image in 16:9 aspect ratio\n\n\n\n\n\n\nsteam\n\n\nSteam grid icon, 460:215 ratio (most often 460x215, some people use 920x430)\n\n\n\n\n\n\nposter\n\n\nAdvertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image)\n\n\n\n\n\n\nbackground\n\n\nA background image, eg. artwork or selected screenshot\n\n\n\n\n\n\nmusic\n\n\nBackground music\n\n\n\n\n\n\n\n\n\n\nIn addition, the following members can have multiple values, and as such usable as eg. \nmodel\n sources. All of them can be empty.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nscreenshots\n\n\nArray of strings, each a URL to an image.\n\n\n\n\n\n\nvideos\n\n\nArray of strings, each a URL to a video source.\n\n\n\n\n\n\n\n\nLaunching games\n\n\nYou can select a game by changing \napi.collectionList.index\n and \napi.currentCollection.gameList.index\n. Then call \napi.launchGame\n to start the game.\n\n\nFiltering games\n\n\napi.filters\n is an Object with the data members below. Changing these values will automatically update all \nCollection\n's \nmodel\n field to include \nGame\ns that match \nall\n filters. \nAll fields are writable\n.\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntitle\n\n\nMatch games whose titles contain this string. String value. (default: empty)\n\n\n\n\n\n\nplayerCount\n\n\nMatch games that have at least this many players. Positive integer. (default: 1)\n\n\n\n\n\n\nfavorite\n\n\nSetting to true includes only games marked as favorite. Boolean (true/false) value. (default: false)\n\n\n\n\n\n\n\n\n\n\nNote\n\n\nAt the moment, the indices of the game lists reset to \n0\n or \n-1\n (no hits) when the \nFilter\n changes.\n\n\n\n\nFonts\n\n\nPegasus comes with a sans-serif and a sans-serif condensed font face, which are used in the main menu. If you want to use the same font families in your theme, you can access them using a global QML object called \nglobalFonts\n. This has the following properties:\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsans\n\n\nThe sans-serif font\n\n\n\n\n\n\ncondensed\n\n\nThe sans-serif condensed font\n\n\n\n\n\n\n\n\nYou can use them as the value for \nfont.family\n members of Text items, eg. \nfont.family: globalFonts.sans\n.\n\n\nThe fonts currently in use are Roboto and Roboto Condensed.", 
            "title": "API reference"
        }, 
        {
            "location": "/themes/api/#api-reference-alpha", 
            "text": "Games found by Pegasus are organized in collections. Games can have metadata and various kinds of assets, and one game may be present in multiple collections.  All data provided by the Core is available in a global QML object called  api . It has the following main components. Unless otherwise noted, all fields are read-only.", 
            "title": "API reference (alpha)"
        }, 
        {
            "location": "/themes/api/#list-of-collections", 
            "text": "The list of collections can be accessed trough  api.collectionList . It's an Object with the following members:     Property  Description      model  The array of  Collection  items; can be used as the  model  parameter of dynamic layouts.    count  The number of  Collection  items in  model . Positive integer.    index  The index of the currently selected item of  model .  Writable , accepted values are positive integers less than  count , and  -1  (nothing selected). Setting invalid values will be ignored.    current  The currently selected  Collection . If  index  is  -1 , its value is  null , otherwise equivalent to  model[index] .  current  as a field is read-only, but the  Collection  itself has writable fields; see below.     Furthermore, it also has the following callable methods:     Method  Description      incrementIndex()  Increments the  index  by one. If the  index  was pointing to the last item, it jumps to the first one (ie. wraps around).    decrementIndex()  Decrements the  index  by one. If the  index  was pointing to the firs item, it jumps to the last one (ie. wraps around).    incrementIndexNoWrap()  Increments the  index  by one, if it's not pointing to the last item already.    decrementIndexNoWrap()  Decrements the  index  by one, if it's not pointing to the first item already.", 
            "title": "List of Collections"
        }, 
        {
            "location": "/themes/api/#one-collection", 
            "text": "api.currentCollection  can be used as a shortcut for  api.collectionList.current . A  Collection  has the following data members. Properties marked as \"optional\" might have no value (eg. empty string or empty array).     Property  Description      tag  A short, unique string for identifying a collection, for example  nes ,  mario carts , etc.    name   The proper name of the collection, eg. \"Nintendo Entertainment System\", \"Mario Cartridges\", etc.    gameList  Object storing the list of games (see below).", 
            "title": "One Collection"
        }, 
        {
            "location": "/themes/api/#list-of-games", 
            "text": "Similarly to the list of collections,  api.currentCollection.gameList  is an Object with the following members:     Property  Description      modelAll  The array of all  Game  items in this collection; can be used as the  model  parameter of dynamic layouts.    model  The array of  Game  items matching the currently active  Filter  (see later); can be used as the  model  parameter of dynamic layouts.    countAll  The number of items in  modelAll . Positive integer.    count  The number of items in  model . Positive integer.    index  The index of the currently selected item of  model  (not  modelAll , since you can't select a game you've hide with a filter).  Writable , accepted values are positive integers less than  count , and  -1  (nothing selected). Setting invalid values will be ignored.    current  The currently selected  Game . If  index  is  -1 , its value is  null , otherwise equivalent to  model[index] .     Furthermore, it also has the following callable methods:     Method  Description      incrementIndex()  Increments the  index  by one. If the  index  was pointing to the last item, it jumps to the first one (ie. wraps around).    decrementIndex()  Decrements the  index  by one. If the  index  was pointing to the firs item, it jumps to the last one (ie. wraps around).    incrementIndexNoWrap()  Increments the  index  by one, if it's not pointing to the last item already.    decrementIndexNoWrap()  Decrements the  index  by one, if it's not pointing to the first item already.", 
            "title": "List of Games"
        }, 
        {
            "location": "/themes/api/#one-game", 
            "text": "api.currentGame  can be used as a shortcut for  api.collectionList.current.gameList.current . A  Game  is an Object with the following data members. Properties marked as \"optional\" might have no value (eg. empty string or empty array).     Property  Description      title  Game title    developer   Developer(s) as a string. If there are more than one, they are separated with  , .    publisher   Publisher(s) as a string. If there are more than one, they are separated with  , .    genre   Genre(s) as a string. If there are more than one, they are separated with  , .    developerList   Developers as an array.    publisherList   Publishers as an array.    genreList   Genres as an array.    summary   Short description (2-3 sentence or less)    description   Longer description    release   Release date as QML  date  (default: invalid)    year   Release year as integer (default: 0)    month   Release month as integer (default: 0)    day   Release day as integer (default: 0)    players   Maximum number of players (default: 1)    favorite   Boolean (true/false) value (default: false)    rating   Floating-point value between and including  0.0  and  1.0  (default:  0.0 )    playCount   Positive integer (default: 0)    lastPlayed   As QML  date , incl. time (default: invalid)    assets  An Object containing game assets (see below)", 
            "title": "One Game"
        }, 
        {
            "location": "/themes/api/#game-assets", 
            "text": "Every  Game  has an  asset  member Object with the following data members. All of them are string URLs, and all of them can be empty.     Property  Description      boxFront  The front of the game box    boxBack  The back of the game box    boxSpine  The spine (side) of the game box    boxFull  Full size box art (front + back + spine)    cartridge  Image of the game medium (cartridge, floppy, disk, etc.)    logo  The game's logo, usually the title art over a transparent background         Property  Description      marquee  A wide (often over 3:1) artwork on the top of arcade machines    bezel  Decoration around a game's screen on an arcade machine or emulator    panel  Control panel of the arcade machine    cabinetLeft  Left side of the arcade machine    cabinetRight  Right side of the arcade machine         Property  Description      tile  A square-sized image ( not  the desktop icon)    banner  An image in 16:9 aspect ratio    steam  Steam grid icon, 460:215 ratio (most often 460x215, some people use 920x430)    poster  Advertisement poster, usually with 2:3 aspect ratio (in general a portrait-aligned image)    background  A background image, eg. artwork or selected screenshot    music  Background music      In addition, the following members can have multiple values, and as such usable as eg.  model  sources. All of them can be empty.     Property  Description      screenshots  Array of strings, each a URL to an image.    videos  Array of strings, each a URL to a video source.", 
            "title": "Game Assets"
        }, 
        {
            "location": "/themes/api/#launching-games", 
            "text": "You can select a game by changing  api.collectionList.index  and  api.currentCollection.gameList.index . Then call  api.launchGame  to start the game.", 
            "title": "Launching games"
        }, 
        {
            "location": "/themes/api/#filtering-games", 
            "text": "api.filters  is an Object with the data members below. Changing these values will automatically update all  Collection 's  model  field to include  Game s that match  all  filters.  All fields are writable .     Property  Description      title  Match games whose titles contain this string. String value. (default: empty)    playerCount  Match games that have at least this many players. Positive integer. (default: 1)    favorite  Setting to true includes only games marked as favorite. Boolean (true/false) value. (default: false)      Note  At the moment, the indices of the game lists reset to  0  or  -1  (no hits) when the  Filter  changes.", 
            "title": "Filtering games"
        }, 
        {
            "location": "/themes/api/#fonts", 
            "text": "Pegasus comes with a sans-serif and a sans-serif condensed font face, which are used in the main menu. If you want to use the same font families in your theme, you can access them using a global QML object called  globalFonts . This has the following properties:     Property  Description      sans  The sans-serif font    condensed  The sans-serif condensed font     You can use them as the value for  font.family  members of Text items, eg.  font.family: globalFonts.sans .  The fonts currently in use are Roboto and Roboto Condensed.", 
            "title": "Fonts"
        }
    ]
}